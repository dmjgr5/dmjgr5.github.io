{"0": {
    "doc": "Confluence",
    "title": "Confluence",
    "content": " ",
    "url": "/docs/agile/agile-confluence/",
    
    "relUrl": "/docs/agile/agile-confluence/"
  },"1": {
    "doc": "Confluence",
    "title": "Table of contents",
    "content": ". | Confluence 가 필요한 이유? . | 콘텐츠 관리 | 검색 | Confluence 템플릿 | JIRA와 통합 | 페이지 및 파일 버전 관리 | 피드백 | 사용자 관리 | 애드온 및 플러그인 | . | . Confluence 는 문서 기반 협업의 용도로 사용할 수 있는 도구이다. 이렇게 JIRA 는 Work flow 관리, Confluence 는 문서 기반 협업의 용도로 사용하며 Confluence Page 와 JIRA Issue 를 연결하면 더 강력하게 협업을 진행할 수 있습니다. ",
    "url": "/docs/agile/agile-confluence/#table-of-contents",
    
    "relUrl": "/docs/agile/agile-confluence/#table-of-contents"
  },"2": {
    "doc": "Confluence",
    "title": "Confluence 가 필요한 이유?",
    "content": "콘텐츠 관리 . 콘텐츠 관리에는 콘텐츠 생성, 유지 관리, 구성 및 삭제가 포함된다. 콘텐츠 생성 도구는 사용하기 쉬우 며 기본 텍스트 서식에서 표 만들기, 문서 연결 및 매크로 포함에 이르기까지 다양한 기능을 포함하고 있어 매우 유용한다. 콘텐츠를 별도의 공간으로 구성하고 필요에 따라 계층 적 순서로 정렬 및 정렬 할 수 있습니다. 검색 . 이 도구는 모든 콘텐츠에 대한 전체 텍스트 검색을 지원한다. 검색 결과에는 페이지 기본 콘텐츠 및 댓글의 텍스트와 일치하는 모든 결과가 포함된다. Confluence 템플릿 . 미리 서식이 지정된 페이지를 만드는 데 사용할 수있는 몇 가지 모범 사례 템플릿과 함께 제공되어 보다 세련된 페이지를 작성할 수 있다. JIRA와 통합 . JIRA와 Confluence는 둘 다 Atlassian 에 의해 개발되었으며 서로 완벽하게 통합된다. 개발 작업은 JIRA에서 추적 할 수 있으며 해당 보고서는 자동 링크로 생성 할 수 있다. 페이지 및 파일 버전 관리 . 협업 도구이기 때문에 말할 필요도없이 모든 수준의 다양한 부서 간 팀이 여러 번 추가 또는 수정이 발생한다. 마지막 편집 이후 변경된 사항을 추적하기 위해 Confluence는 이전 버전의 페이지와 파일을 자동으로 저장한다. 또한 이전 버전은 차이를 비교하거나 필요한 경우 마지막 편집을 되 돌리는 데 사용할 수 있습니다. 피드백 . 의견 형태의 팀 피드백은 페이지에 게시 할 수 있으며 필요할 때 항상 참조하거나 검색 할 수도 있다. 사용자 관리 . 사용자 및 그룹 기반 권한을 설정할 수 있습니다. 각 공간에 대해 별도의보기, 편집 및 관리자 권한을 설정할 수도 있습니다. 다음 섹션에서 공백의 개념에 대해 설명합니다. 애드온 및 플러그인 . 도구가 제공하는 표준 이상의 기능을 수행하는 데 사용할 수있는 다양한 애드온 플러그인이 있습니다. 인기있는 애드온으로는 Draw.io Diagrams, Balsamiq Mockups, Scroll PDF 내보내기 등이 있습니다. ",
    "url": "/docs/agile/agile-confluence/#confluence-%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0",
    
    "relUrl": "/docs/agile/agile-confluence/#confluence-가-필요한-이유"
  },"3": {
    "doc": "Jira",
    "title": "Jira",
    "content": " ",
    "url": "/docs/agile/agile-jira/",
    
    "relUrl": "/docs/agile/agile-jira/"
  },"4": {
    "doc": "Jira",
    "title": "Table of contents",
    "content": ". | 주요 용어 . | 스프린트 | 백로그 . | 스프린트 백로그 | . | 이슈 . | 에픽 | 스토리 | 작업 | . | . | . JIRA 는 Work flow 관리하는 도구이다. 이렇게 JIRA 는 Work flow 관리, Confluence 는 문서 기반 협업의 용도로 사용하며 Confluence Page 와 JIRA Issue 를 연결하면 더 강력하게 협업을 진행할 수 있습니다. ",
    "url": "/docs/agile/agile-jira/#table-of-contents",
    
    "relUrl": "/docs/agile/agile-jira/#table-of-contents"
  },"5": {
    "doc": "Jira",
    "title": "주요 용어",
    "content": ". 스프린트 . 반복적인 개발 주기. [계획&gt; 개발&gt; 리뷰] 까지가 1스프린트 . 백로그 . 요구사항을 모아둔 곳, 할일 이라고 생각하면 쉽다. 스프린트 백로그 . 해당 스프린트에 진행할 요구사항을 모아둔 곳 . 이슈 . 에픽 . 많은 사용자 스토리, 많은 작은 단위 업무로 나눌 수 있는 업무의 큰 틀. 하나의 스프린트에 걸쳐서 끝나지 않고, 여러 스프린트에 걸쳐서 종료되며, 여러 스토리들의 집합. 주로 Major Feature들을 중심으로 정의한다. 예) 사용자 기본 기능 . 스토리 . 서비스 고객에게 가치를 줄 수 있는 기능을 서술한 것. 기술적인 전문 용어가 아닌 비즈니스 언어로 작성하는 것이 좋다. 예) 사용자는 팀원 초대를 위해 로그인을 할 수 있다. 작업 . 에픽/스토리의 하위 작업으로 에픽/스토리를 완료하기 위해서 개발자가 실제로 작업해야 하는 각각의 단위 작업 예) 유사 기능 조사, 테스트 시나리오 작성 등 . ",
    "url": "/docs/agile/agile-jira/#%EC%A3%BC%EC%9A%94-%EC%9A%A9%EC%96%B4",
    
    "relUrl": "/docs/agile/agile-jira/#주요-용어"
  },"6": {
    "doc": "Agile",
    "title": "Agile",
    "content": "Agile 방법론 및 범용적인 툴에 대해 정리한다. ",
    "url": "/docs/agile",
    
    "relUrl": "/docs/agile"
  },"7": {
    "doc": "Machine Learning Theory",
    "title": "Machine Learning Theory",
    "content": " ",
    "url": "/docs/newtech/ai-machinelearning-basic/",
    
    "relUrl": "/docs/newtech/ai-machinelearning-basic/"
  },"8": {
    "doc": "Machine Learning Theory",
    "title": "Table of contents",
    "content": ". | Linear Regression and Logistic Classification . | Terms | Initialization | Optimizer | Convolutional Neural Networks (CNN) | Recurrent Neural Network (RNN) | . | . This is the document written when I research the concept of Machine Learning. Linear Regression and Logistic Classification . Terms . epoch, batch size . Initialization . | RBM (2006) -&gt; Xavier | DropOut (2014) | Ensemble : Merge learning model | . Optimizer . | gradient decent, adam and other optimizers | . Convolutional Neural Networks (CNN) . | How to connect layers : Forward, Split &amp; Merge, Recurrent Network(RNN) | convolution, relu(2012), pooling, repeated. | stride, convolution, sampling, padding, pooling | . Recurrent Neural Network (RNN) . | Stacked RNN, Softmax | Dynamic RNN | Time Series RNN | . ",
    "url": "/docs/newtech/ai-machinelearning-basic/#table-of-contents",
    
    "relUrl": "/docs/newtech/ai-machinelearning-basic/#table-of-contents"
  },"9": {
    "doc": "AI",
    "title": "AI",
    "content": " ",
    "url": "/docs/New%20Technology/ai/",
    
    "relUrl": "/docs/New%20Technology/ai/"
  },"10": {
    "doc": "AWS Basic",
    "title": "AWS Basic",
    "content": " ",
    "url": "/docs/cloud/aws-basic/",
    
    "relUrl": "/docs/cloud/aws-basic/"
  },"11": {
    "doc": "AWS Basic",
    "title": "Table of contents",
    "content": ". | AWS 의 시작 | AWS Console 계정 생성하고 설치해보자 | 주요 내용 . | AWS 리소스 만들기 | Container 만들고 띄워보기 | EKS 설치하기 | yaml 파일을 만들면 진짜 동작할까? | . | . Kubernetes 를 AWS 에 구축하기 위한 기본적은 절차와 고려해야 할만한 사항들을 간략히 정리해 보았습니다. 이해하기 쉬운 내용으로 작성하였으며, 보다 자세한 내용은 구글링을 통해 확인하면 좋을 것 같습니다. ",
    "url": "/docs/cloud/aws-basic/#table-of-contents",
    
    "relUrl": "/docs/cloud/aws-basic/#table-of-contents"
  },"12": {
    "doc": "AWS Basic",
    "title": "AWS 의 시작",
    "content": "EC2 에 tomcat/apache 설치하고 war 파일을 넣으면 돌아갈까? . | 일부 설치파일도 필요하다. | OS/jdk/tomcat 등의 버전 확인도 필요하다. | . ",
    "url": "/docs/cloud/aws-basic/#aws-%EC%9D%98-%EC%8B%9C%EC%9E%91",
    
    "relUrl": "/docs/cloud/aws-basic/#aws-의-시작"
  },"13": {
    "doc": "AWS Basic",
    "title": "AWS Console 계정 생성하고 설치해보자",
    "content": ". | 대규모의 사이트의 경우는 과금도 고려해야 한다. | 지역/ 사용할 네트워크/ Subnet 등을 고려해야 한다. | 근래에는 elastic search, kafka 등의 오픈 소스 설치도 고려해야 한다. | AWS 는 RDS 를 제공하기 때문에 별도 DB 생성하지 않아도 된다. | . Container 란? . | 여러 설치를 하나의 가상 공간에 설치하여 가상 공간을 서버와 연결하게 하는 역할을 해준다. | Container 내 여러 모듈들이 상호작용을 해야하므로 운영자가 필요하다. 이는 ㅏubernetes 가 담당할 것이다. | AMS 의 경우, 이는 EKS 모듈을 사용하면 수월하게 관리할 수 있게 해준다. | . ",
    "url": "/docs/cloud/aws-basic/#aws-console-%EA%B3%84%EC%A0%95-%EC%83%9D%EC%84%B1%ED%95%98%EA%B3%A0-%EC%84%A4%EC%B9%98%ED%95%B4%EB%B3%B4%EC%9E%90",
    
    "relUrl": "/docs/cloud/aws-basic/#aws-console-계정-생성하고-설치해보자"
  },"14": {
    "doc": "AWS Basic",
    "title": "주요 내용",
    "content": "AWS 리소스 만들기 . 계정은 만들어 있으니 EC2 인스턴스를 만들어서 리전을 선택한다. 그리고 나만의 Network (VPC) 를 만들고 Subnet 을 만든다. OS 선택하고, 서버 사양을 설정하고 방화벽도 설정하고(Security Group), Keypair 도 설정해야 한다. Security Group 은 EC2 자체에서도 아무거나 접속하지 못하게 한다. Container 만들고 띄워보기 . docker 를 설치했는데 뭐부터 해야할까? OS docker image 를 받은 후, Docker image 안에 들어가 본다. docker run -it ... 이후 jdk 와 같은 여러가지 설치해본다. 이러한 작업은 어렵고 복잡하기 때문에 Dockerfile 을 만들어 실행한다. 대략적인 형식은 아래와 같다. FROM... RUN ... COPY ... RUN ... USER ... EXPOSE 8709 ... ENTRYPOINT ... 이후 build , push 한다. docker build -tag docker push . EKS 설치하기 . k8s 의 설치와 관리 부담을 줄이기 위하여 사용할 수 있다. | 권한(IAM), 설치, 관리(kubectl), 등등의 작업을 AWS EKS 에서 제공한다. 이후 EKS 클러스터 생성하고 워크노드를 생성한다. | . yaml 파일을 만들면 진짜 동작할까? . 내가 만든 container 를 진짜 kubernetes 에서 작동할 수 있을까? . | namespace 를 만들어 보자.(파일의 폴더처럼..) . | ex) deployment.yaml, service.yaml | . | . ",
    "url": "/docs/cloud/aws-basic/#%EC%A3%BC%EC%9A%94-%EB%82%B4%EC%9A%A9",
    
    "relUrl": "/docs/cloud/aws-basic/#주요-내용"
  },"15": {
    "doc": "AWS",
    "title": "AWS",
    "content": " ",
    "url": "/docs/cloud/aws/",
    
    "relUrl": "/docs/cloud/aws/"
  },"16": {
    "doc": "Blockchain 개요",
    "title": "Blockchain 개요",
    "content": " ",
    "url": "/docs/newtech/blockchain-basic/",
    
    "relUrl": "/docs/newtech/blockchain-basic/"
  },"17": {
    "doc": "Blockchain 개요",
    "title": "Table of contents",
    "content": ". | 블록체인이란 무엇인가 | 블록이란 무엇인가 | SHA256 이란 무엇인가 | 각각의 블록에는 뭐가 있을까 | Proof of Work | 블록체인에서의 노드란 | 블록체인을 조작하기 위해서는 | 블록체인 전송 프로세스는 | . 블록체인 기술이 발전하고 이를 이용한 여러 활용 서비스가 많아지고 있는 요즘입니다. 이에 블록체인은 과연 무엇이고 어떠한 요소를 가지고 작동하는지의 이해를 돕고자 해당 글을 작성합니다. 블록체인이란 무엇인가 . 블록체인은 정보를 포함하는 블록들의 체인이라고 정의할 수 있습니다. 시간에 따라 작성된 디지털 문서를 목적으로 하는 것으로서 이러한 블록체인 데이터는 되돌리거나 가공이 불가능하다고 하며, 중복 데이터가 존재하지 않습니다. 블록체인은 은행이나 정부와 같은 third-party 에 의한 요청없이 금전, 자산, 계약 등과 같은 데이터들을 안전하게 전송할 수 있습니다. 블록체인은 Software Protocol 의 일종이며, 인터넷 환경 없이는 불가능합니다. 그러므로 다른 기술 (데이터베이스, 소프트웨어 어플리케이션, 기타 연결 기기 등) 에도 영향을 끼치기 때문에 Meta technology 라고 일컫기도 합니다. 블록체인은 비트코인이 아니며, 비트코인을 기반으로하는 기술이라고 할 수 있습니다. 다시 말해, 비트코인은 디지털 토큰이며, 블록체인은 그 디지털 토큰을 추적하기 위한 원장이라고 할 수 있습니다. 블록이란 무엇인가 . 블록체인은 정보를 가지고 있는 여러 블록들에 의해 연결된 것이라고 할 수 있습니다. 각 블록에 저장되는 데이터는 블록체인의 타입에 따라 달라지기도 합니다. 예를 들어, 비트코인 블럭은 Sender, Receiver, Number of Bitcoins 로 구성된 정보들을 가지고 있습니다. 최초의 블럭을 일반적으로 Genesis block 이라고 일컫습니다. 이후 생성되는 각각의 블록들은 이전블록과 체인 형태로 연결되게 됩니다. SHA256 이란 무엇인가 . 블록은 해쉬정보를 가지고 있습니다. 해당 블록의 데이터를 기반으로 한 해쉬값이 생성되며 이는 유일한 값을 가지고 있습니다. 각각의 블록에는 뭐가 있을까 . 각 블록은 Data, Hash', Hash of the previouse block 을 가지고 이습니다. 3개로 이루어진 블록체인이 있다고 할 때, 첫번째 블록은 최초 블록이므로 이전 해쉬값이 없으나, 두번째, 세번째 및 이후의 블록들은 이전 블록의 해쉬값을 가지고 있습니다. 블록체인을 보다 완결한 보증을 이루는 기술이라 할 수 있습니다. 만약 공격자가 두번째 블록을 가공한다고 할때 해당 블럭의 해쉬값은 변경될 것이며, 이는 세번째, 네번째 등 이후의 해쉬값도 변경됩니다. 그러나 이는 사실 불가능하다고 볼 수 있습니다. Proof of Work . Hash 는 데이터를 조작을 불가능하게 만드는 최고의 기술이라고 할수 있습니다. 그러나 근래의 컴퓨터들은 초당 수천, 수만 건의 해쉬 계산 능력을 가지고 있어 변경 블록 해쉬 뿐 아니다 모든 블록들을의 해쉬를 계산할 수 있는 능력을 가지고 있지요. 이러한 이슈 해결을 위해 블록체인에서는 블록 생성의 속도를 는추는 Proof-of-Work 의 개념을 사용합니다. 비트코인의 경우, 새로운 블록을 추가하는데 10분의 Proof-of-Work 을 요구합니다. 즉, 공격자가 2번 블록의 데이터를 변경한다면 이후 10 분간의 Proof-of-Work 을 수행한 이후에야 3번 블록을 변경할 수 있을 것입니다. 따라서 이러한 Hash 와 Proof-of-Work 의 기능은 블록체인을 안전으로부터 더욱 강화될 수 있도록 합니다. 블록체인에서의 노드란 . 블록체인의 또 다른 기능 중의 하나는 분산 네트워크 즉, (Distributed P2P Network) 을 구성하고 있다는 점입니다. 기존의 어떠한 중앙 개체에 의해 관리되는 것이 아니라, 분산 네트워크를 이용해서 어느 누구든지 블록체인 네트워크에 기여할 수 있습니다. 각각의 노드는 블록체인의 모든 데이터를 가질 수 있으며, 이러한 각각의 컴푸터를 Node 라 명칭합니다. 특정 노드가 새로운 블록을 생성한다면 이는 블록체인 네트워크에 참여한 모든 노드에게 전송되며, 각각의 노드는 해당 블록을 검증한 이후에 그의 블록체인이 추가를 합니다. 네트워크의 모든 노드는 Consensus 를 구성하고 있어 어떠한 블록이 유효한지 불효한지, 부정합한 블록에 대해서는 거절을 하기도 합니다. 블록체인을 조작하기 위해서는 . 블록제인 데이터를 변경하기 위해서는 . | 모든 블록에 대해 Proof-of-Work 를 수행 | 분산네트워크의 50% 이상을 통제 | 위 두가지를 수행해야 만 블록체인 데이터를 조작할 수 있습니다. | . 결론은 현실적으로 불가능하며, 이러한 점은 블록체인이 안전하다는 것을 반증한다고 볼 수 잇습니다. 블록체인 전송 프로세스는 . | 특정 사용자가 거래를 요청합니다. 이 때의 거래 데이터는 암호화폐, 계약내용 또는 기록 등의 모든 정보를 가진 데이터라 볼 수 있습니다. | 요청된 거래는 인접 노드에 의해 분산 네트워크로 broadcast 됩니다. | 네트워크 상의 모든 노드는 블록체인의 합의된 알고리즘에 의해 거래 내역을 검증합니다. | 거래가 완료되면, 생성된 블록은 기존의 블록체인에 추가될 것이고, 그러한 방식에 의해 영구적이고, 불가변적인 데이터가 될 수 있습니다. | . 참고자료 . | Blockchain Tutorial: Learn Blockchain Technology | Cryptographic Hashes and Bitcoin | . ",
    "url": "/docs/newtech/blockchain-basic/#table-of-contents",
    
    "relUrl": "/docs/newtech/blockchain-basic/#table-of-contents"
  },"18": {
    "doc": "geth 설치 및 기본 활용하기",
    "title": "geth 설치 및 기본 활용하기",
    "content": " ",
    "url": "/docs/newtech/blockchain-geth/",
    
    "relUrl": "/docs/newtech/blockchain-geth/"
  },"19": {
    "doc": "geth 설치 및 기본 활용하기",
    "title": "Table of contents",
    "content": ". | 1. geth 설치 | 2. 메인넷 네트워크 연결 | 3. 개인 네트워크 생성 - 계정 생성 | 4. 계정의 모든 목록 출력 | . geth는 go ethererum의 약자라고 한다. 현재 이더리움 엔진은 C++이나 Python 등 여러 언어로 개발되어 있는데, 그중 go언어로 개발된 geth가 가장 널리 사용되고 있다고 한다. 1. geth 설치 . 먼저 geth를 설치해보자. 설치는 다음 링크를 통해 할 수 있다. 자신의 운영체제에 맞는 것으로 다운받자. geth 설치하기: https://geth.ethereum.org/downloads/ . 2. 메인넷 네트워크 연결 . | 우선 CLI 명령어를 입력하기 위해 Windows PowerShell 로 이동합니다. | geth --datadir \"users/packt/ethereum\" --networkid 1 . | --datadir 은 블록제인을 저장할 경로를 지정하는데 사용됩니다. | . | . 3. 개인 네트워크 생성 - 계정 생성 . | ` geth account new ` . | # geth --datadir . account new 는 특정 경로를 지정하는데 사용됩니다. | . | . PS D:\\3_blockChainStudy&gt; geth account new INFO [10-10|16:33:56.382] Maximum peer count ETH=50 LES=0 total=50 Your new account is locked with a password. Please give a password. Do not forget this password. Password: aabbbb Repeat password: aabbbb Your new key was generated Public address of the key: 0xe51d1aD2Afd68adfab6Ecd8EfB0c522F032FB9 Path of the secret key file: C:\\Users\\dcjam\\AppData\\Local\\Ethereum\\keystore\\UTC--2021-10-10T07-34-03.667044900Z--xxxxx . 4. 계정의 모든 목록 출력 . PS D:\\3_blockChainStudy&gt; geth account list INFO [10-10|16:44:28.979] Maximum peer count ETH=50 LES=0 total=50 INFO [10-10|16:44:28.991] Set global gas cap cap=50,000,000 Account #0: {xxxxx} keystore://C:\\Users\\dcjam\\AppData\\Local\\Ethereum\\keystore\\UTC--2021-10-10T07-34-03.667044900Z xxxxx . | 키는 기본적으로 --datadir 경로 내에 저장되며 --keystore 옵션을 사용해 다를 경로를 지정할 수 있습니다. | . ",
    "url": "/docs/newtech/blockchain-geth/#table-of-contents",
    
    "relUrl": "/docs/newtech/blockchain-geth/#table-of-contents"
  },"20": {
    "doc": "리믹스(Remix) 도구를 이용한 Solidity 이해하기",
    "title": "리믹스(Remix) 도구를 이용한 Solidity 이해하기",
    "content": " ",
    "url": "/docs/newtech/blockchain-solidity/",
    
    "relUrl": "/docs/newtech/blockchain-solidity/"
  },"21": {
    "doc": "리믹스(Remix) 도구를 이용한 Solidity 이해하기",
    "title": "Table of contents",
    "content": ". | 1. 리믹스 접속 | 2. 개발 환경 접속 및 파일 생성 | 3. 예제 소스 작성 | 4. Compile | 5. Deploy | 6. Excute | . Remix 는 스마트 계약 개발을 위한 솔리디티 언어를 이용하여 계약의 제작, 개발, 배포 등을 할 수 있는 통합 개발 환경으로서 이전에는 browser-solidity 라고 불려졌습니다. 현재는 별도 설치 없이 브라우저 환경에서 손쉽게 개발환경을 구축할 수 있으며, 간단 예제를 통해 솔리디티 개발 환경을 이해하고자 합니다. 1. 리믹스 접속 . 아래 주소를 접속하여 리믹스에 접근합니다. | https://remix.ethereum.org/ | . 2. 개발 환경 접속 및 파일 생성 . 아래와 같이 개발 환경 화면을 확인할 수 있으며, 새 파일을 클릭하여 HellowWorld.sol 파일을 생성합니다. 3. 예제 소스 작성 . 예제 소스를 작성합니다. 소스 내용은 아래를 클릭하여 확인하여 주세요. HellowWorld.sol pragma solidity ^0.6.0; contract HelloWorld { uint count; constructor() public { count = 0; } function getCount() public view returns(uint){ return count; } function incrementCount() public{ count = count + 1; } } . 4. Compile . Compiler Version 을 소스의 버전과 맞추고 Compile HellowWorld.sol 을 클릭합니다. 노란색 버튼(ABI, Bytecode) 를 복사한 후 메모장에서 확인하여 아래와 같은 내용을 확인할 수 있습니다. 5. Deploy . 좌측 탭 메뉴 중 Deploy 메뉴로 이동하여 Deployed Contracts 를 클릭하면 현재 생성된 컨트랙트 내 함수들을 확인 할수 있습니다. 6. Excute . getCount 를 클릭하면 count 변수를 초기화 했던 0 값을 확인할 수 있습니다. incrementCount 클릭 후, getCount 를 클릭하면 uint256 값이 1 증가한 것을 확인할 수 있습니다. ",
    "url": "/docs/newtech/blockchain-solidity/#table-of-contents",
    
    "relUrl": "/docs/newtech/blockchain-solidity/#table-of-contents"
  },"22": {
    "doc": "Blockchain",
    "title": "Blockchain",
    "content": " ",
    "url": "/docs/New%20Technology/blockchain/",
    
    "relUrl": "/docs/New%20Technology/blockchain/"
  },"23": {
    "doc": "블록체인 무엇인가?",
    "title": "블록체인 무엇인가?",
    "content": " ",
    "url": "/docs/book-review/book-review-blockchain/",
    
    "relUrl": "/docs/book-review/book-review-blockchain/"
  },"24": {
    "doc": "블록체인 무엇인가?",
    "title": "Table of contents",
    "content": ". | 블록체인은 P2P 시스템을 기반으로 한다. | 해싱값을 사용한다. | 비대칭 암호화 기법 | 해시 퍼즐 | 트랜잭션 데이터 | . | [다니엘 드레셔 저/이병욱 역 | 이지스퍼블리싱 | 2018년 02월 19일] | . 의도적으로 전문 용어가 아닌 쉬운 용어로 이해하기 쉽게 설명한 책으로 입문자에게 가볍게 이해할 수 있고 거부감이 없는 책으로 추천할 만하다. 블록체인은 P2P 시스템을 기반으로 한다. P2P 네트워크를 기반으로 하여 모든 노드 간의 블록 체인 데이터를 공유한다. 해싱값을 사용한다. 데이터를 해싱하여 고유의 데이터로 만듦으로서 이전 체인과의 무결성을 확보한다. 비대칭 암호화 기법 . 개인키에서 공개키, 또는 공개키에서 개인키로의 암호화/ 복호화를 통하여 소유권을 확보하고 인증/승인을 가능케 한다. 해시 퍼즐 . 난이도를 동적으로 하여 해싱퍼즐을 푸는 노드에게 보상을 하게 끔 한다. 트랜잭션 데이터 . 일반적인 블록체인의 구저는 아래와 같으며, 기본 개념을 익힌다. 특히, 블록헤더와 헤드의 차이점을 이해하자. | 각각의 Transaction 데이터는 병합 해슁의 형태로 머클트리로 구성되며, 이와 함께 TimeStamp, 이전 블록의 해쉬, Nonce 등을 블록 헤더로 가진다. | Head 는 가장 최근에 추가된 데이터를 참조하는 값이다. | . ",
    "url": "/docs/book-review/book-review-blockchain/#table-of-contents",
    
    "relUrl": "/docs/book-review/book-review-blockchain/#table-of-contents"
  },"25": {
    "doc": "Book Review",
    "title": "Book Review",
    "content": "도서 관련 리뷰를 정리하였습니다. ",
    "url": "/docs/book-review",
    
    "relUrl": "/docs/book-review"
  },"26": {
    "doc": "Maven 생성 및 실행",
    "title": "Maven 생성 및 실행",
    "content": " ",
    "url": "/docs/buildpackage/buildpackage-mavenbasic/",
    
    "relUrl": "/docs/buildpackage/buildpackage-mavenbasic/"
  },"27": {
    "doc": "Maven 생성 및 실행",
    "title": "Table of contents",
    "content": ". | mvn 자바 프로젝트 생성 | 컴파일과 실행하기 . | 컴파일 하기 | jar 파일 생성하기 | jar 파일 실행하기 | . | Build LifeCycle 과 Phase 들 . | Build LifeCycle | . | 메이븐 프로젝트 이클립스에서 로드하기 . | 컴파일 플러그인으로 JDK 버전 변경하기 | . | 웹 프로젝트로 변경하기 . | 서블릿/JSP 라이브러리 설정하기 | 라이브러리 인덱싱 검색 | 내가 만든 라이브러리 설치하기 | . | . Maven 의 종류와 사용방법에 대해 논한다. 아래 링크를 참조하여 작성하였습니다.  . https://www.youtube.com/watch?v=hDp__2KmjVg&amp;list=PLq8wAnVUcTFWRRi_JWLArMND_PnZM6Yja&amp;index=2 . ",
    "url": "/docs/buildpackage/buildpackage-mavenbasic/#table-of-contents",
    
    "relUrl": "/docs/buildpackage/buildpackage-mavenbasic/#table-of-contents"
  },"28": {
    "doc": "Maven 생성 및 실행",
    "title": "mvn 자바 프로젝트 생성",
    "content": "D:\\99_Maven\\maven_project&gt;mvn archetype:generate -DgroupId=com.newlecture -DartifactId=javaprj -DarchetypeArtifactId=maven-archetype-quickstart . 설치 완료 후 아래 로그가 나온다. package: com.newlecture Y: : [INFO] ---------------------------------------------------------------------------- [INFO] Using following parameters for creating project from Old (1.x) Archetype: maven-archetype-quickstart:1.0 [INFO] ---------------------------------------------------------------------------- [INFO] Parameter: basedir, Value: D:\\99_Maven\\maven_project [INFO] Parameter: package, Value: com.newlecture [INFO] Parameter: groupId, Value: com.newlecture [INFO] Parameter: artifactId, Value: javaprj [INFO] Parameter: packageName, Value: com.newlecture [INFO] Parameter: version, Value: 1.0-SNAPSHOT [INFO] project created from Old (1.x) Archetype in dir: D:\\99_Maven\\maven_project\\javaprj [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 01:29 min [INFO] Finished at: 2023-01-26T21:53:27+09:00 [INFO] --- . ",
    "url": "/docs/buildpackage/buildpackage-mavenbasic/#mvn-%EC%9E%90%EB%B0%94-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1",
    
    "relUrl": "/docs/buildpackage/buildpackage-mavenbasic/#mvn-자바-프로젝트-생성"
  },"29": {
    "doc": "Maven 생성 및 실행",
    "title": "컴파일과 실행하기",
    "content": "컴파일 하기 . D:\\99_Maven\\maven_project\\javaprj&gt;mvn compile [INFO] Scanning for projects... jar 파일 생성하기 . D:\\99_Maven\\maven_project\\javaprj&gt;mvn package [INFO] Scanning for projects... jar 파일 실행하기 . D:\\99_Maven\\maven_project\\javaprj&gt;java -cp target\\javaprj-1.0-SNAPSHOT.jar com.newlecture.App Hello Maven! . ",
    "url": "/docs/buildpackage/buildpackage-mavenbasic/#%EC%BB%B4%ED%8C%8C%EC%9D%BC%EA%B3%BC-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/buildpackage/buildpackage-mavenbasic/#컴파일과-실행하기"
  },"30": {
    "doc": "Maven 생성 및 실행",
    "title": "Build LifeCycle 과 Phase 들",
    "content": "Build LifeCycle . 단계별로 실행을 담당하는 플러그인들로 이루어져 있다. D:\\99_Maven\\maven_project\\javaprj&gt;mvn help:describe -Dcmd=compile .. 중략 It is a part of the lifecycle for the POM packaging 'jar'. This lifecycle includes the following phases: * validate: Not defined * initialize: Not defined * generate-sources: Not defined * process-sources: Not defined * generate-resources: Not defined * process-resources: org.apache.maven.plugins:maven-resources-plugin:2.6:resources * compile: org.apache.maven.plugins:maven-compiler-plugin:3.1:compile * process-classes: Not defined * generate-test-sources: Not defined * process-test-sources: Not defined * generate-test-resources: Not defined * process-test-resources: org.apache.maven.plugins:maven-resources-plugin:2.6:testResources * test-compile: org.apache.maven.plugins:maven-compiler-plugin:3.1:testCompile * process-test-classes: Not defined * test: org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test * prepare-package: Not defined * package: org.apache.maven.plugins:maven-jar-plugin:2.4:jar * pre-integration-test: Not defined * integration-test: Not defined * post-integration-test: Not defined * verify: Not defined * install: org.apache.maven.plugins:maven-install-plugin:2.4:install * deploy: org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 28.680 s [INFO] Finished at: 2023-01-26T22:07:31+09:00 [INFO] ------------------------------------------------------------------------ D:\\99_Maven\\maven_project\\javaprj&gt; . ",
    "url": "/docs/buildpackage/buildpackage-mavenbasic/#build-lifecycle-%EA%B3%BC-phase-%EB%93%A4",
    
    "relUrl": "/docs/buildpackage/buildpackage-mavenbasic/#build-lifecycle-과-phase-들"
  },"31": {
    "doc": "Maven 생성 및 실행",
    "title": "메이븐 프로젝트 이클립스에서 로드하기",
    "content": "Import &gt; Maven &gt; Exising Maven Projects 선택한다. 이후 pom.xml 이 있는 경로를 지정한다. ctrl + F11 을 클릭하여 실행을 확인한다. 컴파일 플러그인으로 JDK 버전 변경하기 . pom.xml 에 아래 추가하여 프로젝트 폴더 오른쪽 버튼 maven &gt; update 한다. &lt;properties&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.complier.target&gt;1.8&lt;/maven.complier.target&gt; &lt;/properties&gt; . ",
    "url": "/docs/buildpackage/buildpackage-mavenbasic/#%EB%A9%94%EC%9D%B4%EB%B8%90-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%9D%B4%ED%81%B4%EB%A6%BD%EC%8A%A4%EC%97%90%EC%84%9C-%EB%A1%9C%EB%93%9C%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/buildpackage/buildpackage-mavenbasic/#메이븐-프로젝트-이클립스에서-로드하기"
  },"32": {
    "doc": "Maven 생성 및 실행",
    "title": "웹 프로젝트로 변경하기",
    "content": "서블릿/JSP 라이브러리 설정하기 . https://www.youtube.com/watch?v=vlIGi0hG_n4 . https://mvnrepository.com/ 사이트에 들어가서 해당되는 lib 를 찾아 아래 maven 탭 내용을 복사하여 pom.xml 에 붙여넣기 한 후 저장한다. 그 이후에는 dependencies 에 포함되어 있는 것을 확인할 수 있다. 라이브러리 인덱싱 검색 . 또 다른 라이브러리 추가 방법으로는 pom.xml 파일을 열었을 때 하단의 Dependencies 탭에서 Add 버튼을 클릭하여 추가할 수 있다. 이때 검색을 위해서는 사전에 Maven Repository &gt; Global Repositories 에 인덱싱이 되어있어야 한다. (3시간 소요) . 내가 만든 라이브러리 설치하기 . https://www.youtube.com/watch?v=2fyQm_gfnHk&amp;list=PLq8wAnVUcTFWRRi_JWLArMND_PnZM6Yja&amp;index=12 . ",
    "url": "/docs/buildpackage/buildpackage-mavenbasic/#%EC%9B%B9-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A1%9C-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/buildpackage/buildpackage-mavenbasic/#웹-프로젝트로-변경하기"
  },"33": {
    "doc": "Build & Package",
    "title": "Build &amp; Package",
    "content": "소프트웨어 개발 이후 배포를 위한 build tool 과 그와 관련한 각 패키지의 종류 및 특징을 설명한다. ",
    "url": "/docs/buildpackage#build--package",
    
    "relUrl": "/docs/buildpackage#build--package"
  },"34": {
    "doc": "Build & Package",
    "title": "Build & Package",
    "content": " ",
    "url": "/docs/buildpackage",
    
    "relUrl": "/docs/buildpackage"
  },"35": {
    "doc": "gcc 컴파일하기",
    "title": "gcc 컴파일하기",
    "content": "리눅스에서는 간단하게 gcc (GNU compiler collection) 컴파일러를 이용하여 컴파일 할 수 있다. 예제로 아래의 코드를 작성한 후 gcctest.c 파일로 저장한다. ​ . #include&lt;stdio.h&gt; ​ int main() { printf(\"Hello, world\\n\"); return 0; } . ​ gcc -o [실행파일명] [소스파일명] 명령어를 사용하여 아래와 같이 실행파일을 생성할 수 있다. ​ . root@master:~# ll | egrep gcc -rw-r--r-- 1 root root 72 Jan 18 13:50 gcctest.c root@master:~# root@master:~# gcc -o gcctest.out gcctest.c root@master:~# root@master:~# ll | egrep gcc -rw-r--r-- 1 root root 72 Jan 18 13:50 gcctest.c -rwxr-xr-x 1 root root 8304 Jan 18 13:51 gcctest.out* root@master:~# root@master:~# ./gcctest.out Hello, world root@master:~# . ",
    "url": "/docs/programming-language/gcc/",
    
    "relUrl": "/docs/programming-language/gcc/"
  },"36": {
    "doc": "C, C#",
    "title": "C, C#",
    "content": " ",
    "url": "/docs/programming-language/c-csharp/",
    
    "relUrl": "/docs/programming-language/c-csharp/"
  },"37": {
    "doc": "CI/CD Tools",
    "title": "CI/CD Tools",
    "content": "CI/CD Tools 에 대해 정리한다. ",
    "url": "/docs/cicdtools",
    
    "relUrl": "/docs/cicdtools"
  },"38": {
    "doc": "MAS",
    "title": "MSA",
    "content": " ",
    "url": "/docs/cloud/cloud-mas/#msa",
    
    "relUrl": "/docs/cloud/cloud-mas/#msa"
  },"39": {
    "doc": "MAS",
    "title": "Table of contents",
    "content": ". | MSA 정의 . | MicroService 와 Architecture 로 구분해서 이해해보자.  | . | 주요 고려사항 | 패턴화 | 주요 활용기업 | 시연 내용 정리 . | 호출 방법 | . | 쿠버네티스 요약 | . 단일 서버에서 서비스 하던 것에서 벗어나 가능한 작은 서비스들로 나눈어 클라우드 환경에서 구성하기 위함이다. MicroService  -&gt; Contailer -&gt; 많아지니까 클러스터 구성 -&gt; 이런 환경을 클라우드 환경에서 구현함 . 1. Monolith 한 시스템 2. VMdnldp 가상환경 만들어 서비스 3. VM 위에 작은  서비스 만듦 - 많아진다, 관리하기 어렵다. - 쿠버네티스 오픈 소스 제공(많은 서비스를 넣어 놓고 스케일업 할 수 있음) - 결국 작은 서비스를 쉽고 빠르게 운용하기 위함 . MSA 정의 . MicroService 와 Architecture 로 구분해서 이해해보자.  . MicroService : 서비스를 가능한 작게, 도메인 기준으로, 독립적으로 동작 가능하게 하나는 개념 Architecture :기술적으로 MicroService 를 어떻게 구현할 것지 . 주요 고려사항 . 1. 게이트웨이 :어느 서비스로 갈지를 정해야 하기 때문에 필요하다.(넷플릭스의 Zuul) - 여러 서비스의 주소를 게이트웨이의 단일 주소로 관리(테스트 시 용이) 2. 서비스 발견 : 어느 서비스로 갈지를 정해야 하기 때문에 필요하다. 3. 레지스트리 :서비스 정보를 보관(넷플릭스의 Erueka) - 많은 서비스의 상태, 주소기록/관리 : 서비스명만 알면 가능하도록 한다. 4. 서비스 간 통신 :타 서비스가 필요할 때 서비스끼리 활용할 수 있도록 한다. - 다른 서비스한테 바로 알려줘, 또는 넣어놓을테니 필요할 때 처리해 - CircuitBreaker : 다른 서비스끼리 통신하다 하나의 서비스가 안될 때 5. 로깅/모니터링 : 다수 서비스에 대한 로그 확인 필요 (오픈소스 예: Fluentd -&gt; ElasticSearch -&gt; Kibana) . 패턴화 . 실질적으로 어떻게 구현하고 무엇으로 개발해야 될지를 다이어그램으로 제공(CNCF) . 주요 활용기업 . - 넷플릭스 : SpringBoot + SpringCloud library =&gt; SpringCloud 로 Maven  Repository(Maven.org ) 검색 . 시연 내용 정리 . 각각의 서비스가 이클립스 상에서 각각의 Project 라고 보면 됨 swagger : 개발된 API 를 테스트할 수 있는 화면 재고 서비스가 죽더라도 다른 서비스들은 살아 있어야 한다. 서비스: 재고서비스 생산서비스 주문서비스 | | 화면 : swagger(1) swagger(2) swagger(3) | | DB: RabbitMQ MariaDB MongoDB . 호출 방법 . 방법1. 다른 서비로 직접 호출하는 방법 - 1. HTTP REST API 호출 : 일반적으로 간단한 데이터 - 2 . 다른 서비스 죽었을 때 살아있는 서비스는 문제없이 된다. 단 복구 이후에 수량 안맞으면 맞춰준다. - 보상트랜잭션:MSA 구성시 보상트랜잭션 설계가 중요하다. 방법2) 간접적으로 다른 서비스의 큐(RabbitMQ) 를 활용한다. - 간접 큐 호출 시에도 문제없이 작동하지만 살아있을 때 큐에 적재되었던 것을 그때 처리한다. 쿠버네티스 요약 . POD (서비스마다 하나씩 들어가 있음) | Service | Ingress (외부에서 접속할 수 있음, 쿠버네티스 안에서 네이밍 역할) . ",
    "url": "/docs/cloud/cloud-mas/#table-of-contents",
    
    "relUrl": "/docs/cloud/cloud-mas/#table-of-contents"
  },"40": {
    "doc": "MAS",
    "title": "MAS",
    "content": " ",
    "url": "/docs/cloud/cloud-mas/",
    
    "relUrl": "/docs/cloud/cloud-mas/"
  },"41": {
    "doc": "Cloud Network",
    "title": "Cloud Network",
    "content": " ",
    "url": "/docs/cloud/cloud-network/",
    
    "relUrl": "/docs/cloud/cloud-network/"
  },"42": {
    "doc": "Cloud Network",
    "title": "Table of contents",
    "content": ". | Provider 종류 | 서비스 유형 | 클라우드 서비스 모델 | Cloud Native 모델 | Cloud Native 4 가지 핵심 요소 . | 컨테이너 | MSA | DevOps | CI/CD | . | . 기업의 핵심 경쟁력으로 Digital Transformation 이 화두가 됨에 따라 클라우드 컴퓨팅 기술이 대세인 시대입니다. 대표적인 기업으로 넷플릭스는 클라우드 기반의 데이터 센터를 구축하기도 했습니다. 네트워크 구조로서 IaaS, PaaS, SaaS 순으로 변하는 경향이 있으며 클라우드 네트워크의 주요 내용을 정리해 보고자 합니다. ",
    "url": "/docs/cloud/cloud-network/#table-of-contents",
    
    "relUrl": "/docs/cloud/cloud-network/#table-of-contents"
  },"43": {
    "doc": "Cloud Network",
    "title": "Provider 종류",
    "content": ". | CSP : (Cloud Service Provider) :AWS(32%), Azure(20%), GCP(9%) 2021 년 기준 | MSP : (Managed Service Provider):운영 및 기술지원 , ex) 메가존, SK C&amp;C, LG C&amp;S, SDS | ISP : (Independent Software Provider) | . ",
    "url": "/docs/cloud/cloud-network/#provider-%EC%A2%85%EB%A5%98",
    
    "relUrl": "/docs/cloud/cloud-network/#provider-종류"
  },"44": {
    "doc": "Cloud Network",
    "title": "서비스 유형",
    "content": ". | IaaS :인프라 제공 | PaaS :응용 프로그램 개발 시 플랫폼 제공 | SaaS :소프트웨어 제공(개발 불필요) ex)Google WorkSpace | . ",
    "url": "/docs/cloud/cloud-network/#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%9C%A0%ED%98%95",
    
    "relUrl": "/docs/cloud/cloud-network/#서비스-유형"
  },"45": {
    "doc": "Cloud Network",
    "title": "클라우드 서비스 모델",
    "content": ". | Private : 기업 민감 정보, 기밀 정보 운용(ex 은행, 공공기관) | Public : 클라우드 일반적인 유형 , 서버/스토리지 운용 및 제공, 요금만 지불, 인프라 운용에 효율적 | Hybrid : 혼합, 기밀정보 private, 웹서버 퍼블릭 등의 구분하여 혼합하여 제공 가능 | Multi : 2개 이상 클라우드로 구축하며, 서비스 가용성을 높이고, 장애시 백업 클라우드를 운용하여 장애를 방지할 수 있다. 또한 요구수준에 따라서 유연하고 복수의 제공업체로부터 서비스가 가능하다. | . ",
    "url": "/docs/cloud/cloud-network/#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%AA%A8%EB%8D%B8",
    
    "relUrl": "/docs/cloud/cloud-network/#클라우드-서비스-모델"
  },"46": {
    "doc": "Cloud Network",
    "title": "Cloud Native 모델",
    "content": ". | 클라우드의 이점을 활용할 수 있도록 어플리케이션 구축/운용 | DevOps 개념과 실제 서비스를 하나의 프로세스로 자동화하는 방법론 | 컨테이너/ MSA 기술 필요 : 경쟁 우위 확보, 유연성, 개발에 집중, 비즈니스에 집중 | . ",
    "url": "/docs/cloud/cloud-network/#cloud-native-%EB%AA%A8%EB%8D%B8",
    
    "relUrl": "/docs/cloud/cloud-network/#cloud-native-모델"
  },"47": {
    "doc": "Cloud Network",
    "title": "Cloud Native 4 가지 핵심 요소",
    "content": ". Cloud Native 는 프라이빗, 퍼블릭 및 하이브리드 클라우드 환경 전체에 지속적인 개발과 자동화된 관리 환경을 제공하기 위해 특별히 설계된 애플리케이션을 의미합니다. | Containers : 운영체체를 가상화한 개념 | MSA : 실행이 가능한 어플리케이션 단위 프로세스 | DevOps :자동화 툴을 이용해 효율적인 프로젝트 관리 | CI/CD : DevOps 를 구현하기 위한 일련의 프로세스 (Continuous Integration/ Continuous Distribution ) | . 컨테이너 . | 소스 개발 -&gt; 이미지 파일 -&gt; 컨테이너 실행 (도커:라이브러리, 실행파일 포함 -&gt; 어플리케이션 실행) | 이식성 :이미지에 어플리케이션에 필요한 모든 것을 넣을 수 있으며 확장이 용이하다. | 쿠버네티스 (k8s) 의 필요성 : 컨테이너 관리를 여러 기능들을 통해 자동화한다. 스케줄러 통해 리소스 체크/ 컨테이너 자동 생성,제거) . | 아마존 :EKS, 구글 :Anthos, MS:Azure | . | . MSA . | Loose Coupling : 느슨한 결합, 독립적인 개발과 운영 | 서비스 간 통신이 많으므로 Service Mesh 로 구성한다. 데이터 결로의 적절한 설정, 프록시 추가 (장애전파 방지, 부하 분산) | 명확한 목적성을 가지고 도입 고려해야 한다. | 모놀리틱 : 하나의 전체 서비스 , 기존의 서비스 아키텍쳐 . | 구조 간단, 빠른 개발 가능, 규모가 커지면 개발, 서비스 어려움, 개발,테스트 속도 느려짐 | . | MSA: 서비스 확장 고려된 설계, 작은 서비스 단위의 독립적 설계, 개발 가능 . | 신규 서비스 개별서비스로 추가 가능, 서비스 통신 복장, 데이터 정합성 확보 어려움 -&gt; 빠른 개발, 효율적이 조직 운영의 장정이 더 크다. | 클라우드 서비스의 아키텍쳐로 장점이 더 많다. | . | . DevOps . | 개발과 운영의 Seamless 한 연결 및 통합 필요, 자동화된 하나의 프로세스로 통합 필요 | 노하우 공유, 조직 기술역량 고도화 | . CI/CD . | 지속적인 통합, 소스 저장소, 빌드 ,테스트 , 실행 등의 일련의 절차를 통해 시간 단축 | 상용서비스 적용 및 배포 . | 도구: git, jenkins, terraform, elastic sear4ch 등등.. | . | . ",
    "url": "/docs/cloud/cloud-network/#cloud-native-4-%EA%B0%80%EC%A7%80-%ED%95%B5%EC%8B%AC-%EC%9A%94%EC%86%8C",
    
    "relUrl": "/docs/cloud/cloud-network/#cloud-native-4-가지-핵심-요소"
  },"48": {
    "doc": "Cloud",
    "title": "Cloud",
    "content": "클라우드 네트워크 관련 자료 및 시스템 구축에 대해 정리한다. ",
    "url": "/docs/cloud",
    
    "relUrl": "/docs/cloud"
  },"49": {
    "doc": "CSS",
    "title": "CSS",
    "content": " ",
    "url": "/docs/programming-language/css/",
    
    "relUrl": "/docs/programming-language/css/"
  },"50": {
    "doc": "CSS",
    "title": "Table of contents",
    "content": ". | Main Poperties | 3 way to design CSS . | External Style Sheet | Internal Style Sheet | Inline Style | . | . CSS is Cascading Style Sheets that make more beautiful HTML. There are some cases to configure CSS for HTML. ",
    "url": "/docs/programming-language/css/#table-of-contents",
    
    "relUrl": "/docs/programming-language/css/#table-of-contents"
  },"51": {
    "doc": "CSS",
    "title": "Main Poperties",
    "content": ". | Basic usage : | color | backbround-color | width | font-align | font-size | font-weight | border | : define an area . | . ",
    "url": "/docs/programming-language/css/#main-poperties",
    
    "relUrl": "/docs/programming-language/css/#main-poperties"
  },"52": {
    "doc": "CSS",
    "title": "3 way to design CSS",
    "content": "External Style Sheet . | link style sheet file with css format | . &lt;head&gt; &lt;link rel=\"stylename\" type=\"text/css\" href=\"style.css\"&gt; &lt;/head&gt; . | It is easy to maintain if there are some updates. | . Internal Style Sheet . | Insert &lt;style&gt; between &lt;head&gt; and &lt;/head&gt; | It is better to use for one HTML page. | . &lt;head&gt; &lt;style type=\"text/css\"&gt; Selector {property: value;} ex) h1 {color:red} &lt;/style&gt; &lt;/head&gt; . Inline Style . | Insert style format directly | . &lt;p style=\"font-size: 15px;\"&gt;this is 15pixel&lt;/p&gt; . ",
    "url": "/docs/programming-language/css/#3-way-to-design-css",
    
    "relUrl": "/docs/programming-language/css/#3-way-to-design-css"
  },"53": {
    "doc": "Edge DB on Windows10",
    "title": "MySQL 기본",
    "content": ". After Installation of DockerToolbox, follow as below; . | Pull edgedb . | $ docker pull edgedb/edgedb | . | Stop docker env first . | stop : $ docker-machine stop | . | Setting folder share . | share c: driver on VirtualBox setting if required. | . | Start docker env . | start: $ docker-machine start | . | Go to SHH to enjoy docker . | go to ssh : $ docker-machine ssh | . | Run Container . | docker run -d --name=edgedb-server -p \"5656:5656\" -p \"8888:8888\" -p \"8889:8889\" -v /c/dev:/var/lib/edgedb/data edgedb/edgedb | . | Go into Container Shell . | docker@default:~$ docker exec -it bd4 bash | . | . https://www.w3schools.com/whatis/whatis_js.asp . ",
    "url": "/docs/database/database-edgedb/#mysql-%EA%B8%B0%EB%B3%B8",
    
    "relUrl": "/docs/database/database-edgedb/#mysql-기본"
  },"54": {
    "doc": "Edge DB on Windows10",
    "title": "Edge DB on Windows10",
    "content": " ",
    "url": "/docs/database/database-edgedb/",
    
    "relUrl": "/docs/database/database-edgedb/"
  },"55": {
    "doc": "MySQL 기본",
    "title": "MySQL 기본",
    "content": ". MySQL Installation . | In this turotial, Bitnami APM used. | . Access MySQL using MySQL Monitor . To access MySQL, go to C:\\Bitnami\\wampstack-7.3.11-0\\mysql\\bin in CMD, then command mysql -uroot -p. After input password, you can access MySQL server. Create Schema (Database) . | create : CREATE DATABASE openturorials; | check database list : SHOW DATABASES; | use and select database, command USE openturorials; | delete : DROP DATABASE openturorials; | . Create Table . mysql&gt; CREATE TABLE topic( -&gt; id INT(11) NOT NULL AUTO_INCREMENT, -&gt; title VARCHAR(100) NOT NULL, -&gt; description TEXT NULL, -&gt; created DATETIME NOT NULL, -&gt; author VARCHAR(30) NULL, -&gt; profile VARCHAR(100) NULL, -&gt; PRIMARY KEY(id)); Query OK, 0 rows affected, 1 warning (0.18 sec) . Show Table . mysql&gt; SHOW tables; +-------------------------+ | Tables_in_openturorials | +-------------------------+ | topic | +-------------------------+ 1 row in set (0.02 sec) . Desc Table . mysql&gt; DESC topic; +-------------+--------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +-------------+--------------+------+-----+---------+----------------+ | id | int(11) | NO | PRI | NULL | auto_increment | title | varchar(100) | NO | NULL | | description | text | YES | NULL | | created | datetime | NO | NULL | | author | varchar(30) | YES | NULL | | profile | varchar(100) | YES | NULL | +-------------+--------------+------+-----+---------+----------------+ 6 rows in set (0.01 sec) . CRUD . mysql&gt; INSERT INTO topic (title, description, created, author, profile) VALUES ('MySQL','MySQL is ...', NOW(), 'egoing', 'developer' ) -&gt; ; Query OK, 1 row affected (0.02 sec) mysql&gt; SELECT * FROM topic; +----+-------+--------------+---------------------+--------+-----------+ | id | title | description | created | author | profile | +----+-------+--------------+---------------------+--------+-----------+ | 1 | MySQL | MySQL is ... | 2019-12-16 23:08:25 | egoing | developer | +----+-------+--------------+---------------------+--------+-----------+ 1 row in set (0.00 sec) . mysql&gt; UPDATE topic SET description='Oracle is ...', title = 'Oracle' where id = 2; Query OK, 1 row affected (0.02 sec) Rows matched: 1 Changed: 1 Warnings: 0 . mysql&gt; DELETE FROM topic WHERE id = 5; Query OK, 1 row affected (0.02 sec) . LIMIT . To limit output size, add LIMIT at the end of SQL . mysql&gt; SELECT * from topic; +----+------------+-------------------+---------------------+--------+---------------------------+ | id | title | description | created | author | profile | +----+------------+-------------------+---------------------+--------+---------------------------+ | 1 | MySQL | MySQL is ... | 2019-12-16 23:08:25 | egoing | developer | 2 | ORACLE | ORACLE is ... | 2019-12-16 23:09:47 | egoing | developer | 3 | SQL Server | SQL SERVER is ... | 2019-12-16 23:10:44 | duru | data administrator | 4 | PostgreSQL | POSTgreSQL is ... | 2019-12-16 23:11:31 | taeho | data scientist, developer | 5 | MongoDB | MongoDB is ... | 2019-12-16 23:12:05 | egoing | developer | +----+------------+-------------------+---------------------+--------+---------------------------+ 5 rows in set (0.00 sec) . mysql&gt; SELECT * from topic LIMIT 2; +----+--------+---------------+---------------------+--------+-----------+ | id | title | description | created | author | profile | +----+--------+---------------+---------------------+--------+-----------+ | 1 | MySQL | MySQL is ... | 2019-12-16 23:08:25 | egoing | developer | 2 | ORACLE | ORACLE is ... | 2019-12-16 23:09:47 | egoing | developer | +----+--------+---------------+---------------------+--------+-----------+ 2 rows in set (0.00 sec) . Join . mysql&gt; SELECT * FROM topic LEFT JOIN author ON topic.author_id = author.id; +----+------------+-------------------+---------------------+-----------+------+--------+---------------------------+ | id | title | description | created | author_id | id | name | profile | +----+------------+-------------------+---------------------+-----------+------+--------+---------------------------+ | 1 | MySQL | MySQL is... | 2018-01-01 12:10:11 | 1 | 1 | egoing | developer | 2 | Oracle | Oracle is ... | 2018-01-03 13:01:10 | 1 | 1 | egoing | developer | 3 | SQL Server | SQL Server is ... | 2018-01-20 11:01:10 | 2 | 2 | duru | database administrator | 4 | PostgreSQL | PostgreSQL is ... | 2018-01-23 01:03:03 | 3 | 3 | taeho | data scientist, developer | 5 | MongoDB | MongoDB is ... | 2018-01-30 12:31:03 | 1 | 1 | egoing | developer | +----+------------+-------------------+---------------------+-----------+------+--------+---------------------------+ 5 rows in set (0.00 sec) . MySQL Client . Mostly MySQL WORKBENCH recommended. It is easy to use SQL because it is GUI. https://dev.mysql.com/downloads/file/?id=490464 . ",
    "url": "/docs/database/database-mysqlbasic/",
    
    "relUrl": "/docs/database/database-mysqlbasic/"
  },"56": {
    "doc": "Database",
    "title": "Database",
    "content": "데이터 베이스의 각 제품을 설명하고, 각각의 특징을 정리한다. ",
    "url": "/docs/database",
    
    "relUrl": "/docs/database"
  },"57": {
    "doc": "Devops",
    "title": "Devops",
    "content": "Devops 관련 기술 및 오픈 소스 툴에 대해 다룬다. ",
    "url": "/docs/devops",
    
    "relUrl": "/docs/devops"
  },"58": {
    "doc": "Djanog on AWS EC2",
    "title": "Djanog on AWS EC2",
    "content": " ",
    "url": "/docs/framework/django-aws/",
    
    "relUrl": "/docs/framework/django-aws/"
  },"59": {
    "doc": "Djanog on AWS EC2",
    "title": "Table of contents",
    "content": ". | requirements.txt 파일 생성하기 | AWS EC2 임대하기 | AWS EC2 서버에 원격 접속하기 | AWS EC2 서버 초기 세팅하기 | 프로젝트를 github 에 업로드하기 | EC2 서버에서 프로젝트 가져오기 | . AWS EC2 서버에서의 서비스를 위해 임대부터 설치까지의 과정을 정리하고자 합니다. Django 기준으로 작성하였으며 원격 서버 구축에 놓치기 쉬운 설정들을 나열하였습니다. (https://aws.amazon.com/) . requirements.txt 파일 생성하기 . 서버에서 설치하기 위한 패키지들을 requirements.txt 에 저장하여 서버에서 간단히 설치할 수 있습니다. manage.py 가 있는 폴더에서 아래와 같이 입력합니다. pip freeze &gt;&gt; requirements.txt . 이후 현재 활성화된 가상환경에 설치된 패키지의 목록을 requirements.txt 에 저장할 수 있으며, 아래 명령어로 내용을 확인할 수 있습니다. cat requirements.txt . AWS EC2 임대하기 . | 로그인 후, 상단의 서비스 메뉴를 클릭한 뒤 EC2 를 검색하여 들어갑니다. | 우측 상단의 리전선택에서 서울 을 선택합니다. | 좌측 메뉴의 인스턴스 에 들어가 시작을 눌러줍니다. | 이미지 선택에서 Ubuntu Server 18.04 LTS 를 선택합니다. | 인스턴스 유형에서 프리티어 를 선택하면 되는데, 이는 신규 가입자가 1년간 일정할당량을 무료로 사용할 수 있는 서비스로 연습용으로는 적합합니다. | 인스턴스 시작 을 눌러줍니다. 이후 키 페어 설정 창이 나오는데, 이는 EC2 서버에 원격으로 접속하기 위한 일종의 열쇠라고 이해하시면 되며, 키페어 이름 입력 후 다운로드를 클릭하면 됩니다. | 노란불과 함께 시작하게 되면 다소 시간이 걸리니 기다려 주시면 됩니다. | 다운로드 된 키페어(pem) 를 .ssh 폴더에 옯깁니다. 외부 컴퓨터와 원격 통신시 .ssh 폴더의 키페어를 사용하게 됩니다. 이후 옮겨졌는지 확인합니다. $ mkdir ~/ .ssh/ $ mv ~/Downloads/deploy_test.pem ~/.ssh/ $ ls ~/.ssh/ deploy_test.pem . | 이후 키페어 파일의 권한을 소유주만 읽을 수 있도록 설정을 변경합니다. chmod 명령어를 사용하여 읽기, 쓰기, 실행 권한 등을 변경할 수 있습니다. $chmod 400 ~/.ssh/deploy_test.pem . | . AWS EC2 서버에 원격 접속하기 . 배포 전 프로젝트 파일을 원격 서버에 옮기기 위해서는 EC2 서버에 접속해야 합니다. 접속하기 위해서는 pem 파일이 필요하여 아래와 같이 원격 접속을 할 수 있습니다. 윈도우 환경에서는 git bash 와 같은 cmd 프로그램을 이용하면 수월하게 진행할 수 있습니다. $ ssh -i [키페어경로] [유저이름]@[퍼블릭DNS주소] . 위의 유저이름 과 퍼블릭DNS주소 는 인스턴스 창에서 확인할 수 있습니다. | 만약 접속 시 아래와 같은 에러가 발생하면 위의 chmod 400 을 적용하였는지 확인하시면 됩니다. \"WARNING:UNPROTECTED PRIVATE KEY FILE!\" | . AWS EC2 서버 초기 세팅하기 . | 임대한 원격서버의 기본 패키지들을 설치합니다. 이전으 ㅣ원격으로 접속한 후에 패키지 정보를 업데이트 합ㄴ디ㅏ. $ sudo apt-get update 뭔가를 물어보는 팝업창이 나타나면 Y 를 클릭하시면 됩니다. | 이후 패키지 의존성 검사 및 업그레이드를 진행합니다. ``$ sudo apt-get dist-upgrade` . | 이후 python3 패키지 매니저(pip3) 를 설치합니다. $ sudo apt-get install python3-pip . | . 프로젝트를 github 에 업로드하기 . 원격서버에 프로젝트를 옮기기 위해서는 filezilla 와 같은 다양한 프로그램들이 있지만 형상관리를 수월하게 할 수 있는 github 를 사용하는 것을 권장합니다. | Create a new repository 를 클릭한 수 프로젝트 명을 입력하고 생성합니다. | 로컬에서 프로젝트의 manage.py 아 있는 곳으로 이동하여 .git 폴더을 생성하고 여기에 프로젝트 소스들을 담아 github 에 올리도록 합니다. $ git init # git 을 초기화 함 $ git add . # 현재 폴더 전체를 담는다. $ git remote add origin [레포리토리주소] # 레포지토리주소를 `origin` 이라는 이름으로 추가한다. $ git commit -m \"first commit\" # 변경사항을 모으로 메시지를 입력한다. $ git push origin master # origin 이라는 이름의 레포지토리 주소로 업로드 한다. | . 이후 변경 사항에 대한 업로드 시에는 아래와 같이 진행할 수 있습니다. $ git add . $ git commit -m \"코멘트\" $ git push origin master . EC2 서버에서 프로젝트 가져오기 . github 에 있는 프로젝트를 서버로 옮기기 위해 git clone 명령어를 사용합니다. 먼저 원격 서버에 접속한 후 아래와 같이 진행합니다. | 프로젝트 파일을 담을 /srv/ 폴더의 소유권을 변경합니다. 여기서 ‘ubuntu의 의미는 현재 유저를 가리킵니다. $ sudo chown -R ubuntu:ubuntu /srv/ #소유권 변경 확인 위해 루트 폴더(/) 로 이동한 뒤 아래와 같이 확인합니다. $ cd / $ ls -al . | /srv/ 폴더로 이동하여 github 내 프로젝트를 받아옵니다. $ cd /srv $ git clone [레포지토리주소] # 이후 ls 명령어를 통해 레포지토리 이름과 동일한 폴더가 생성되었다면 성공입니다. $ ls . | . ",
    "url": "/docs/framework/django-aws/#table-of-contents",
    
    "relUrl": "/docs/framework/django-aws/#table-of-contents"
  },"60": {
    "doc": "Djanog on Local",
    "title": "Djanog on Local",
    "content": " ",
    "url": "/docs/framework/django-local/",
    
    "relUrl": "/docs/framework/django-local/"
  },"61": {
    "doc": "Djanog on Local",
    "title": "Table of contents",
    "content": ". | 가상환경 설정 | 주요 오류 및 해결 방법 | . 장고 프로젝트를 로컬에서 실행하기 위한 가상 환경 설정 및 모듈 다운로드, 해결책에 대해 정리하고자 합니다. ",
    "url": "/docs/framework/django-local/#table-of-contents",
    
    "relUrl": "/docs/framework/django-local/#table-of-contents"
  },"62": {
    "doc": "Djanog on Local",
    "title": "가상환경 설정",
    "content": "장고 프로젝트를 실행할 가상환경을 구성한다. Python 을 설치한 후, 가상환경 폴더를 구성하고자 하는 폴도로 이동하여 아래와 같이 수행한다. D:\\1_GitSource\\PANABARA&gt;python -m venv pnbr_env D:\\1_GitSource\\PANABARA&gt;cd pnbr_env D:\\1_GitSource\\PANABARA\\pnbr_env&gt;dir D 드라이브의 볼륨: 새 볼륨 볼륨 일련 번호: 7816-659E D:\\1_GitSource\\PANABARA\\pnbr_env 디렉터리 2021-11-30 오후 11:01 &lt;DIR&gt; . 2021-11-30 오후 11:01 &lt;DIR&gt; .. 2021-11-30 오후 11:01 &lt;DIR&gt; Include 2021-11-30 오후 11:01 &lt;DIR&gt; Lib 2021-11-30 오후 11:01 119 pyvenv.cfg 2021-11-30 오후 11:02 &lt;DIR&gt; Scripts 1개 파일 119 바이트 5개 디렉터리 213,874,466,816 바이트 남음 D:\\1_GitSource\\PANABARA\\pnbr_env&gt;cd Scripts D:\\1_GitSource\\PANABARA\\pnbr_env\\Scripts&gt;activate (pnbr_env) D:\\1_GitSource\\PANABARA\\pnbr_env\\Scripts&gt; . manage.py 가 있는 폴더로 이동한다. (pnbr_env) D:\\1_GitSource\\PANABARA\\pnbr_env\\Scripts&gt;cd D:\\1_GitSource\\PANABARA // requirements 내 모듈 모두 설치하기 (pnbr_env) D:\\1_GitSource\\PANABARA&gt;pip install -r requirements.txt (pnbr_env) D:\\1_GitSource\\PANABARA&gt;python manage.py makemigrations &amp;&amp; python manage.py migrate (pnbr_env) D:\\1_GitSource\\PANABARA&gt;python manage.py runserver Watching for file changes with StatReloader Performing system checks... ===============BSModalForm started ================= ===============BSModalForm started ================= ===============BSModalModelForm started ================= ===============BSModalModelForm started ================= dddddddddddddddddddddddddddddddddddddddddddddddddd dddddddddddddddddddddddddddddddddddddddddddddddddd System check identified no issues (0 silenced). December 01, 2021 - 21:29:17 Django version 2.2.10, using settings 'setup.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CTRL-BREAK. ",
    "url": "/docs/framework/django-local/#%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/framework/django-local/#가상환경-설정"
  },"63": {
    "doc": "Djanog on Local",
    "title": "주요 오류 및 해결 방법",
    "content": "[오류 해결] pip install 설치 시 \"UnicodeDecodeError: 'cp949' codec can't decode byte 0xe2 in position 2082: illegal multibyte sequence\" 에러가 발생하는 경우 . | 해당 오류는 pip 명령어로 패키지를 설치하거나 tar.gz, whl 파일로 패키지를 직접 설치할 때 압축 파일 안에 있는 setup.py 파일을 자동으로 실행하는데 여기에 포함되어 있는 코드 중 txt 파일과 같은 것을 읽을 때 디코딩이 제대로 되지 않아서 발생하는 문제이다. | 또는 특정 패키지가 현재 설치된 Python 버전과 호환되지 않을 수 있으므로, 패키지 버전을 맞추거나 Python 은 다른 버전으로 변경해야 한다. | 위 문제를 해결하기 위해서는 tar.gz 파일을 받은 후 압축을 해제하여 설치하는 방법을 이용해야 한다. 압축을 해제하면 해당 폴더에는 setup.py 파일이 있을 것이다. 여기 위치에서 cmd 또는 shell을 열어서 직접 python setup.py install 명령어를 실행하여 설치해야 한다. | . Numpy 에러 발생 시 . | https://m.blog.naver.com/beacon71/221872094394 | . ",
    "url": "/docs/framework/django-local/#%EC%A3%BC%EC%9A%94-%EC%98%A4%EB%A5%98-%EB%B0%8F-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95",
    
    "relUrl": "/docs/framework/django-local/#주요-오류-및-해결-방법"
  },"64": {
    "doc": "Creating Django",
    "title": "Creating Django",
    "content": " ",
    "url": "/docs/framework/django-project/",
    
    "relUrl": "/docs/framework/django-project/"
  },"65": {
    "doc": "Creating Django",
    "title": "Table of contents",
    "content": ". | Dango 서버 구축 | . ",
    "url": "/docs/framework/django-project/#table-of-contents",
    
    "relUrl": "/docs/framework/django-project/#table-of-contents"
  },"66": {
    "doc": "Creating Django",
    "title": "Dango 서버 구축",
    "content": ". | 폴더를 만든다. mkdir djangotest . | vscode 에서 폴더열기를 한다. | 이후 터미널을 실행한다. | 가상환경을 만든다. python -m venv venv . | f1 을 눌러 SelectorInterpreter 에서 ` Python: Select Interpreter` 를 선택한다. | 생성한 가상환경 내 ../Script/python.exe 를 선택한다. | 해당 파일이 없다면 종료후 다시 실행한다. | . | 터미널을 실행하여 우측상단 + 버튼을 클릭하여 가상환경을 activate 한다. | activate.ps1 파일을 로드할 수 없습니다 오류 시 파워쉘 관리자에서 아래를 실행한다. PS C:\\WINDOWS\\System32&gt; Set-ExecutionPolicy Unrestricted . | . | 장고를 설치한다. | . (venv) PS D:\\5_Django\\djangotest&gt; pip list Package Version ---------- ------- pip 18.1 setuptools 40.6.2 . (venv) PS D:\\5_Django\\djangotest&gt; pip install django . (venv) PS D:\\5_Django\\djangotest\\FirstProject\\firstproject&gt; pip list Package Version ----------------- ------- asgiref 3.4.1 Django 3.2.13 pip 18.1 pytz 2022.1 setuptools 40.6.2 sqlparse 0.4.2 typing-extensions 4.1.1 . | 가상환경의 상위 폴더에 프로젝트를 생성한다. | . (venv) PS D:\\5_Django\\djangotest&gt; mkdir FirstProject (venv) PS D:\\5_Django\\djangotest&gt; django-admin.exe startproject firstproject . | 프로젝트로 이동한 후 동작을 실행하도록 하겠습니다. 먼저 makemigrations 와 migrate를 입력해 프로젝트의 변동사항을 데이터베이스에 적용시킵니다. | . (venv) PS D:\\5_Django\\djangotest\\FirstProject&gt; cd .\\firstproject\\ (venv) PS D:\\5_Django\\djangotest\\FirstProject\\firstproject&gt; python manage.py makemigrations No changes detected (venv) PS D:\\5_Django\\djangotest\\FirstProject\\firstproject&gt; python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, sessions Running migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying auth.0010_alter_group_name_max_length... OK Applying auth.0011_update_proxy_permissions... OK Applying auth.0012_alter_user_first_name_max_length... OK Applying sessions.0001_initial... OK . | python manage.py runserver를 입력해 서버를 실행시킵니다. | . (venv) PS D:\\5_Django\\djangotest\\FirstProject\\firstproject&gt; python manage.py runserver Watching for file changes with StatReloader Performing system checks... System check identified no issues (0 silenced). April 21, 2022 - 23:01:52 Django version 3.2.13, using settings 'firstproject.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CTRL-BREAK. [21/Apr/2022 23:01:54] \"GET / HTTP/1.1\" 200 10697 . | 앱만들기 | . (venv) PS D:\\5_Django\\quiz_backend&gt; python manage.py startapp quiz . ",
    "url": "/docs/framework/django-project/#dango-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95",
    
    "relUrl": "/docs/framework/django-project/#dango-서버-구축"
  },"67": {
    "doc": "Django",
    "title": "Django",
    "content": " ",
    "url": "/docs/framework/django/",
    
    "relUrl": "/docs/framework/django/"
  },"68": {
    "doc": "Docker Architecture",
    "title": "Docker Architecture",
    "content": ". Docker 는 2010 년 docCloud 회사로 설립하였으며, 2013 년에 Docker 회사명 변경하였다. [Docker 구조 ] . | Docker Daemon : dockerd 라는 이름의 데몬프로그램, 컨테이너 내에 설치되며 도커 서버의 역할을 한다. | Docker Client : dockerCLI 이며 명령어를 보내는 작업을 일컫는다. | Registries : 중앙 이미지 저장소, 도커가 운영하는 퍼블릭 레지스트리 (https://hub.docker.com) . | Image : Docker Container 를 생성할 때 필요한 읽기 전용의 템플릿, 파일들의 모음 docker.io/myrepo/centos:1.0 : 각 순서대로 레지스트리, 저장소, 이미지, 태그를 일컫는다. | Container : 격리된 실행 환경, 이미지를 기반으로 실행된 응용프로그램의 프로세스 - 읽기 전용의 image 에 변경된 사항을 컨테이너 계층(Container Layer) 즉, upperdir 에 저장하므로 image 의 변함은 없다. | . ",
    "url": "/docs/buildpackage/docker-arch/",
    
    "relUrl": "/docs/buildpackage/docker-arch/"
  },"69": {
    "doc": "Docker Command",
    "title": "Docker Command",
    "content": " ",
    "url": "/docs/buildpackage/docker-command/",
    
    "relUrl": "/docs/buildpackage/docker-command/"
  },"70": {
    "doc": "Docker Command",
    "title": "Table of contents",
    "content": ". | docker container ps -a | docker image ls -a | docker image inspect | docker image rm | docker login | docker image pull | docker image tag | docker system prune | docker container commit | docker image history | docker container create | docker container start | docker container stop | docker container run | docker container attach | docker container cp | docker container rm | docker container diff | . 도커 컨테이너 실행을 위한 개념과 관련 명령어를 정리한다. ",
    "url": "/docs/buildpackage/docker-command/#table-of-contents",
    
    "relUrl": "/docs/buildpackage/docker-command/#table-of-contents"
  },"71": {
    "doc": "Docker Command",
    "title": "docker container ps -a",
    "content": "컨테이너는 프로세스이므로 ps 로 조회한다. 실시간 상태 조회 : watch -n 1 docker container ps -a . ",
    "url": "/docs/buildpackage/docker-command/#docker-container-ps--a",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-container-ps--a"
  },"72": {
    "doc": "Docker Command",
    "title": "docker image ls -a",
    "content": "이미지는 파일이므로 ls 로 조회한다. root@docker1:~# docker image ls -a REPOSITORY TAG IMAGE ID CREATED SIZE nginx latest 1403e55ab369 2 weeks ago 142MB centos latest 5d0da3dc9764 16 months ago 231MB root@docker1:~# . ",
    "url": "/docs/buildpackage/docker-command/#docker-image-ls--a",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-image-ls--a"
  },"73": {
    "doc": "Docker Command",
    "title": "docker image inspect",
    "content": "이미지의 상세정보를 출력한다. root@docker1:~# docker image inspect centos [ { \"Id\": \"sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6\", \"RepoTags\": [ \"centos:latest\" ], \"RepoDigests\": [ \"centos@sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177\" ], \"Parent\": \"\", \"Comment\": \"\", \"Created\": \"2021-09-15T18:20:05.184694267Z\", \"Container\": \"9bf8a9e2ddff4c0d76a587c40239679f29c863a967f23abf7a5babb6c2121bf1\", \"ContainerConfig\": { \"Hostname\": \"9bf8a9e2ddff\", \"Domainname\": \"\", . ",
    "url": "/docs/buildpackage/docker-command/#docker-image-inspect",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-image-inspect"
  },"74": {
    "doc": "Docker Command",
    "title": "docker image rm",
    "content": "호스트에서 이미지를 삭제한다. root@docker1:~# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE nginx latest 1403e55ab369 2 weeks ago 142MB centos latest 5d0da3dc9764 16 months ago 231MB root@docker1:~# root@docker1:~# root@docker1:~# docker image rm centos Untagged: centos:latest Untagged: centos@sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177 Deleted: sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6 Deleted: sha256:74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59 root@docker1:~# root@docker1:~# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE nginx latest 1403e55ab369 2 weeks ago 142MB root@docker1:~# // 사용하지 않는 이미지 일괄 삭제 root@docker1:~# docker image prune -a WARNING! This will remove all images without at least one container associated to them. Are you sure you want to continue? [y/N] y . ",
    "url": "/docs/buildpackage/docker-command/#docker-image-rm",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-image-rm"
  },"75": {
    "doc": "Docker Command",
    "title": "docker login",
    "content": "도커 레지스트리에 업로드를 하려면 docker login 명령을 통해 로그인해야 한다. // 로그인 root@docker1:~# docker login Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one. Username: testuser Password: WARNING! Your password will be stored unencrypted in /root/.docker/config.json. Configure a credential helper to remove this warning. See https://docs.docker.com/engine/reference/commandline/login/#credentials-store Login Succeeded root@docker1:~# root@docker1:~# cat /root/.docker/config.json { \"auths\": { \"https://index.docker.io/v1/\": { \"auth\": \"ABCDEFJXXXXXXjg1M0Bzag==\" } } }root@docker1:~# root@docker1:~# // 로그 아웃 root@docker1:~# docker logout Removing login credentials for https://index.docker.io/v1/ . ",
    "url": "/docs/buildpackage/docker-command/#docker-login",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-login"
  },"76": {
    "doc": "Docker Command",
    "title": "docker image pull",
    "content": "Docker Hub 등의 Docker Registry 로 부터 Docker 이미지를 다운로드한다. root@docker1:~# docker image pull docker.io/library/busybox:latest latest: Pulling from library/busybox 205dae5015e7: Pull complete Digest: sha256:7b3ccabffc97de872a30dfd234fd972a66d247c8cfc69b0550f276481852627c Status: Downloaded newer image for busybox:latest docker.io/library/busybox:latest . ",
    "url": "/docs/buildpackage/docker-command/#docker-image-pull",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-image-pull"
  },"77": {
    "doc": "Docker Command",
    "title": "docker image tag",
    "content": "이미지를 구분하기 위한 tag 를 새롭게 붙일 때 사용한다. root@docker1:~# docker image ls -a REPOSITORY TAG IMAGE ID CREATED SIZE busybox latest 66ba00ad3de8 5 days ago 4.87MB nginx latest 1403e55ab369 2 weeks ago 142MB root@docker1:~# // busybox 다운로드 root@docker1:~# docker image pull busybox Using default tag: latest latest: Pulling from library/busybox Digest: sha256:7b3ccabffc97de872a30dfd234fd972a66d247c8cfc69b0550f276481852627c Status: Image is up to date for busybox:latest docker.io/library/busybox:latest root@docker1:~# // testuser/box 의 1.0 으로 생성 root@docker1:~# docker image tag busybox testuser/box:1.0 root@docker1:~# // nginx 다운로드 root@docker1:~# docker image pull nginx Using default tag: latest latest: Pulling from library/nginx Digest: sha256:0047b729188a15da49380d9506d65959cce6d40291ccfb4e039f5dc7efd33286 Status: Image is up to date for nginx:latest docker.io/library/nginx:latest root@docker1:~# // testuser/web-server 1.0 태그로 생성 root@docker1:~# docker image tag nginx testuser/web-server:1.0 root@docker1:~# // 생성됐는지 조회 // 원래 이미지와 생성한 이미지의 IMAGE ID 가 동일하다. root@docker1:~# docker image ls -a REPOSITORY TAG IMAGE ID CREATED SIZE testuser/box 1.0 66ba00ad3de8 5 days ago 4.87MB busybox latest 66ba00ad3de8 5 days ago 4.87MB nginx latest 1403e55ab369 2 weeks ago 142MB testuser/web-server 1.0 1403e55ab369 2 weeks ago 142MB root@docker1:~# . Docker 레지스트리로부터 pull 할 때는 로그인이 필요없으나 push 할 때는 로그인이 필요하다. root@docker1:~# docker image push testuser/web-server:1.0 The push refers to repository [docker.io/testuser/web-server] c72d75f45e5b: Mounted from library/nginx 9a0ef04f57f5: Mounted from library/nginx d13aea24d2cb: Mounted from library/nginx 2b3eec357807: Mounted from library/nginx 2dadbc36c170: Mounted from library/nginx 8a70d251b653: Mounted from library/nginx 1.0: digest: sha256:9a821cadb1b13cb782ec66445325045b2213459008a41c72d8d87cde94b33c8c size: 1570 root@docker1:~# . 도커 이미지가 아래와 같이 PUSH 된 것을 확인할 수 있다. 호스트에서 지운 후 Pull 하면 이미지가 다운로드 된 것을 확인할 수 있다. root@docker1:~# docker image rm testuser/web-server:1.0 Untagged: testuser/web-server:1.0 Untagged: testuser/web-server@sha256:9a821cadb1b13cb782ec66445325045b2213459008a41c72d8d87cde94b33c8c root@docker1:~# root@docker1:~# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE testuser/box 1.0 66ba00ad3de8 5 days ago 4.87MB busybox latest 66ba00ad3de8 5 days ago 4.87MB nginx latest 1403e55ab369 2 weeks ago 142MB root@docker1:~# root@docker1:~# docker image pull testuser/web-server:1.0 1.0: Pulling from testuser/web-server Digest: sha256:9a821cadb1b13cb782ec66445325045b2213459008a41c72d8d87cde94b33c8c Status: Downloaded newer image for testuser/web-server:1.0 docker.io/testuser/web-server:1.0 root@docker1:~# root@docker1:~# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE testuser/box 1.0 66ba00ad3de8 5 days ago 4.87MB busybox latest 66ba00ad3de8 5 days ago 4.87MB testuser/web-server 1.0 1403e55ab369 2 weeks ago 142MB nginx latest 1403e55ab369 2 weeks ago 142MB root@docker1:~# . ",
    "url": "/docs/buildpackage/docker-command/#docker-image-tag",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-image-tag"
  },"78": {
    "doc": "Docker Command",
    "title": "docker system prune",
    "content": "더 이상 사용하지 않는 이미지/컨테이너/네트워크를 일괄 삭제한다. ",
    "url": "/docs/buildpackage/docker-command/#docker-system-prune",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-system-prune"
  },"79": {
    "doc": "Docker Command",
    "title": "docker container commit",
    "content": "이미지 생성에는 두가지 방법이 있다. | docker container commit 와 같이 컨테이너 상태를 기반으로 이미지를 생성하는 방법 | Dockerfile 을 빌드(Build) 해서 생성하는 방법이 있다. 후자가 많이 쓰이는 방법이다. | . [도커 이미지 생성의 2가지 방법 ] . // ubuntu 를 sample 컨테이너로 만든다. root@docker1:~# docker run -it --name sample ubuntu Unable to find image 'ubuntu:latest' locally latest: Pulling from library/ubuntu 6e3729cf69e0: Pull complete Digest: sha256:27cb6e6ccef575a4698b66f5de06c7ecd61589132d5a91d098f7f3f9285415a9 Status: Downloaded newer image for ubuntu:latest root@8a80c4cde61e:/# apt-get update Get:1 http://security.ubuntu.com/ubuntu jammy-security InRelease [110 kB] ... Get:18 http://archive.ubuntu.com/ubuntu jammy-backports/main amd64 Packages [3520 B] Fetched 25.1 MB in 1min 38s (257 kB/s) Reading package lists... Done root@8a80c4cde61e:/# // 컨테이너에서 nginx 를 설치한다. root@8a80c4cde61e:/# apt-get install -y nginx Reading package lists... Done Building dependency tree... Done Reading state information... Done The following additional packages will be installed: fontconfig-config fonts-dejavu-core iproute2 libatm1 libbpf0 libbrotli1 libbsd0 libcap2-bin libdeflate0 libelf1 libexpat1 libfontconfig1 libfreetype6 libgd3 libicu70 libjbig0 libjpeg-turbo8 libjpeg8 libmaxminddb0 libmd0 libmnl0 libnginx-mod-http-geoip2 libnginx-mod-http-image-filter libnginx-mod-http-xslt-filter libnginx-mod-mail libnginx-mod-stream libnginx-mod-stream-geoip2 libpam-cap libpng16-16 libtiff5 libwebp7 libx11-6 libx11-data libxau6 libxcb1 libxdmcp6 libxml2 libxpm4 libxslt1.1 libxtables12 nginx-common nginx-core ucf Suggested packages: Setting up nginx (1.18.0-6ubuntu14.3) ... Processing triggers for libc-bin (2.35-0ubuntu3.1) ... root@8a80c4cde61e:/# CTRL+PQ // detach 모드로 전환 root@docker1:~# root@docker1:~# echo Hello world &gt; index.html root@docker1:~# docker container cp index.html sample:/var/www/html/index.html // index.html 수정 후 sample 컨테이너를 testuser/web-nginx:1.0 이미지 생성 root@docker1:~# docker container commit -a \"TESTUSER\" -m \"Customized image\" sample testuser/web-nginx:1.0 sha256:6f10cf278ad2f4ba4017850c0ced7b77230671e613773bc46dd7822cbcccaba1 root@docker1:~# // testuser/web-nginx 1.0 이미지 생성 확인 root@docker1:~# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE testuser/web-nginx 1.0 6f10cf278ad2 8 seconds ago 174MB busybox latest 66ba00ad3de8 5 days ago 4.87MB testuser/box 1.0 66ba00ad3de8 5 days ago 4.87MB testuser/web-server 1.0 1403e55ab369 2 weeks ago 142MB nginx latest 1403e55ab369 2 weeks ago 142MB ubuntu latest 6b7dfa7e8fdb 4 weeks ago 77.8MB root@docker1:~# // 이미지 상세 확인 (Comment, Author) root@docker1:~# docker image inspect testuser/web-nginx:1.0 [ { \"Id\": \"sha256:6f10cf278ad2f4ba4017850c0ced7b77230671e613773bc46dd7822cbcccaba1\", \"RepoTags\": [ \"testuser/web-nginx:1.0\" \"Comment\": \"Customized image\", \"Created\": \"2023-01-09T14:06:44.617231726Z\", \"DockerVersion\": \"20.10.22\", \"Author\": \"TESTUSER\", . | [##_Image | kage@da6tcx/btsjkiihTDb/zgfvyFqTXkcOQVUDunVck0/img.png | CDM | 1.3 | {“originWidth”:881,”originHeight”:130,”style”:”alignCenter”,”caption”:”도커 이미지 Push 상태 확인”,”filename”:”edited_blob”}_##] | . // 도커이미지에서 testuser/web-nginx:1.0 를 가져와 컨테이너를 생성한다. root@docker1:~# docker container run -d --name web -p 8080:80 testuser/web-nginx:1.0 nginx -g 'daemon off; ' Unable to find image 'testuser/web-nginx:1.0' locally 1.0: Pulling from testuser/web-nginx 6e3729cf69e0: Already exists 7c9aaa2fac99: Pull complete Digest: sha256:4150994823e51b64caa7b5ccdbb543703e776d519596562b02a9a127ffe770c0 Status: Downloaded newer image for testuser/web-nginx:1.0 dd4e6613c4cf4ada677b19c67cfb2656d2849d72410850a80a0d6c76cc4f35bb // 가져온 이미지가 있다!! root@docker1:~# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE testuser/web-nginx 1.0 6f10cf278ad2 23 minutes ago 174MB testuser/box 1.0 66ba00ad3de8 5 days ago 4.87MB busybox latest 66ba00ad3de8 5 days ago 4.87MB testuser/web-server 1.0 1403e55ab369 2 weeks ago 142MB nginx latest 1403e55ab369 2 weeks ago 142MB ubuntu latest 6b7dfa7e8fdb 4 weeks ago 77.8MB . web 이란 이름의 컨테이너 생성확인 . Every 1.0s: docker container ps -a docker1: Mon Jan 9 14:23:23 2023 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES dd4e6613c4cf testuser/web-nginx:1.0 \"nginx -g 'daemon of…\" 36 seconds ago Up 35 seconds 0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp web 8a80c4cde61e ubuntu \"bash\" 20 minutes ago Up 20 minutes sample . localhost:8080 접속 확인 . | [##_Image | kage@bzUgM6/btsjkFYTbkU/8AzXGVzjQqZ50V21OfSdKK/img.png | CDM | 1.3 | {“originWidth”:675,”originHeight”:181,”style”:”alignLeft”}_##] | . ",
    "url": "/docs/buildpackage/docker-command/#docker-container-commit",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-container-commit"
  },"80": {
    "doc": "Docker Command",
    "title": "docker image history",
    "content": "이미지를 생성할 때 어떤 명령이 실행됐는지 확인 . root@docker1:~/labfile/dockerfile_dir# docker image history file00 IMAGE CREATED CREATED BY SIZE COMMENT 5a0fa506014b 24 minutes ago /bin/sh -c #(nop) COPY file:d1f4434c224263e4… 182B b19bf7d0d6c5 24 minutes ago /bin/sh -c #(nop) ADD file:93679052316aa8731… 60B 48bbcf3a8eb9 24 minutes ago /bin/sh -c #(nop) ADD 622787ee69d99fd65381b7… 210kB f5909d2eaad6 24 minutes ago /bin/sh -c #(nop) COPY file:c849731474b116b7… 163kB a9ad95733e3c 24 minutes ago /bin/sh -c #(nop) ADD file:c849731474b116b74… 163kB 6b7dfa7e8fdb 4 weeks ago /bin/sh -c #(nop) CMD [\"bash\"] 0B &lt;missing&gt; 4 weeks ago /bin/sh -c #(nop) ADD file:481dd2da6de715252… 77.8MB root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# docker image history file00 --no-trunc IMAGE CREATED CREATE D BY SIZE COMMENT sha256:5a0fa506014b34bacab3717be24c1351aff9ecab9e2368d9d1e3e7b7347ded77 24 minutes ago /bin/s h -c #(nop) COPY file:d1f4434c224263e494ca1d96889c7976f80fd60648af4bdcd9e8dcae32cbc46c in /test_d ir/ 182B sha256:b19bf7d0d6c5ff52dc1086f5f58e9390bbe72c1c6f2e77d208bfd40321ddcebd 24 minutes ago /bin/s h -c #(nop) ADD file:93679052316aa8731d3a54bb37cece254064b24078712f99a20746f969b526cb in /test_di r/ 60B sha256:48bbcf3a8eb99f0536f15ff731e412ae7aec8c94d4f411a81403cc3d0844f3b5 24 minutes ago /bin/s h -c #(nop) ADD 622787ee69d99fd65381b70cc87bbe47bdbe82213236bc5e33db771e6fa11228 in /test_dir/ 210kB sha256:f5909d2eaad6bf5abf0693a7b00a034c091ae7120b58f0cce23f35faafdd560d 24 minutes ago /bin/s h -c #(nop) COPY file:c849731474b116b7485f4172a68fe1206ec51f0a405cfbf72a11d4eb3fb81fc6 in /test_d ir/copy.html 163kB sha256:a9ad95733e3c3243ea1cc62669a88fb9e48defc9012039c385f49e503c84ad82 24 minutes ago /bin/s h -c #(nop) ADD file:c849731474b116b7485f4172a68fe1206ec51f0a405cfbf72a11d4eb3fb81fc6 in /test_di r/add.html 163kB sha256:6b7dfa7e8fdbe18ad425dd965a1049d984f31cf0ad57fa6d5377cca355e65f03 4 weeks ago /bin/s h -c #(nop) CMD [\"bash\"] 0B &lt;missing&gt; 4 weeks ago /bin/s h -c #(nop) ADD file:481dd2da6de71525248eba186feeeafcc73cc956ade0a196a4e8b0c2424e74b9 in / 77.8MB . --no-trunc : 전체 문자열 넣기 . ",
    "url": "/docs/buildpackage/docker-command/#docker-image-history",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-image-history"
  },"81": {
    "doc": "Docker Command",
    "title": "docker container create",
    "content": "컨테이너를 생성하고 자동으로 시작하지는 않는다. root@docker1:~# docker container ps -a &lt;-- 컨테이너는 프로세스이므로 ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES root@docker1:~# docker image ls -a &lt;-- 이미지는 파일이므로 ls REPOSITORY TAG IMAGE ID CREATED SIZE root@docker1:~# root@docker1:~# docker container create -it --name testos centos unknown flag: --names See 'docker container create --help'. root@docker1:~# docker container create -it --name testos centos Unable to find image 'centos:latest' locally latest: Pulling from library/centos a1d0c7532777: Pull complete Digest: sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177 Status: Downloaded newer image for centos:latest d2acdab7c45dc1cc2d273839f607bb2b24dfca153714360eb532a0237c56d093 root@docker1:~# root@docker1:~# docker container ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES d2acdab7c45d centos \"/bin/bash\" 6 seconds ago Created testos root@docker1:~# docker image ls -a REPOSITORY TAG IMAGE ID CREATED SIZE centos latest 5d0da3dc9764 15 months ago 231MB root@docker1:~# . docker container create -it --name testos centos 옵션 -i : interactive 의미로 표준 입출력을 받을 수 있도록 한다. 컨테이너 내에 shell 같은 기능이 있을 경우 사용한다. 옵션 -t : tty 의미로 컨테이너의 가상 터미널을 의미한다. --name testos : testos 라는 이름의 컨테이너명을 지정한다. centos : 로컬 레포지토리에 이미지가 없으면, 기본은 docker image 에서 이미지를 pull 한다. 한 번 pull 한 이미지는 재사용이 가능하다. ",
    "url": "/docs/buildpackage/docker-command/#docker-container-create",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-container-create"
  },"82": {
    "doc": "Docker Command",
    "title": "docker container start",
    "content": "컨테이너를 시작한다. root@docker1:~# docker container start -ai testos &lt;-- 기존 생성했던 컨테이너 [root@d2acdab7c45d /]# ps -e &lt;-- 컨테이너 내부로 들어옴. PID TTY TIME CMD 1 pts/0 00:00:00 bash 14 pts/0 00:00:00 ps [root@d2acdab7c45d /]# &lt;-- ctrl+P+Q 단축키로 detach 모드로 전환(컨테이너 살아있음, exit 명령을 사용하면 bin/bash 종료되면서 컨테이너도 함께 종료된다. [root@d2acdab7c45d /]# root@docker1:~# root@docker1:~# root@docker1:~# docker container ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES d2acdab7c45d centos \"/bin/bash\" 14 minutes ago Up About a minute testos root@docker1:~# . 옵션 -a : attach 의 의미로 해당 컨테이너 내부로 접근하는 것을 의미한다 . ",
    "url": "/docs/buildpackage/docker-command/#docker-container-start",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-container-start"
  },"83": {
    "doc": "Docker Command",
    "title": "docker container stop",
    "content": "컨테이너를 종료한다. root@docker1:~# docker container stop testos testos root@docker1:~# docker container ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES d2acdab7c45d centos \"/bin/bash\" 18 minutes ago Exited (0) 3 seconds ago testos root@docker1:~# . ",
    "url": "/docs/buildpackage/docker-command/#docker-container-stop",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-container-stop"
  },"84": {
    "doc": "Docker Command",
    "title": "docker container run",
    "content": "컨테이너를 시작하고(없으면 생성), COMMAND(PID=1 프로세스, 도커 엔진에 의해서 격리될 프로세스) 를 실행한다. root@docker1:~# docker container run -it --name testos centos [root@2b87afc91519 /]# ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 0 06:39 pts/0 00:00:00 /bin/bash root 17 1 0 06:40 pts/0 00:00:00 ps -ef [root@2b87afc91519 /]# hostname 2b87afc91519 . Detach 모드로 전환 후 생성한 컨테이너 조회한다. [root@2b87afc91519 /]# root@docker1:~# root@docker1:~# docker container ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2b87afc91519 centos \"/bin/bash\" 4 minutes ago Up 4 minutes testos root@docker1:~# . 컨테이너를 생성 이후 시작할 때 COMMAND 를 임의로 정의할 수 있다. root@docker1:~# docker container run -it --name testos1 centos /bin/date Sun Jan 8 06:46:12 UTC 2023 root@docker1:~# root@docker1:~# docker container ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES cfd15085385b centos \"/bin/date\" 38 seconds ago Exited (0) 37 seconds ago testos1 2b87afc91519 centos \"/bin/bash\" 7 minutes ago Up 7 minutes testos root@docker1:~# . 여기서 /bin/date 는 시작 후 바로 종료되는 프로세스이므로 해당 컨테이너는 종료된다. 다른 예로서 AI 계산에 이용되는 컨테이너가 될 수 있다. -d (--detach) : 컨테이너 PID 1 번 프로세스를 백그라운드로 실행하기 위해서는 -d 옵션을 사용한다. root@docker1:~# docker container run -d --name testos2 centos /bin/ping localhost 49301e70f50e8a954ec3974a5cfbd5fecee85ded760b38abbfeff385681acfdf root@docker1:~# root@docker1:~# docker container logs testos2 &lt;-- 로그 파일이 아닌 1번의 출력 내용 PING localhost (127.0.0.1) 56(84) bytes of data. 64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.072 ms 64 bytes from localhost (127.0.0.1): icmp_seq=2 ttl=64 time=0.054 ms 64 bytes from localhost (127.0.0.1): icmp_seq=3 ttl=64 time=0.051 ms 64 bytes from localhost (127.0.0.1): icmp_seq=4 ttl=64 time=0.064 ms 64 bytes from localhost (127.0.0.1): icmp_seq=5 ttl=64 time=0.102 ms 64 bytes from localhost (127.0.0.1): icmp_seq=6 ttl=64 time=0.053 ms root@docker1:~# root@docker1:~# docker container exec -it testos2 /bin/bash &lt;-- exec: 1번 프로세스 외의 추가 프로그램 실행 [root@49301e70f50e /]# ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 0 06:58 ? 00:00:00 /bin/ping localhost root 6 0 0 06:59 pts/0 00:00:00 /bin/bash root 19 6 0 06:59 pts/0 00:00:00 ps -ef [root@49301e70f50e /]# [root@49301e70f50e /]# read escape sequence root@docker1:~# docker container ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 49301e70f50e centos \"/bin/ping localhost\" About a minute ago Up About a minute testos2 cfd15085385b centos \"/bin/date\" 13 minutes ago Exited (0) 13 minutes ago testos1 2b87afc91519 centos \"/bin/bash\" 20 minutes ago Up 20 minutes testos . ",
    "url": "/docs/buildpackage/docker-command/#docker-container-run",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-container-run"
  },"85": {
    "doc": "Docker Command",
    "title": "docker container attach",
    "content": "컨테이너 내부에 접근하여 PID 1 번 프로세스에 접근한다. root@docker1:~# docker container run -it --name testos3 centos [root@f1817a32d216 /]# root@docker1:~# &lt;-- detach 모드로 변경 root@docker1:~# docker container ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES f1817a32d216 centos \"/bin/bash\" 17 seconds ago Up 16 seconds testos3 49301e70f50e centos \"/bin/ping localhost\" 7 minutes ago Up 7 minutes testos2 cfd15085385b centos \"/bin/date\" 19 minutes ago Exited (0) 19 minutes ago testos1 2b87afc91519 centos \"/bin/bash\" 26 minutes ago Up 26 minutes testos root@docker1:~# root@docker1:~# docker container attach testos3 &lt;-- testos3 의 컨테이너로 접근 [root@f1817a32d216 /]# ps -e PID TTY TIME CMD 1 pts/0 00:00:00 bash 14 pts/0 00:00:00 ps [root@f1817a32d216 /]# . ",
    "url": "/docs/buildpackage/docker-command/#docker-container-attach",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-container-attach"
  },"86": {
    "doc": "Docker Command",
    "title": "docker container cp",
    "content": "컨테이너와 호스트 간의 파일을 복사할 수 있따. root@docker1:~# docker container run -itd --name=testos5 centos 8133bc90c42bb60337c4c43bacac0dc081c3994710b2973d45b5fbd81283103f root@docker1:~# root@docker1:~# docker container ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 8133bc90c42b centos \"/bin/bash\" 8 seconds ago Up 7 seconds testos5 76cd9ce3f900 centos \"/bin/bash\" 2 minutes ago Exited (0) 2 minutes ago testos4 f1817a32d216 centos \"/bin/bash\" 5 minutes ago Up 5 minutes testos3 49301e70f50e centos \"/bin/ping localhost\" 12 minutes ago Up 12 minutes testos2 cfd15085385b centos \"/bin/date\" 24 minutes ago Exited (0) 24 minutes ago testos1 2b87afc91519 centos \"/bin/bash\" 31 minutes ago Up 31 minutes testos root@docker1:~# root@docker1:~# echo \"hello world..\" &gt; hostfile &lt;-- 호스트에서 파일 생성 root@docker1:~# root@docker1:~# docker container cp hostfile testos5:/containerfile &lt;-- 호스트에서 컨테이너로 복사 root@docker1:~# root@docker1:~# docker container exec testos5 ls -l /containerfile &lt;-- 컨테이너에 접근 및 파일 조회 -rw-r--r-- 1 root root 14 Jan 8 07:11 /containerfile root@docker1:~# root@docker1:~# root@docker1:~# ls -l containerfile ls: cannot access 'containerfile': No such file or directory root@docker1:~# root@docker1:~# docker container cp testos5:/containerfile containerfile &lt;-- 컨테이너에서 호스트로 파일 복사 root@docker1:~# ls -l containerfile &lt;-- 호스트에 파일 조회 -rw-r--r-- 1 root root 14 Jan 8 07:11 containerfile . ",
    "url": "/docs/buildpackage/docker-command/#docker-container-cp",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-container-cp"
  },"87": {
    "doc": "Docker Command",
    "title": "docker container rm",
    "content": "컨테이너 삭제할 수 있으며 강제 삭제의 경우에는 -f 옵션을 추가한다. root@docker1:~# docker container ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 8133bc90c42b centos \"/bin/bash\" 7 minutes ago Up 7 minutes testos5 76cd9ce3f900 centos \"/bin/bash\" 10 minutes ago Exited (0) 10 minutes ago testos4 f1817a32d216 centos \"/bin/bash\" 12 minutes ago Up 12 minutes testos3 49301e70f50e centos \"/bin/ping localhost\" 20 minutes ago Up 20 minutes testos2 cfd15085385b centos \"/bin/date\" 32 minutes ago Exited (0) 32 minutes ago testos1 2b87afc91519 centos \"/bin/bash\" 39 minutes ago Up 39 minutes testos root@docker1:~# root@docker1:~# docker container rm testos5 &lt;-- 삭제 Error response from daemon: You cannot remove a running container 8133bc90c42bb60337c4c43bacac0dc081c3994710b2973d45b5fbd81283103f. Stop the container before attempting removal or force remove root@docker1:~# root@docker1:~# docker container rm -f testos5 &lt;-- 강제 삭제 testos5 root@docker1:~# docker container ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 76cd9ce3f900 centos \"/bin/bash\" 10 minutes ago Exited (0) 10 minutes ago testos4 f1817a32d216 centos \"/bin/bash\" 13 minutes ago Up 13 minutes testos3 49301e70f50e centos \"/bin/ping localhost\" 21 minutes ago Up 21 minutes testos2 cfd15085385b centos \"/bin/date\" 33 minutes ago Exited (0) 33 minutes ago testos1 2b87afc91519 centos \"/bin/bash\" 39 minutes ago Up 39 minutes testos root@docker1:~# . | 컨테이너 상태 실시간 조회 | . watch -n 1 docker container ps -a Every 1.0s: docker container ps -a docker1: Sun Jan 8 07:31:20 2023 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 76cd9ce3f900 centos \"/bin/bash\" 22 minutes ago Exited (0) 8 minutes ago testos4 f1817a32d216 centos \"/bin/bash\" 25 minutes ago Up 25 minutes testos3 49301e70f50e centos \"/bin/ping localhost\" 33 minutes ago Up 33 minutes testos2 cfd15085385b centos \"/bin/date\" 45 minutes ago Exited (0) 45 minutes ago testos1 2b87afc91519 centos \"/bin/bash\" 51 minutes ago Up 51 minutes . | 이미 종료된 컨테이너들을 일괄 삭제 | . root@docker1:~# docker container prune WARNING! This will remove all stopped containers. Are you sure you want to continue? [y/N] y Deleted Containers: 76cd9ce3f9004b782084e9f0d54521e6db482f38a2d4d5dcde558a3bac19c789 cfd15085385b656c48a35c4f634984524bf98b406ff6f33d10a33b3d5b852f41 Total reclaimed space: 0B root@docker1:~# root@docker1:~# . # docker container rm -f $(docker container ps -aq) : up, exited 모든 컨테이너를 일괄삭제 . ",
    "url": "/docs/buildpackage/docker-command/#docker-container-rm",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-container-rm"
  },"88": {
    "doc": "Docker Command",
    "title": "docker container diff",
    "content": "컨테이너 생성 시점부터 변경된 이력(파일 또는 디렉토리) 을 확인한다. root@docker1:~# docker container ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 76cd9ce3f900 centos \"/bin/bash\" 14 minutes ago Exited (0) 3 seconds ago testos4 f1817a32d216 centos \"/bin/bash\" 17 minutes ago Up 17 minutes testos3 49301e70f50e centos \"/bin/ping localhost\" 24 minutes ago Up 24 minutes testos2 cfd15085385b centos \"/bin/date\" 36 minutes ago Exited (0) 36 minutes ago testos1 2b87afc91519 centos \"/bin/bash\" 43 minutes ago Up 43 minutes testos root@docker1:~# docker container attach testos3 &lt;-- testos3 에 접근 [root@f1817a32d216 /]# [root@f1817a32d216 /]# useradd containeruser &lt;-- user 추가 [root@f1817a32d216 /]# read escape sequence root@docker1:~# docker container diff testos3 &lt;-- 이력 조회 C /var C /var/log C /var/log/lastlog C /var/spool C /var/spool/mail A /var/spool/mail/containeruser C /home A /home/containeruser A /home/containeruser/.bashrc A /home/containeruser/.bash_logout A /home/containeruser/.bash_profile C /etc C /etc/group C /etc/gshadow- C /etc/passwd C /etc/shadow C /etc/passwd- C /etc/group- A /etc/subgid- C /etc/subgid C /etc/subuid C /etc/shadow- A /etc/subuid- C /etc/gshadow root@docker1:~# . C : Change, A : Add, D : Delete . ",
    "url": "/docs/buildpackage/docker-command/#docker-container-diff",
    
    "relUrl": "/docs/buildpackage/docker-command/#docker-container-diff"
  },"89": {
    "doc": "Container 기반 기술",
    "title": "Container 기반 기술",
    "content": " ",
    "url": "/docs/buildpackage/docker-container-tech/",
    
    "relUrl": "/docs/buildpackage/docker-container-tech/"
  },"90": {
    "doc": "Container 기반 기술",
    "title": "Table of contents",
    "content": ". | chroot . | chroot 프로그램 확인 및 신규 root 생성 | chroot 적용 확인 | . | namespace . | PID NameSpace | UTS NameSpace | NET NameSpace | . | cGroups (Control Groups) . | 사전 환경 구성 | . | OverlayFS (in Union File System) . | 테스트 데이터 생성 | 파일시스템 Overlay 마운트하기 | . | . 컨테이너 기반 기술 종류가 각각의 의미를 살펴보기로 한다. ",
    "url": "/docs/buildpackage/docker-container-tech/#table-of-contents",
    
    "relUrl": "/docs/buildpackage/docker-container-tech/#table-of-contents"
  },"91": {
    "doc": "Container 기반 기술",
    "title": "chroot",
    "content": "호스트 시스템과는 별도의 실행환경으로서, 루트 디렉토리 격리 기술 로 이해할 수 있으며 시스템 콜을 사용하여 프로세스가 바라보는 특정 디렉토리 루트(/) 디렉토리로 변경한다. 디렉토리를 격리하는 기술이다. chroot 프로그램 확인 및 신규 root 생성 . root@docker1:~# pwd /root root@docker1:~# chroot --version chroot (GNU coreutils) 8.28 Copyright (C) 2017 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. root@docker1:~# mkdir -p /root/newroot/{bin,lib,lib64} root@docker1:~# root@docker1:~# apt install tree Reading package lists... Done Building dependency tree Reading state information... Done The following NEW packages will be installed: tree 0 upgraded, 1 newly installed, 0 to remove and 216 not upgraded. Need to get 40.7 kB of archives. After this operation, 105 kB of additional disk space will be used. Get:1 http://kr.archive.ubuntu.com/ubuntu bionic/universe amd64 tree amd64 1.7.0-5 [40.7 kB] Fetched 40.7 kB in 1s (30.6 kB/s) Selecting previously unselected package tree. (Reading database ... 169510 files and directories currently installed.) Preparing to unpack .../tree_1.7.0-5_amd64.deb ... Unpacking tree (1.7.0-5) ... Setting up tree (1.7.0-5) ... Processing triggers for man-db (2.8.3-2ubuntu0.1) ... root@docker1:~# tree . ├── labfilre.tgz └── newroot ├── bin ├── lib └── lib64 4 directories, 1 file . 루트의 bash 파일을 생성한 newroot 내에 복사한다. root@docker1:~# ls -l /bin/bash -rwxr-xr-x 1 root root 1113504 Jun 6 2019 /bin/bash root@docker1:~# cp /bin/bash /root/newroot/bin/bash root@docker1:~# cp /bin/ls /root/newroot/bin/ls . bash 가 참조하는 라이브러리를 새로 생성한 폴더에 복사한다. ldd : 프로그램이 참조하는 라이브러리를 확인할 수 있는 명령어 . root@docker1:~# pwd /root root@docker1:~# ldd /bin/bash linux-vdso.so.1 (0x00007fffdd59d000) libtinfo.so.5 =&gt; /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007fbb244dd000) libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fbb242d9000) libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fbb23ee8000) /lib64/ld-linux-x86-64.so.2 (0x00007fbb24a21000) root@docker1:~# root@docker1:~# mkdir /root/newroot/lib/x86_64-linux-gnu root@docker1:~# root@docker1:~# cp /lib/x86_64-linux-gnu/libtinfo.so.5 /root/newroot/lib/x86_64-linux-gnu/libtinfo.so.5 root@docker1:~# cp /lib/x86_64-linux-gnu/libdl.so.2 /root/newroot/lib/x86_64-linux-gnu/libdl.so.2 root@docker1:~# cp /lib/x86_64-linux-gnu/libc.so.6 /root/newroot/lib/x86_64-linux-gnu/libc.so.6 root@docker1:~# cp /lib64/ld-linux-x86-64.so.2 /root/newroot/lib64/ld-linux-x86-64.so.2 root@docker1:~# root@docker1:~# root@docker1:~# root@docker1:~# ldd /bin/ls linux-vdso.so.1 (0x00007ffcf237b000) libselinux.so.1 =&gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007fb97f26f000) libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fb97ee7e000) libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007fb97ec0c000) libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fb97ea08000) /lib64/ld-linux-x86-64.so.2 (0x00007fb97f6b9000) libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fb97e7e9000) root@docker1:~# root@docker1:~# cp /lib/x86_64-linux-gnu/libselinux.so.1 /root/newroot/lib/x86_64-linux-gnu/libselinux.so.1 root@docker1:~# cp /lib/x86_64-linux-gnu/libc.so.6 /root/newroot/lib/x86_64-linux-gnu/libc.so.6 root@docker1:~# cp /lib/x86_64-linux-gnu/libpcre.so.3 /root/newroot/lib/x86_64-linux-gnu/libpcre.so.3 root@docker1:~# cp /lib/x86_64-linux-gnu/libdl.so.2 /root/newroot/lib/x86_64-linux-gnu/libdl.so.2 root@docker1:~# cp /lib64/ld-linux-x86-64.so.2 /root/newroot/lib64/ld-linux-x86-64.so.2 root@docker1:~# cp /lib/x86_64-linux-gnu/libpthread.so.0 /root/newroot/lib/x86_64-linux-gnu/libpthread.so.0 root@docker1:~# root@docker1:~# root@docker1:~# tree . ├── labfilre.tgz └── newroot ├── bin │ ├── bash │ └── ls ├── lib │ └── x86_64-linux-gnu │ ├── libc.so.6 │ ├── libdl.so.2 │ ├── libpcre.so.3 │ ├── libpthread.so.0 │ ├── libselinux.so.1 │ └── libtinfo.so.5 └── lib64 └── ld-linux-x86-64.so.2 5 directories, 10 files . chroot 적용 확인 . chroot 명령어로 루트가 변경되는지 확인할 수 있다. root@docker1:~# chroot /root/newroot/ /bin/bash bash-4.4# pwd / bash-4.4# bash-4.4# ls bin lib lib64 bash-4.4# bash-4.4# date bash: date: command not found bash-4.4# bash-4.4# exit exit root@docker1:~# . ",
    "url": "/docs/buildpackage/docker-container-tech/#chroot",
    
    "relUrl": "/docs/buildpackage/docker-container-tech/#chroot"
  },"92": {
    "doc": "Container 기반 기술",
    "title": "namespace",
    "content": "특정 프로세스(컨테이너)에 대해 시스템 리소스(운영체제 커널 관련 리소스) 를 논리적으로 격리하는 기능이며 아래로 구분할 수 있다. | PID NameSpace : 프로세스ID 를 분리하여 관리, 프로세스 목록을 따로 관리 | UTS NameSpace : UNIX Time Sharing, hostname, NIS domain name 을 프로세스에게 독립적으로 할당한다. | NET NameSpace : 각 Network Namespace 별로 개별적인 인터페이스와 IP 구성을 가진다. Peering 형태로 연결한다 | . PID NameSpace . init(systemd) 프로세스에게 부여도던 PID 1번을 각 PID 네임스페이스별로 할당한다. 또한 컨테이너별로 개별적인 PID 트리가 구성되기 때문에 PID 충돌없이 실행 가능하다. ps -ef : process status, -e every -f full . -pid 를 사용하여 unshare 한다. root@docker1:~# unshare --pid --fork --mount-proc=/proc /bin/bash root@docker1:~# ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 0 06:00 pts/1 00:00:00 /bin/bash root 11 1 0 06:00 pts/1 00:00:00 ps -ef . UTS NameSpace . uname() 시스템 콜에 의해 반환되는 시스템 정보 중에서 hostname, NIS domain name 을 프로세스에게 독립적으로 할당한다. UTS 네임스페이스 별로 hostname 을 격리한다. root@docker1:~# uname -n docker1 root@docker1:~# hostname docker1 root@docker1:~# ls -l /proc/$$/ns/uts lrwxrwxrwx 1 root root 0 Jan 7 06:02 /proc/1/ns/uts -&gt; 'uts:[4026531838]' root@docker1:~# root@docker1:~# root@docker1:~# unshare -u /bin/bash root@docker1:~# hostname happy.life.com root@docker1:~# root@docker1:~# hostname happy.life.com root@docker1:~# root@docker1:~# uname -n happy.life.com root@docker1:~# root@docker1:~# ls -l /proc/$$/ns/uts lrwxrwxrwx 1 root root 0 Jan 7 06:04 /proc/16/ns/uts -&gt; 'uts:[4026532254]' root@docker1:~# root@docker1:~# exit exit . NET NameSpace . 각 Network Namespcace 별로 개별적인 인터페이스와 IP 구성을 가지며, 중복 포트 바인딩 등을 통한 네트워크 충돌을 방지한다. 네트워크 장치, 주소, 경로 및 방화벽 규칙 같은 네트워크 자원을 격리한다. root@docker1:~# ip addr 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 08:00:27:a7:a6:d4 brd ff:ff:ff:ff:ff:ff inet 192.168.137.101/24 brd 192.168.137.255 scope global enp0s3 valid_lft forever preferred_lft forever inet6 fe80::a00:27ff:fea7:a6d4/64 scope link valid_lft forever preferred_lft forever root@docker1:~# root@docker1:~# ip netns add guestnet // guestnet 새로운 NET namespace 생성 root@docker1:~# ip netns ls guestnet root@docker1:~# root@docker1:~# ip netns exec guestnet ip link // guestnet namespace 의 loopback 활성화 1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 root@docker1:~# ip netns exec guestnet ip link set lo up root@docker1:~# ip netns exec guestnet ip link 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 root@docker1:~# root@docker1:~# root@docker1:~# ip link add host type veth peer name guest // default namespace 의 host(veth) 와 guestnet namespace guest(veth) 를 연결 root@docker1:~# root@docker1:~# ip link 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000 link/ether 08:00:27:a7:a6:d4 brd ff:ff:ff:ff:ff:ff 3: guest@host: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000 link/ether ce:cb:f9:46:8f:73 brd ff:ff:ff:ff:ff:ff 4: host@guest: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000 link/ether 02:09:d9:13:4f:e7 brd ff:ff:ff:ff:ff:ff root@docker1:~# root@docker1:~# root@docker1:~# ip link set guest netns guestnet // guest(veth) 를 guestnet namespace 에 할당 root@docker1:~# ip link // guest@host 이 guestnet 으로 이동 확인 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000 link/ether 08:00:27:a7:a6:d4 brd ff:ff:ff:ff:ff:ff 4: host@if3: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000 link/ether 02:09:d9:13:4f:e7 brd ff:ff:ff:ff:ff:ff link-netnsid 0 root@docker1:~# root@docker1:~# root@docker1:~# ip link set host up // host(veth) 에 IP 할당 root@docker1:~# ip address add 1.2.3.4/24 dev host root@docker1:~# root@docker1:~# ip netns exec guestnet ip link set guest up // guest(veth) 에 IP 할당 root@docker1:~# ip netns exec guestnet ip address add 1.2.3.5/24 dev guest root@docker1:~# ip netns exec guestnet ip address show dev guest 3: guest@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000 link/ether ce:cb:f9:46:8f:73 brd ff:ff:ff:ff:ff:ff link-netnsid 0 inet 1.2.3.5/24 scope global guest valid_lft forever preferred_lft forever inet6 fe80::cccb:f9ff:fe46:8f73/64 scope link valid_lft forever preferred_lft forever root@docker1:~# root@docker1:~# root@docker1:~# ping 1.2.3.5 // 통신 확인 PING 1.2.3.5 (1.2.3.5) 56(84) bytes of data. 64 bytes from 1.2.3.5: icmp_seq=1 ttl=64 time=0.102 ms 64 bytes from 1.2.3.5: icmp_seq=2 ttl=64 time=0.068 ms ^C --- 1.2.3.5 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1023ms rtt min/avg/max/mdev = 0.068/0.085/0.102/0.017 ms root@docker1:~# root@docker1:~# root@docker1:~# ip netns del guestnet // guestnet 삭제 root@docker1:~# ip netns ls root@docker1:~# . ",
    "url": "/docs/buildpackage/docker-container-tech/#namespace",
    
    "relUrl": "/docs/buildpackage/docker-container-tech/#namespace"
  },"93": {
    "doc": "Container 기반 기술",
    "title": "cGroups (Control Groups)",
    "content": "cGroups (control Groups) 는 커널이 가지고 있는 기능이며, task 라 불리는 프로세스 그룹에 대한 CPU, Memory, Network, Storage 자원 할당 및 제어하는 커널 기능이다. 사전 환경 구성 . CPU 사용이 많은 환경을 구성하기 위해 아래의 프로그램을 작성한다. gcc : 처음에는 C 컴파일러였으며 GNU C Compiler의 약어였다. 하지만 기능이 추가되면서 C++ 같은 다른 언어도 지원하게 되었고, GNU Compiler Collectio으로 이름을 변경하였다. 물론 약어는 여전히 GCC이다. 공식적으로 지원하는 언어는 C(gcc), C++(g++), Objective-C(gobjc), Fortran(gfortran), Ada(gnat), Go(gccgo), D(gdc)이다. Java(gcj)는 GCC 7.1 버전부터 지원이 중단되었다. GNU 진영에서는 GCC로 컴파일을 하고 Make를 이용해 빌드하는 것이 일반적이다. top : 시스템의 상태를 전반적으로 가장 빠르게 파악 가능(CPU, Memory, Process) 하며 주로 CPU 사용률을 정렬해서 프로세스 목록을 출력하고자 할 떄 쓰인다. # apt-get update # apt install -y gcc # nano a.c void main() { for(;;); } // 저장 시 ctrl+o (저장) &gt; enter &gt; ctrl+x (종료) # cat a.c # gcc a.c # cp a.out b.out . a.out 과 b.out 을 실행하면 아래와 같이 50% 의 동일한 CPU 를 점유한다. # ./a.out &amp; // &amp;: 백그라운드 실행 # ./b.out &amp; . 1024 : 1024 50%:50% 512 : 1024 (1:2 33%:66%) 256 : 1024 (1:4 20%:80%) # cd /sys/fs/cgroup # ls # cd cpu # mkdir limit_50_percent # cd limit_50_percent/ # ls # PS1=\"# \" # echo $(pgrep a.out) &gt; tasks &lt;-- 자원을 제어할 프로세스의 PID (a.out) + echo 8385 # cat cpu.shares # echo 512 &gt; cpu.shares &lt;-- 경쟁이 발생했을 떄 상대적 가중치를 지정한다.(기본값은 1024) # echo 256 &gt; cpu.shares . 테스트 이후 실행한 프로세스를 종료한다. # pkill b.out (process kill : 프로세스 종료) # pkill a.out . ",
    "url": "/docs/buildpackage/docker-container-tech/#cgroups-control-groups",
    
    "relUrl": "/docs/buildpackage/docker-container-tech/#cgroups-control-groups"
  },"94": {
    "doc": "Container 기반 기술",
    "title": "OverlayFS (in Union File System)",
    "content": "두개의 레이어만 가지고 있어 기존의 AUFS (Advanced multi layered Unification File System) 보다 단순한 디자이을 갖는다. 이미지 레이어마다 /var/lib/docker/overlay 디렉토리 밑에 자신만의 디렉토리를 가진다. [Overlay FS 구조] . 테스트 데이터 생성 . 아래와 같이 container, image1, image2, work merge 폴더 및 파일을 생성한다. root@docker1:~# pwd /root root@docker1:~# mkdir overlayfs root@docker1:~# mkdir container image1 image2 work merge root@docker1:~# echo Hello, a &gt; image1/a root@docker1:~# echo Hello, b &gt; image1/b root@docker1:~# echo HEllo, c &gt; image2/c root@docker1:~# tree . ├── a.c ├── a.out ├── b.out ├── container ├── image1 │ ├── a │ └── b ├── image2 │ └── c ├── labfilre.tgz ├── merge ├── newroot │ ├── bin │ │ ├── bash │ │ └── ls │ ├── lib │ │ └── x86_64-linux-gnu │ │ ├── libc.so.6 │ │ ├── libdl.so.2 │ │ ├── libpcre.so.3 │ │ ├── libpthread.so.0 │ │ ├── libselinux.so.1 │ │ └── libtinfo.so.5 │ └── lib64 │ └── ld-linux-x86-64.so.2 ├── overlayfs ├── tasks └── work 11 directories, 17 files root@docker1:~# . mount : 기본 파일 시스템을 커널이 인식하도록 한다. 파일 시스템이 연결되면 마우트 지점이 마운트된 파일 시스템의 루트 디렉터리가 된다. 파일시스템 Overlay 마운트하기 . root@docker1:~# mount -t overlay overlay -o lowerdir=image2:image1,upperdir=container,workdir=work merge . | overlay : 타입 종류 | overlay : 장치명 | lowerdir, upperdir | workdir : 작업용 디렉토리 | merge : 실제 참조되는 디렉토리 | . df : 리눅스 시스템 전체의 (마운트 된) 디스크 사용량을 확인할 수 있습니다. 파일시스템, 디스크 크기, 사용량, 여유공간, 사용률, 마운트지점 순으로 나타납니다. -t : type . root@docker1:~# mount -t overlay overlay -o lowerdir=image2:image1,upperdir=container,workdir=work merge root@docker1:~# root@docker1:~# df Filesystem 1K-blocks Used Available Use% Mounted on /dev/mapper/ubuntu--vg-ubuntu--lv 19475088 6674836 11787928 37% / udev 1986084 0 1986084 0% /dev tmpfs 2019700 0 2019700 0% /dev/shm tmpfs 403940 1304 402636 1% /run tmpfs 5120 4 5116 1% /run/lock tmpfs 403940 28 403912 1% /run/user/125 tmpfs 403940 0 403940 0% /run/user/0 tmpfs 2019700 0 2019700 0% /sys/fs/cgroup /dev/sda2 999320 153112 777396 17% /boot overlay 19475088 6674836 11787928 37% /root/merge root@docker1:~# . merge 폴더에 overlay 된 파일들이 생성된다. root@docker1:~# tree . ├── a.c ├── a.out ├── b.out ├── container ├── image1 │ ├── a │ └── b ├── image2 │ └── c ├── labfilre.tgz ├── merge │ ├── a │ ├── b │ └── c ├── newroot │ ├── bin │ │ ├── bash │ │ └── ls │ ├── lib │ │ └── x86_64-linux-gnu │ │ ├── libc.so.6 │ │ ├── libdl.so.2 │ │ ├── libpcre.so.3 │ │ ├── libpthread.so.0 │ │ ├── libselinux.so.1 │ │ └── libtinfo.so.5 │ └── lib64 │ └── ld-linux-x86-64.so.2 ├── overlayfs ├── tasks └── work └── work 12 directories, 20 files . merge 파일 내용을 변경하면 container 에 반영이 된다. root@docker1:~# cat merge/a Hello, a root@docker1:~# echo Hello, yumi &gt; merge/a root@docker1:~# cat merge/a Hello, yumi root@docker1:~# cat container/a Hello, yumi root@docker1:~# . merge 에 파일을 생성하면 container 에도 생성이 된다. root@docker1:~# root@docker1:~# echo Hello, d &gt; merge/d root@docker1:~# tree . ├── a.c ├── a.out ├── b.out ├── container │ ├── a │ └── d ├── image1 │ ├── a │ └── b ├── image2 │ └── c ├── labfilre.tgz ├── merge │ ├── a │ ├── b │ ├── c │ └── d ├── newroot │ ├── bin │ │ ├── bash │ │ └── ls │ ├── lib │ │ └── x86_64-linux-gnu │ │ ├── libc.so.6 │ │ ├── libdl.so.2 │ │ ├── libpcre.so.3 │ │ ├── libpthread.so.0 │ │ ├── libselinux.so.1 │ │ └── libtinfo.so.5 │ └── lib64 │ └── ld-linux-x86-64.so.2 ├── overlayfs ├── tasks └── work └── work 12 directories, 23 files . ",
    "url": "/docs/buildpackage/docker-container-tech/#overlayfs-in-union-file-system",
    
    "relUrl": "/docs/buildpackage/docker-container-tech/#overlayfs-in-union-file-system"
  },"95": {
    "doc": "Dockerfile",
    "title": "Dockerfile",
    "content": " ",
    "url": "/docs/buildpackage/docker-dockerfile/",
    
    "relUrl": "/docs/buildpackage/docker-dockerfile/"
  },"96": {
    "doc": "Dockerfile",
    "title": "Table of contents",
    "content": ". | Dockerfile 주요 개념과 생성 . | Dockerfile 을 통한 build 방법 | Dockerfile 과 Image layer | 이미지 생성 시 용량 관련 고려사항 | . | Dockerfile 주요 키워드 . | RUN . | shell 형식 기술 | exec 형식 기술 | . | CMD | ENTRYPOINT | ENV | LABEL | ADD , COPY | EXPOSE | . | . Dockerfile은 DockerImage를 생성하기 위한 스크립트(설정파일)이다. 여러가지 명령어를 토대로 Dockerfile을 작성한 후 빌드하면 Docker는 Dockerfile 에 나열된 명령문을 차례대로 수행하며 DockerImage를 생성해준다. Dockerfile 을 읽을 줄 안다는 것은 해당 이미지가 어떻게 구성되어 있는지 알 수 있다는 의미이다 . ",
    "url": "/docs/buildpackage/docker-dockerfile/#table-of-contents",
    
    "relUrl": "/docs/buildpackage/docker-dockerfile/#table-of-contents"
  },"97": {
    "doc": "Dockerfile",
    "title": "Dockerfile 주요 개념과 생성",
    "content": ". [Dockerfile 개념(https://www.researchgate.net/figure/Example-of-a-fictitious-Dockerfile-illustrating-common-instructions-and-quality-issues_fig1_345667168)] . Dockerfile 을 통한 build 방법 . docker build 명령어를 사용한다. root@master:~/labfile/dockerfile_dir# cat Dockerfile FROM centos . // FROM 센토스를 베이스 이미지로 지정한다. root@docker1:~/labfile/dockerfile_dir# cat Dockerfile FROM centos root@docker1:~/labfile/dockerfile_dir# // docker build 실행 root@docker1:~/labfile/dockerfile_dir# docker build -t testimage -f Dockerfile . Sending build context to Docker daemon 176.1kB Step 1/1 : FROM centos latest: Pulling from library/centos a1d0c7532777: Pull complete Digest: sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177 Status: Downloaded newer image for centos:latest ---&gt; 5d0da3dc9764 Successfully built 5d0da3dc9764 Successfully tagged testimage:latest root@docker1:~/labfile/dockerfile_dir# // testimage 이미지 생성 확인 root@docker1:~/labfile/dockerfile_dir# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE testuser/web-nginx 1.0 6f10cf278ad2 24 hours ago 174MB testuser/box 1.0 66ba00ad3de8 6 days ago 4.87MB busybox latest 66ba00ad3de8 6 days ago 4.87MB testuser/web-server 1.0 1403e55ab369 2 weeks ago 142MB nginx latest 1403e55ab369 2 weeks ago 142MB ubuntu latest 6b7dfa7e8fdb 4 weeks ago 77.8MB centos latest 5d0da3dc9764 16 months ago 231MB testimage latest 5d0da3dc9764 16 months ago 231MB root@docker1:~/labfile/dockerfile_dir# . -t (tag) : 이미지 이름 -f (file) : Dockerfile 이름 . : Dockerfile 위치하는 디렉토리 . Dockerfile 과 Image layer . Dockerfile 의 명령별로 이미지 레이어가 생성된다 ** 예) 베이스 이미지는 ubuntu, 그 위에 nginx 레이어로 두번째 이미지, 그 위에 index.html 이 올라가 세번째 이미지가 생성된다. ** . root@master:~/labfile/dockerfile_dir# cat Dockerfile.1 FROM ubuntu RUN apt-get update &amp;&amp; apt-get install -y -q nginx &amp;&amp; rm -rf /var/lib/apt/lists/* COPY index.html /var/www/html/ CMD [\"nginx\", \"-g\", \"daemon off;\"] root@master:~/labfile/dockerfile_dir# . // index.html 파일 생성 root@docker1:~/labfile/dockerfile_dir# echo Hello World &gt; index.html // Dockerfile.1 소스 확인 root@docker1:~/labfile/dockerfile_dir# cat Dockerfile.1 FROM ubuntu RUN apt-get update &amp;&amp; apt-get install -y -q nginx COPY index.html /var/www/html/ CMD [\"nginx\", \"-g\", \"daemon off;\"] root@docker1:~/labfile/dockerfile_dir# // docker build root@docker1:~/labfile/dockerfile_dir# docker build -t web-nginx:v1 -f Dockerfile.1 . Sending build context to Docker daemon 176.1kB Step 1/4 : FROM ubuntu ---&gt; 6b7dfa7e8fdb Step 2/4 : RUN apt-get update &amp;&amp; apt-get install -y -q nginx ---&gt; Running in 7e6fe0ef8c1b Get:1 http://archive.ubuntu.com/ubuntu jammy InRelease [270 kB] Get:2 http://security.ubuntu.com/ubuntu jammy-security InRelease [110 kB] Get:3 http://security.ubuntu.com/ubuntu jammy-security/universe amd64 Packages [786 kB] Get:4 http://archive.ubuntu.com/ubuntu jammy-updates InRelease [114 kB] Get:5 http://archive.ubuntu.com/ubuntu jammy-backports InRelease [99.8 kB] Get:6 http://archive.ubuntu.com/ubuntu jammy/restricted amd64 Packages [164 kB] Get:7 http://archive.ubuntu.com/ubuntu jammy/multiverse amd64 Packages [266 kB] Get:8 http://archive.ubuntu.com/ubuntu jammy/main amd64 Packages [1792 kB] ... 중략 Setting up nginx (1.18.0-6ubuntu14.3) ... Processing triggers for libc-bin (2.35-0ubuntu3.1) ... Removing intermediate container 7e6fe0ef8c1b ---&gt; 1edf77c6398f Step 3/4 : COPY index.html /var/www/html/ ---&gt; eeb5a81c7c8c Step 4/4 : CMD [\"nginx\", \"-g\", \"daemon off;\"] ---&gt; Running in 3dda10f8fb0a Removing intermediate container 3dda10f8fb0a ---&gt; 63123ab8639e Successfully built 63123ab8639e Successfully tagged web-nginx:v1 // 이미지 생성 확인 (web-nginx:v1) root@docker1:~/labfile/dockerfile_dir# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE web-nginx v1 63123ab8639e About a minute ago 174MB testuser/web-nginx 1.0 6f10cf278ad2 24 hours ago 174MB testuser/box 1.0 66ba00ad3de8 6 days ago 4.87MB busybox latest 66ba00ad3de8 6 days ago 4.87MB nginx latest 1403e55ab369 2 weeks ago 142MB testuser/web-server 1.0 1403e55ab369 2 weeks ago 142MB ubuntu latest 6b7dfa7e8fdb 4 weeks ago 77.8MB centos latest 5d0da3dc9764 16 months ago 231MB testimage latest 5d0da3dc9764 16 months ago 231MB . FROM : 기본 이미지 RUN : 내부에서 수행할 작업 COPY : 호스트에서 파일 CMD : 1번 프로세스에 대한 command 의 약자 . 이미지 생성 시 용량 관련 고려사항 . 용량이 작은 베이스 이미지 선택하거나 불필요한 파일들 삭제한다. | alpine , ###-slim, busybox | rm -rf /var/lib/apt/lists/* | . root@docker1:~/labfile/dockerfile_dir# nano Dockerfile.1 root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# cat Dockerfile.1 FROM ubuntu RUN apt-get update &amp;&amp; apt-get install -y -q nginx &amp;&amp; rm -rf /var/lib/apt/lists/* COPY index.html /var/www/html/ CMD [\"nginx\", \"-g\", \"daemon off;\"] root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# docker build -t web-nginx:v2 -f Dockerfile.1 . Sending build context to Docker daemon 176.1kB Step 1/4 : FROM ubuntu ---&gt; 6b7dfa7e8fdb Step 2/4 : RUN apt-get update &amp;&amp; apt-get install -y -q nginx &amp;&amp; rm -rf /var/lib/apt/lists/* ---&gt; Running in 72c6c189dc81 Get:1 http://archive.ubuntu.com/ubuntu jammy InRelease [270 kB] Get:2 http://security.ubuntu.com/ubuntu jammy-security InRelease [110 kB] ... 중략 Processing triggers for libc-bin (2.35-0ubuntu3.1) ... Removing intermediate container 72c6c189dc81 ---&gt; 24be474303f8 Step 3/4 : COPY index.html /var/www/html/ ---&gt; 9622834c67c5 Step 4/4 : CMD [\"nginx\", \"-g\", \"daemon off;\"] ---&gt; Running in c75a2a490216 Removing intermediate container c75a2a490216 ---&gt; 5e2b37603055 Successfully built 5e2b37603055 Successfully tagged web-nginx:v2 root@docker1:~/labfile/dockerfile_dir# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE web-nginx v2 5e2b37603055 18 seconds ago 133MB web-nginx v1 63123ab8639e 15 minutes ago 174MB . /var/lib/apt/lists/*` 를 삭제하고 진행했을 때 v1 보다 사이즈가 작음을 확인할 수 있다. ",
    "url": "/docs/buildpackage/docker-dockerfile/#dockerfile-%EC%A3%BC%EC%9A%94-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%83%9D%EC%84%B1",
    
    "relUrl": "/docs/buildpackage/docker-dockerfile/#dockerfile-주요-개념과-생성"
  },"98": {
    "doc": "Dockerfile",
    "title": "Dockerfile 주요 키워드",
    "content": "RUN . 빌드 과정에서 어플리케이션/미들웨어 설치, 환경 설정을 위한 명령들을 정의한다. (계정생성, 그룹생성 등..) . shell 형식 기술 . 자주 사용하는 방식으로 쉘 프롬프트에 명령을 기술하는 방식으로 다음과 같으며, 베이스 이미지 위에서 /bin/sh -c 실행과 동일하다. RUN apt-get update &amp;&amp; apt-get install -y -q nginx . exec 형식 기술 . 쉘을 사용하지 않고 직접 실행하고 $HOME 같은 환경변수 사용가능하다. JSON 형식을 사용한다. RUN [\"/bin/bash\", -C, \"apt-get install -y nginx\"] . root@docker1:~/labfile/dockerfile_dir# cat Dockerfile.2 FROM ubuntu RUN echo \"Shell: Home Dir --&gt; $HOME \" &lt;-- shell 형식 RUN [\"echo\", \"Exec: Home Dir --&gt; $HOME\" ] &lt;-- exec 형식 RUN [\"/bin/bash\" , \"-c\", \"echo Exec: Home Dir : $HOME\" ] &lt;-- exec 형식 root@docker1:~/labfile/dockerfile_dir# docker build -t echo00 -f Dockerfile.2 . Sending build context to Docker daemon 176.1kB Step 1/4 : FROM ubuntu ---&gt; 6b7dfa7e8fdb Step 2/4 : RUN echo \"Shell: Home Dir --&gt; $HOME \" ---&gt; Running in 89fcdd57095c // shell 형식 Shell: Home Dir --&gt; /root Removing intermediate container 89fcdd57095c ---&gt; 959d899d68ac Step 3/4 : RUN [\"echo\", \"Exec: Home Dir --&gt; $HOME\" ] ---&gt; Running in 9e24500dcd29 // exec 형식 Exec: Home Dir --&gt; $HOME Removing intermediate container 9e24500dcd29 ---&gt; 543426d48390 Step 4/4 : RUN [\"/bin/bash\" , \"-c\", \"echo Exec: Home Dir : $HOME\" ] ---&gt; Running in 29afed36471a // exec 형식 Exec: Home Dir : /root Removing intermediate container 29afed36471a ---&gt; 803e2dcf0ab0 Successfully built 803e2dcf0ab0 Successfully tagged echo00:latest root@docker1:~/labfile/dockerfile_dir# // 이미지 생성 확인 root@docker1:~/labfile/dockerfile_dir# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE echo00 latest 803e2dcf0ab0 5 minutes ago 77.8MB . CMD . 컨테이너 내부에서 수행될 작업이나 명령 즉, 컨테이너가 시작될 때 실행되는 프로그램을 정의한다. Dockerfile 하나에 하나의 CMD 만 기술해야 한다. root@docker1:~/labfile/dockerfile_dir# cat Dockerfile.1 FROM ubuntu RUN apt-get update &amp;&amp; apt-get install -y -q nginx COPY index.html /var/www/html/ CMD [\"nginx\", \"-g\", \"daemon off;\"] . RUN 과 혼동스럽긴 한데 아래 예제로 체크해 보자. Nginx 설치 시는 RUN, Nginx 데몬 실행 시는 CMD . ENTRYPOINT . 컨테이너가 시작될 때 실행할 작업이다. CMD 와 같이 사용되면 CMD 는 ENTRYPOINT 의 인수 형태로 먼저 해석된다. // ENTRYPOINT 와 CMD 같이 정의됨. root@docker1:~/labfile/dockerfile_dir# cat Dockerfile.3 FROM centos ENTRYPOINT [\"/bin/ping\", \"localhost\"] CMD [\"-c\", \"3\"] root@docker1:~/labfile/dockerfile_dir# // ping00 이미지 생성 root@docker1:~/labfile/dockerfile_dir# docker build -t ping00 -f Dockerfile.3 . Sending build context to Docker daemon 176.1kB Step 1/3 : FROM centos latest: Pulling from library/centos a1d0c7532777: Pull complete Digest: sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177 Status: Downloaded newer image for centos:latest ---&gt; 5d0da3dc9764 Step 2/3 : ENTRYPOINT [\"/bin/ping\", \"localhost\"] ---&gt; Running in 50ce39c4451e Removing intermediate container 50ce39c4451e ---&gt; 5075db00e5d5 Step 3/3 : CMD [\"-c\", \"3\"] ---&gt; Running in 8357b97afb7d Removing intermediate container 8357b97afb7d ---&gt; 02259b638b70 Successfully built 02259b638b70 Successfully tagged ping00:latest root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE ping00 latest 02259b638b70 2 minutes ago 231MB centos latest 5d0da3dc9764 16 months ago 231MB root@docker1:~/labfile/dockerfile_dir# // CMD [\"-c\", \"3\"] 에 의해 3번 PING 실행 root@docker1:~/labfile/dockerfile_dir# docker run -it ping00 PING localhost (127.0.0.1) 56(84) bytes of data. 64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.023 ms 64 bytes from localhost (127.0.0.1): icmp_seq=2 ttl=64 time=0.036 ms 64 bytes from localhost (127.0.0.1): icmp_seq=3 ttl=64 time=0.040 ms --- localhost ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2040ms rtt min/avg/max/mdev = 0.023/0.033/0.040/0.007 ms root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# // 인자 넣어주면 CMD 무시됨. root@docker1:~/labfile/dockerfile_dir# docker run -it ping00 -c 5 PING localhost (127.0.0.1) 56(84) bytes of data. 64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.050 ms 64 bytes from localhost (127.0.0.1): icmp_seq=2 ttl=64 time=0.025 ms 64 bytes from localhost (127.0.0.1): icmp_seq=3 ttl=64 time=0.048 ms 64 bytes from localhost (127.0.0.1): icmp_seq=4 ttl=64 time=0.079 ms 64 bytes from localhost (127.0.0.1): icmp_seq=5 ttl=64 time=0.031 ms --- localhost ping statistics --- 5 packets transmitted, 5 received, 0% packet loss, time 4097ms rtt min/avg/max/mdev = 0.025/0.046/0.079/0.020 ms root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# // 원본 이미지 centos 는 아래와 같다. root@docker1:~/labfile/dockerfile_dir# docker image inspect centos [ { \"Id\": \"sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6\", \"Cmd\": [ \"/bin/sh\", \"-c\", \"#(nop) \", \"CMD [\\\"/bin/bash\\\"]\" ], \"Entrypoint\": null, // ping00 은 아래와 같다. root@docker1:~/labfile/dockerfile_dir# docker image inspect ping00 [ { \"Id\": \"sha256:02259b638b7070d3cb7a082fc6274e991fe5ab8ad371c03409f77b0c149c5ec7\", \"Cmd\": [ \"/bin/sh\", \"-c\", \"#(nop) \", \"CMD [\\\"-c\\\" \\\"3\\\"]\" ], \"Entrypoint\": [ \"/bin/ping\", \"localhost\" ], . ENV . Dockerfile 안에서 컨테이너 환경 변수를 설정한다. 예로서 웹에서 DB정보 연결할 때 사용한다. 자주 사용되는 키워드이다. LABEL . 이미지에 대한 부가적인 설명을 제공한다. // 도커파일 정의 root@docker1:~/labfile/dockerfile_dir# cat Dockerfile.4 FROM centos ENV myName “Yu Mi” ENV myOrder Pizza Pasta Salad ENV myNumber 1004 LABEL maintainer \"Yu Mi &lt;yumi@example.com&gt;\" LABEL title \"TEST Image\" LABEL version 1.0 LABEL description \"This image is test image ^__^\" // 이미지 빌드 root@docker1:~/labfile/dockerfile_dir# docker build -t param00 -f Dockerfile.4 . Sending build context to Docker daemon 176.1kB Step 1/8 : FROM centos latest: Pulling from library/centos .. 중략 Successfully built e7bf5be9766f Successfully tagged param00:latest root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# docker image inspect param00 [ { \"Id\": \"sha256:e7bf5be9766f77b2bf1d9536aead63c6bd528ad9466bbcb257625c641b93ab51\", ... 중략 \"ContainerConfig\": { \"Env\": [ \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\", \"myName=“Yu Mi”\", \"myOrder=Pizza Pasta Salad\", \"myNumber=1004\" ], ... 중략 \"Labels\": { \"description\": \"This image is test image ^__^\", \"maintainer\": \"Yu Mi &lt;yumi@example.com&gt;\", \"org.label-schema.build-date\": \"20210915\", \"org.label-schema.license\": \"GPLv2\", \"org.label-schema.name\": \"CentOS Base Image\", \"org.label-schema.schema-version\": \"1.0\", \"org.label-schema.vendor\": \"CentOS\", \"title\": \"TEST Image\", \"version\": \"1.0\" } }, . 컨테이너 안에서 환경변수를 확인해 보자. // param00 컨테이너 실행 root@docker1:~/labfile/dockerfile_dir# docker run -it --rm param00 [root@4a5fa49b48bc /]# echo $myName : $myOrder : $myNumber “Yu Mi” : Pizza Pasta Salad : 1004 [root@4a5fa49b48bc /]# [root@4a5fa49b48bc /]# exit exit // --env 로 컨테이너 생성 시 정의 root@docker1:~/labfile/dockerfile_dir# docker run -it --env myAge=20 --env myNumber=1005 param00 [root@1b02c26cfcd8 /]# echo $myAge 20 [root@1b02c26cfcd8 /]# echo $myNumber 1005 [root@1b02c26cfcd8 /]# env myName=“Yu Mi” LANG=en_US.UTF-8 HOSTNAME=1b02c26cfcd8 PWD=/ HOME=/root myOrder=Pizza Pasta Salad myAge=20 TERM=xterm SHLVL=1 myNumber=1005 PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin LESSOPEN=||/usr/bin/lesspipe.sh %s _=/usr/bin/env [root@1b02c26cfcd8 /]# [root@1b02c26cfcd8 /]# exit exit root@docker1:~/labfile/dockerfile_dir# . ADD , COPY . ADD와 COPY는 특정 위치에서 Docker 이미지로 파일을 복사하는 기능을 수행하는 Dockerfile 명령어이다. COPY는 로컬 파일 또는 디렉토리를 컨테이너에 복사하는 기능만 지원한다. ADD도 해당 기능을 지원하지만, 2개의 또다른 기능도 지원한다. 먼저, 로컬 파일 또는 디렉토리 대신 URL을 사용할 수 있다. 두번째로는 ADD rootfs.tar.xz /처럼 소스에서 대상으로 직접 tar파일을 자동 추출할 수 있다. // ADD, COPY 정의 root@docker1:~/labfile/dockerfile_dir# cat Dockerfile.5 FROM ubuntu ADD host.html /test_dir/add.html COPY host.html /test_dir/copy.html ADD https://github.com/kubernetes/kubernetes/blob/master/LICENSE /test_dir/ ADD add_data.tgz /test_dir/ COPY copy_data.tgz /test_dir/ root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# // 압축 파일 해제 root@docker1:~/labfile/dockerfile_dir# tar -tzvf add_data.tgz -rw-r--r-- root/root 20 2022-04-26 12:08 add_1.html -rw-r--r-- root/root 20 2022-04-26 12:08 add_2.html -rw-r--r-- root/root 20 2022-04-26 12:09 add_3.html root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# tar -tzvf copy_data.tgz -rw-r--r-- root/root 20 2022-04-26 12:09 copy_1.html -rw-r--r-- root/root 20 2022-04-26 12:09 copy_2.html -rw-r--r-- root/root 20 2022-04-26 12:09 copy_3.html root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# ls add_data.tgz Dockerfile Dockerfile.11 Dockerfile.3 Dockerfile.5 host.html copy_data.tgz Dockerfile.1 Dockerfile.2 Dockerfile.4 Dockerfile.6 index.html root@docker1:~/labfile/dockerfile_dir# // file00 이미지 생성 root@docker1:~/labfile/dockerfile_dir# docker build -t file00 -f Dockerfile.5 . Sending build context to Docker daemon 176.1kB Step 1/6 : FROM ubuntu latest: Pulling from library/ubuntu 6e3729cf69e0: Pull complete Digest: sha256:27cb6e6ccef575a4698b66f5de06c7ecd61589132d5a91d098f7f3f9285415a9 Status: Downloaded newer image for ubuntu:latest ---&gt; 6b7dfa7e8fdb Step 2/6 : ADD host.html /test_dir/add.html ---&gt; a9ad95733e3c Step 3/6 : COPY host.html /test_dir/copy.html ---&gt; f5909d2eaad6 Step 4/6 : ADD https://github.com/kubernetes/kubernetes/blob/master/LICENSE /test_dir/ Downloading 210.3kB ---&gt; 48bbcf3a8eb9 Step 5/6 : ADD add_data.tgz /test_dir/ ---&gt; b19bf7d0d6c5 Step 6/6 : COPY copy_data.tgz /test_dir/ ---&gt; 5a0fa506014b Successfully built 5a0fa506014b Successfully tagged file00:latest root@docker1:~/labfile/dockerfile_dir# docker build -t file00 -f Dockerfile.5 .^C // file00 이미지로 컨테이너 생성 root@docker1:~/labfile/dockerfile_dir# docker run -it --rm file00 // 컨테이너 내 COPY, ADD 파일 존재 확인 root@aa9154bcce3c:/# ls -l /test_dir/ total 544 -rw------- 1 root root 210306 Jan 1 1970 LICENSE -rw-r--r-- 1 root root 163112 Jan 10 14:09 add.html -rw-r--r-- 1 root root 20 Apr 26 2022 add_1.html -rw-r--r-- 1 root root 20 Apr 26 2022 add_2.html -rw-r--r-- 1 root root 20 Apr 26 2022 add_3.html -rw-r--r-- 1 root root 163112 Jan 10 14:09 copy.html -rw-r--r-- 1 root root 182 Jan 10 14:09 copy_data.tgz . EXPOSE . 컨테이너의 공개 포트 를 지정하여 도커에게 컨테이너가 대기하고 있는 포트를 알려준다. docker run 명령어의 -p 옵션을 통해 호스트의 포트 번호와 매핑할 수 있다. // EXPOSE 선언 root@docker1:~/labfile/dockerfile_dir# cat Dockerfile.6 FROM nginx EXPOSE 443 root@docker1:~/labfile/dockerfile_dir# // 이미지 빌드 root@docker1:~/labfile/dockerfile_dir# docker build -t port00 -f Dockerfile.6 . Sending build context to Docker daemon 186.9kB Step 1/2 : FROM nginx latest: Pulling from library/nginx .. 중략 Successfully tagged port00:latest root@docker1:~/labfile/dockerfile_dir# // 컨테이너 생성 root@docker1:~/labfile/dockerfile_dir# docker run -d -p 8080:443 port00 878484cba54d9b332ad27177f5739bb3263018118ed357ea0e7a9627a15ea110 root@docker1:~/labfile/dockerfile_dir# // 8080-&gt;443 확인 root@docker1:~/labfile/dockerfile_dir# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 878484cba54d port00 \"/docker-entrypoint.…\" 7 seconds ago Up 6 seconds 80/tcp, 0.0.0 .0:8080-&gt;443/tcp, :::8080-&gt;443/tcp mystifying_merkle root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 878484cba54d port00 \"/docker-entrypoint.…\" 17 seconds ago Up 15 seconds 80/tcp, 0.0.0.-&gt;443/tcp mystifying_merkle root@docker1:~/labfile/dockerfile_dir# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 878484cba54d port00 \"/docker-entrypoint.…\" 23 seconds ago Up 22 seconds 80/tcp, 0.0.0.0:8080-&gt;443/tcp, :::8080-&gt;443/tcp mystifying_merkle root@docker1:~/labfile/dockerfile_dir# . ",
    "url": "/docs/buildpackage/docker-dockerfile/#dockerfile-%EC%A3%BC%EC%9A%94-%ED%82%A4%EC%9B%8C%EB%93%9C",
    
    "relUrl": "/docs/buildpackage/docker-dockerfile/#dockerfile-주요-키워드"
  },"99": {
    "doc": "Docker Image Layer",
    "title": "Docker Image Layer",
    "content": " ",
    "url": "/docs/buildpackage/docker-imagelayer/",
    
    "relUrl": "/docs/buildpackage/docker-imagelayer/"
  },"100": {
    "doc": "Docker Image Layer",
    "title": "Table of contents",
    "content": ". | Dockerfile | Jenkins 빌드 시 로그 | layer 분석 . | Image Layer on docker history command | Image Layer on Docker Hub | Image Layer on Jfrog Artifactory | . | FROM 구문 부분 비교 | 결론 | . Docker Image 는 주로 dockerfile 빌드를 통해 생성되면, 이는 docker file 에서의 각 커맨드 별로 레이어가 쌓여서 생성되는 것이라면 이해하기 쉽다. 도커 Image Layer가 어떻게 쌓여 있는지 확인하기 위해 docker history 커맨드를 살펴보고자 샘플 예제를 기준으로 정리한다. ",
    "url": "/docs/buildpackage/docker-imagelayer/#table-of-contents",
    
    "relUrl": "/docs/buildpackage/docker-imagelayer/#table-of-contents"
  },"101": {
    "doc": "Docker Image Layer",
    "title": "Dockerfile",
    "content": "FROM openjdk:17 WORKDIR /app COPY springVueStarter-0.0.1-SNAPSHOT.jar . ENTRYPOINT [\"java\",\"-jar\", \"springVueStarter-0.0.1-SNAPSHOT.jar\"] . ",
    "url": "/docs/buildpackage/docker-imagelayer/#dockerfile",
    
    "relUrl": "/docs/buildpackage/docker-imagelayer/#dockerfile"
  },"102": {
    "doc": "Docker Image Layer",
    "title": "Jenkins 빌드 시 로그",
    "content": "Step 1/4 : FROM openjdk:17 ---&gt; 5e28ba2b4cdb Step 2/4 : WORKDIR /app ---&gt; Using cache ---&gt; f0001b6226f4 Step 3/4 : COPY springVueStarter-0.0.1-SNAPSHOT.jar . ---&gt; Using cache ---&gt; 925cc8c298f9 Step 4/4 : ENTRYPOINT [\"java\",\"-jar\", \"springVueStarter-0.0.1-SNAPSHOT.jar\"] ---&gt; Using cache ---&gt; 53ae2020bd8e Successfully built 53ae2020bd8e Successfully tagged user1/spring-vue-starter-repo:90 . ",
    "url": "/docs/buildpackage/docker-imagelayer/#jenkins-%EB%B9%8C%EB%93%9C-%EC%8B%9C-%EB%A1%9C%EA%B7%B8",
    
    "relUrl": "/docs/buildpackage/docker-imagelayer/#jenkins-빌드-시-로그"
  },"103": {
    "doc": "Docker Image Layer",
    "title": "layer 분석",
    "content": "Image Layer on docker history command . user1@user1-500R5K-501R5K-500R5Q:~$ docker history --no-trunc user1/spring-vue-starter-repo:90 IMAGE CREATED CREATED BY SIZE COMMENT sha256:53ae2020bd8e6bd80952db2ce7c7ffcf01d56c43bd1fd44c3dd918549d4eca85 3 weeks ago /bin/sh -c #(nop) ENTRYPOINT [\"java\" \"-jar\" \"springVueStarter-0.0.1-SNAPSHOT.jar\"] 0B sha256:925cc8c298f96a1e65fb921a97d2070f07d0ee5d8fc2bf51a4eefa21f3d5801c 3 weeks ago /bin/sh -c #(nop) COPY file:3708ed22897e6f3364d3a7685bf03434e941c9676059fc904b08fdc1e1c234d7 in . 18.2MB sha256:f0001b6226f42bf49196c6d2001ec429672f249af78dcae71112152b8cc21c8b 3 weeks ago /bin/sh -c #(nop) WORKDIR /app 0B sha256:5e28ba2b4cdb3a7c3bd0ee2e635a5f6481682b77eabf8b51a17ea8bfe1c05697 19 months ago /bin/sh -c #(nop) CMD [\"jshell\"] 0B &lt;missing&gt; 19 months ago /bin/sh -c set -eux; arch=\"$(objdump=\"$(command -v objdump)\" &amp;&amp; objdump --file-headers \"$objdump\" | awk -F '[:,]+[[:space:]]+' '$1 == \"architecture\" { print $2 }')\"; case \"$arch\" in 'i386:x86-64') downloadUrl='https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz'; downloadSha256='0022753d0cceecacdd3a795dd4cea2bd7ffdf9dc06e22ffd1be98411742fbb44'; ;; 'aarch64') downloadUrl='https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-aarch64_bin.tar.gz'; downloadSha256='13bfd976acf8803f862e82c7113fb0e9311ca5458b1decaef8a09ffd91119fa4'; ;; *) echo &gt;&amp;2 \"error: unsupported architecture: '$arch'\"; exit 1 ;; esac; curl -fL -o openjdk.tgz \"$downloadUrl\"; echo \"$downloadSha256 *openjdk.tgz\" | sha256sum --strict --check -; mkdir -p \"$JAVA_HOME\"; tar --extract --file openjdk.tgz --directory \"$JAVA_HOME\" --strip-components 1 --no-same-owner ; rm openjdk.tgz*; rm -rf \"$JAVA_HOME/lib/security/cacerts\"; ln -sT /etc/pki/ca-trust/extracted/java/cacerts \"$JAVA_HOME/lib/security/cacerts\"; ln -sfT \"$JAVA_HOME\" /usr/java/default; ln -sfT \"$JAVA_HOME\" /usr/java/latest; for bin in \"$JAVA_HOME/bin/\"*; do base=\"$(basename \"$bin\")\"; [ ! -e \"/usr/bin/$base\" ]; alternatives --install \"/usr/bin/$base\" \"$base\" \"$bin\" 20000; done; java -Xshare:dump; fileEncoding=\"$(echo 'System.out.println(System.getProperty(\"file.encoding\"))' | jshell -s -)\"; [ \"$fileEncoding\" = 'UTF-8' ]; rm -rf ~/.java; javac --version; java --version 321MB &lt;missing&gt; 19 months ago /bin/sh -c #(nop) ENV JAVA_VERSION=17.0.2 0B &lt;missing&gt; 19 months ago /bin/sh -c #(nop) ENV LANG=C.UTF-8 0B &lt;missing&gt; 19 months ago /bin/sh -c #(nop) ENV PATH=/usr/java/openjdk-17/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin 0B &lt;missing&gt; 19 months ago /bin/sh -c #(nop) ENV JAVA_HOME=/usr/java/openjdk-17 0B &lt;missing&gt; 19 months ago /bin/sh -c set -eux; microdnf install gzip tar binutils freetype fontconfig ; microdnf clean all 39.7MB &lt;missing&gt; 19 months ago /bin/sh -c #(nop) CMD [\"/bin/bash\"] 0B &lt;missing&gt; 19 months ago /bin/sh -c #(nop) ADD file:9893213a9ea238f53ac68d87a3cf2f05d86763688392e5ddb6a2c9b60d3550a6 in / 111MB user1@user1-500R5K-501R5K-500R5Q:~$ docker history user1/spring-vue-starter-repo:90 IMAGE CREATED CREATED BY SIZE COMMENT 53ae2020bd8e 3 weeks ago /bin/sh -c #(nop) ENTRYPOINT [\"java\" \"-jar\"… 0B 925cc8c298f9 3 weeks ago /bin/sh -c #(nop) COPY file:3708ed22897e6f33… 18.2MB f0001b6226f4 3 weeks ago /bin/sh -c #(nop) WORKDIR /app 0B 5e28ba2b4cdb 19 months ago /bin/sh -c #(nop) CMD [\"jshell\"] 0B &lt;missing&gt; 19 months ago /bin/sh -c set -eux; arch=\"$(objdump=\"$(co… 321MB &lt;missing&gt; 19 months ago /bin/sh -c #(nop) ENV JAVA_VERSION=17.0.2 0B &lt;missing&gt; 19 months ago /bin/sh -c #(nop) ENV LANG=C.UTF-8 0B &lt;missing&gt; 19 months ago /bin/sh -c #(nop) ENV PATH=/usr/java/openjd… 0B &lt;missing&gt; 19 months ago /bin/sh -c #(nop) ENV JAVA_HOME=/usr/java/o… 0B &lt;missing&gt; 19 months ago /bin/sh -c set -eux; microdnf install gzi… 39.7MB &lt;missing&gt; 19 months ago /bin/sh -c #(nop) CMD [\"/bin/bash\"] 0B &lt;missing&gt; 19 months ago /bin/sh -c #(nop) ADD file:9893213a9ea238f53… 111MB . #(nop) 의 의미는 명령어가 아니라는 의미이다. 다시 말해, 실행하는 것이 아닌 것으로 대표적으로 ENV foo=bar 인 경우이다. Image Layer on Docker Hub . Image Layer on Jfrog Artifactory . ",
    "url": "/docs/buildpackage/docker-imagelayer/#layer-%EB%B6%84%EC%84%9D",
    
    "relUrl": "/docs/buildpackage/docker-imagelayer/#layer-분석"
  },"104": {
    "doc": "Docker Image Layer",
    "title": "FROM 구문 부분 비교",
    "content": ". | docker history . | docker hub . | jfrog artifactory . | . ",
    "url": "/docs/buildpackage/docker-imagelayer/#from-%EA%B5%AC%EB%AC%B8-%EB%B6%80%EB%B6%84-%EB%B9%84%EA%B5%90",
    
    "relUrl": "/docs/buildpackage/docker-imagelayer/#from-구문-부분-비교"
  },"105": {
    "doc": "Docker Image Layer",
    "title": "결론",
    "content": "각각의 레이어 갯수가 동일하고 Command 가 동일한 것으로 보아 결국 docker history 로부터 얻어온 값이라는 것을 알 수 있다. ",
    "url": "/docs/buildpackage/docker-imagelayer/#%EA%B2%B0%EB%A1%A0",
    
    "relUrl": "/docs/buildpackage/docker-imagelayer/#결론"
  },"106": {
    "doc": "Ubuntu 에 Docker 설치",
    "title": "Ubuntu 18.04 Docker 설치",
    "content": " ",
    "url": "/docs/buildpackage/docker-install-18-04/#ubuntu-1804-docker-%EC%84%A4%EC%B9%98",
    
    "relUrl": "/docs/buildpackage/docker-install-18-04/#ubuntu-1804-docker-설치"
  },"107": {
    "doc": "Ubuntu 에 Docker 설치",
    "title": "Table of contents",
    "content": ". | Docker 설치 방법 | docker.sock 권한 부여 . | 방법1. docker.sock 권한 변경 | 방법2. Docker 그룹을 만들어서. 사용자 추가하기 | . | . ",
    "url": "/docs/buildpackage/docker-install-18-04/#table-of-contents",
    
    "relUrl": "/docs/buildpackage/docker-install-18-04/#table-of-contents"
  },"108": {
    "doc": "Ubuntu 에 Docker 설치",
    "title": "Docker 설치 방법",
    "content": "apt 패키지 관리자를 이용하여 먼저 패키지 목록 업데이트를 한다. $ sudo apt update -y . 도커CE는 몇가지 패키지에 의존하므로, 아래 4가지 패키지를 설치한다. $ sudo apt install -y apt-transport-https ca-certificates curl software-properties-common . 도커 패키지 저장소를 apt에 등록한다. $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - . 도커CE를 설치한다 . $ sudo apt install -y docker-ce . 도커를 시작한다 . $ sudo systemctl start docker . 도커 상태 확인한다. $ sudo systemctl status docker . 도커 버전 확인한다. $ docker version Client: Docker Engine - Community Version: 24.0.2 API version: 1.43 Go version: go1.20.4 Git commit: cb74dfc Built: Thu May 25 21:52:13 2023 OS/Arch: linux/amd64 Context: default permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/version\": dial unix /var/run/docker.sock: connect: permission denied . 위와 같이 출력되면 도커가 정상적으로 출력된 것이다. ",
    "url": "/docs/buildpackage/docker-install-18-04/#docker-%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95",
    
    "relUrl": "/docs/buildpackage/docker-install-18-04/#docker-설치-방법"
  },"109": {
    "doc": "Ubuntu 에 Docker 설치",
    "title": "docker.sock 권한 부여",
    "content": "Jenkins Script를 통해 docker image를 만들고 배포하려고 할 때, Jenkins Agent를 구동하는 계정이 root가 아닌 일반 사용자계정이면 아래의 오류가 발생한다. Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.38/build?buildargs=%7B%7D&amp;cachefrom=%5B%5D&amp;cgroupparent=&amp;cpuperiod=0&amp;cpuquota=0&amp;cpusetcpus=&amp;cpusetmems=&amp;cpushares=0&amp;dockerfile=Dockerfile&amp;labels=%7B%7D&amp;memory=0&amp;memswap=0&amp;networkmode=default&amp;rm=1&amp;session=klv1s7gcvua6o8j7srtt572zk&amp;target=&amp;ulimits=null&amp;version=1: dial unix /var/run/docker.sock: connect: permission denied . 방법1. docker.sock 권한 변경 . Chmod 666 /var/run/docker.sock . 특이사항 : 권한을 변경한 경우, 일시적인 조치 입니다. docker 서비스를 재시작하면 권한이 660으로 돌아옵니다. 해당 방법은 권장하지 않습니다. 방법2. Docker 그룹을 만들어서. 사용자 추가하기 . $ Sudo groupadd docker $ sudo usermod -aG docker $USER $ newgrp . 해당 사용자 계정이 docker group 권한이 부여되었음을 확인하는 방법 . $ id [testhost@testhost ~]$ id uid=1001(testhost) gid=1002(testhost) groups=1002(testhost),1003(docker) . $sudo chown root:docker /var/run/docker.sock $ systemctl restart docker . 만약 docker 재시작 이후에 권한설정이 돌아온다면? . 파일생성 : /etc/docker/daemon.json . { \"group\" : \"docker\" } . 위 작업이 완료된 이후에 systemctl reboot 실행이 필요하다. ",
    "url": "/docs/buildpackage/docker-install-18-04/#dockersock-%EA%B6%8C%ED%95%9C-%EB%B6%80%EC%97%AC",
    
    "relUrl": "/docs/buildpackage/docker-install-18-04/#dockersock-권한-부여"
  },"110": {
    "doc": "Ubuntu 에 Docker 설치",
    "title": "Ubuntu 에 Docker 설치",
    "content": " ",
    "url": "/docs/buildpackage/docker-install-18-04/",
    
    "relUrl": "/docs/buildpackage/docker-install-18-04/"
  },"111": {
    "doc": "가상머신 이미지 가져오기",
    "title": "Virtual Box 에서 가상머신 이미지 가져오기",
    "content": " ",
    "url": "/docs/buildpackage/docker-install-image-vb/#virtual-box-%EC%97%90%EC%84%9C-%EA%B0%80%EC%83%81%EB%A8%B8%EC%8B%A0-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0",
    
    "relUrl": "/docs/buildpackage/docker-install-image-vb/#virtual-box-에서-가상머신-이미지-가져오기"
  },"112": {
    "doc": "가상머신 이미지 가져오기",
    "title": "Table of contents",
    "content": ". | 실습 전 확인 사항 | VirtualBox 프로그램 설치 . | VirtualBox 설치 | 가상머신 이미지 가져오기 | 가상 머신 시작하기 | 사용자 전환 및 네트워크 연결 체크 | . | NAT 네트워크 생성 | 기타 설정 | putty 터미널 사용하기 . | NatNetwork port-forwarding 설정 | putty 설정 | . | Slave 설정 | . 본 장은 master.ova 이미지 파일에 docker 가 설치되어 있다는 가정하에 docker 실습을 위한 환경 설정을 구성한다. ",
    "url": "/docs/buildpackage/docker-install-image-vb/#table-of-contents",
    
    "relUrl": "/docs/buildpackage/docker-install-image-vb/#table-of-contents"
  },"113": {
    "doc": "가상머신 이미지 가져오기",
    "title": "실습 전 확인 사항",
    "content": "명령 프롬프트에서 systeminfo 명령어를 통해 Hyper-V 요구 사항이 예 로 되어 있는지 확인한다. C:\\Users\\dcjam&gt;systeminfo 호스트 이름: DESKTOP-605KI17 ... 중간 생략 ... Hyper-V 요구 사항: VM 모니터 모드 확장: 예 펌웨어에 가상화 사용: 예 두 번째 수준 주소 변환: 예 데이터 실행 방지 사용 가능: 예 . ",
    "url": "/docs/buildpackage/docker-install-image-vb/#%EC%8B%A4%EC%8A%B5-%EC%A0%84-%ED%99%95%EC%9D%B8-%EC%82%AC%ED%95%AD",
    
    "relUrl": "/docs/buildpackage/docker-install-image-vb/#실습-전-확인-사항"
  },"114": {
    "doc": "가상머신 이미지 가져오기",
    "title": "VirtualBox 프로그램 설치",
    "content": "VirtualBox 설치 . www.virtualbox.org 에서 다운로드 가능하며, VirtualBox-6.1.32-149290-Win.exe 를 실행한다. 가상머신 이미지 가져오기 . 파일 &gt; 가상시스템 가져오기 &gt; master.ova 파일 선택 &gt; 다음 클릭 후 아래를 선택한다. | USB 컨트롤러 : 선택 해제 | MAC 주소 정책 : 모든 네트워크 어댑터의 새 MAC 주소 생성 이후 가져오기 를 클릭한다. | . 가져오기 시 오류 발생하면 C:\\Users\\HPE\\VirtualBox VMs\\master 폴더 삭제 후 다시 진행한다. 가상 머신 시작하기 . Oracle VM VirtualBox 관리자에서 master 가상 머신 선택하여 시작을 클릭한다. 이후 로그인 창에서 worker1 선택 ubuntu 를 패스워드로 하여 로그인 진행한다. | 화면 해상도 변경하기 . | 우측 상단 (전원) –&gt; 드라이버 &amp; 스패너(설정) | Power &gt; Blank screen &gt; Never | Devices -&gt; Resolution &gt; 1600 x 1200 &gt; Apply Changes? (더블클릭) &gt; Apply &gt; Keep Changes . | 바탕화면에 마우스 올려놓으시고 “우클릭” –&gt; Open Terminal | . | . | . 사용자 전환 및 네트워크 연결 체크 . | root(관리자, Administrator) / ubuntu | $ su - root (su, switch user : 사용자 전환) Password: ubuntu # ping google.com -- 이 때는 NAT 네트워크 미생성 단계이므로 연결 안됨 | . ",
    "url": "/docs/buildpackage/docker-install-image-vb/#virtualbox-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%84%A4%EC%B9%98",
    
    "relUrl": "/docs/buildpackage/docker-install-image-vb/#virtualbox-프로그램-설치"
  },"115": {
    "doc": "가상머신 이미지 가져오기",
    "title": "NAT 네트워크 생성",
    "content": ". | NatNetwork 생성 및 네트워크 설정한다. | Oracle VM VirtualBox 관리자에서 파일 &gt; 환경 설정 . | 네트워크 –&gt; [+] | NatNetwork 선택 –&gt; 톱니바퀴 설정 –&gt; 네트워크 CIDR 192.168.137.0/24 입력 &gt; 확인 | . | . | Virtualbox Host-Only ethernet adapter IP 설정 확인 . | Oracle VM VirtualBox 관리자 . | 도구(3개의 선) &gt; 네트워크 &gt; Virtualbox host-only ethernet adapter 선택 | 하단의 어댑터 탭 선택 . | IPv4 주소 : 192.168.56.1 | IPv4 서브넷 마스크 : 255.255.255.0 | . | . | . | 가상 머신 네트워크 인터페이스 타입 변경 . | Oracle VM VirtualBox 관리자 &gt; master 가상 머신 선택 &gt; 네트워크 &gt; 어댑터 1 . | 다음에 연결됨 : NAT 네트워크 선택 | . | . | 네트워크 연결 확인 리눅스 시스템으로 돌아와서 외부 인터넷과 연결 상태 확인 | . # ping google.com [CTRL+C] . | 고정 IP 설정 확인 cat /etc/netplan/00-installer-config.yaml | . | 설정된 IP 확인 ip addr | . ",
    "url": "/docs/buildpackage/docker-install-image-vb/#nat-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%83%9D%EC%84%B1",
    
    "relUrl": "/docs/buildpackage/docker-install-image-vb/#nat-네트워크-생성"
  },"116": {
    "doc": "가상머신 이미지 가져오기",
    "title": "기타 설정",
    "content": "server1:~ # echo \"kernel.watchdog_thresh=20\" &gt; /etc/sysctl.d/99-watchdog_thresh.conf server1:~ # sysctl -p /etc/sysctl.d/99-watchdog_thresh.conf . ",
    "url": "/docs/buildpackage/docker-install-image-vb/#%EA%B8%B0%ED%83%80-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/buildpackage/docker-install-image-vb/#기타-설정"
  },"117": {
    "doc": "가상머신 이미지 가져오기",
    "title": "putty 터미널 사용하기",
    "content": "NatNetwork port-forwarding 설정 . Oracle VM VirtualBox 관리자에서 파일 &gt; 환경설정 &gt; 네트워크 &gt; NatNetwork &gt; 톱니바퀴 (설정) &gt; 포트포워딩 &gt; [+] . 이름 프로토콜 호스트IP 호스트 포트 게스트IP 게스트포트 master TCP 192.168.56.1 101 192.168.137.101 22 . 이후 putty 접속시 방화벽에서 “액세스 허용” 선택한다. putty 설정 . putty 사이트에서 다운로드 및 설치 진행 후 putty.exe 실행한다. Host Name : 192.168.56.1 Port: 101 Terminal &gt; Keyboard &gt; The Backspace key (Control-H) Window &gt; Appearance &gt; Font Settings &gt; Change Window &gt; Colours &gt; Default Foreground (글자색) Default Background(배경색) Session &gt; [Saved Sessions : master] &gt; Save . VirtualBox 가 실행된 상태에서 저장된 세션 연결 정보 더블클릭해서 연결 요청을 할 수 있다. [Accept] login as : root Password : ubuntu . ",
    "url": "/docs/buildpackage/docker-install-image-vb/#putty-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/buildpackage/docker-install-image-vb/#putty-터미널-사용하기"
  },"118": {
    "doc": "가상머신 이미지 가져오기",
    "title": "Slave 설정",
    "content": "06-02-01-01 Kubernetes 실습환경구성 내용 에서 참조할 것. ",
    "url": "/docs/buildpackage/docker-install-image-vb/#slave-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/buildpackage/docker-install-image-vb/#slave-설정"
  },"119": {
    "doc": "가상머신 이미지 가져오기",
    "title": "가상머신 이미지 가져오기",
    "content": " ",
    "url": "/docs/buildpackage/docker-install-image-vb/",
    
    "relUrl": "/docs/buildpackage/docker-install-image-vb/"
  },"120": {
    "doc": "Docker Network",
    "title": "Docker Network",
    "content": " ",
    "url": "/docs/buildpackage/docker-network/",
    
    "relUrl": "/docs/buildpackage/docker-network/"
  },"121": {
    "doc": "Docker Network",
    "title": "Table of contents",
    "content": ". | 도커 네트워크의 동작 원리 . | Bridged Network (default) | 가상 bridge 및 가상 NIC | . | 주요 실습 | . 컨테이너 내에서 생성 또는 변경된 모든 파일은 Read-Write 가능한 Container Layer 에 저장된다. 도커는 Copy-on-write (CoW) 방식으로 파일을 관리한다. 컨테이너가 삭제되면, 데이터가 영구적으로 유지되지 않기 때문에 다른 프로세스나 컨테이너가 해당 데이터를 필요로 하는 경우 사용할 수 없게 된다. 이 때문에 Volume 즉, 영구적인 저장소가 필요하다. ",
    "url": "/docs/buildpackage/docker-network/#table-of-contents",
    
    "relUrl": "/docs/buildpackage/docker-network/#table-of-contents"
  },"122": {
    "doc": "Docker Network",
    "title": "도커 네트워크의 동작 원리",
    "content": "Bridged Network (default) . 도커는 컨테이너에 내부 IP ( default : 172.17.0.0/18) 을 순차적으로 할당하며, 할당된 IP 는 재시작할 때마다 변경될 수 있다. 이 내부 IP 는 도커가 설치된 호스트 내부에서만 사용될 수 있다. 각 컨테이너가 외부와 네트워크 연결을 위해서는 도커가 자동으로 veth 로 시작하는 가상 네트워크 인터페이스를 호스트에 생성한다. docker0 브리지 인터페이스는 각 veth 인터페이스와 바인딩되어 호스트의 네트워크 인터페이스와 연결해주는 역할을 한다. 가상 bridge 및 가상 NIC . [도커 네트워크 구조] . 컨테이너가 외부 네트워크와 통신할 때에는 가상 브리지(bridge) docker0 와 호스트의 물리 NIC 를 통해서 패킷을 전송한다. | NAPT(Network Address Port Translation) | 하나의 IP Address 를 여러 컴퓨터에서 공유하는 기술로 IP Address 뿐 아니라 Port 까지 변환 | Private IP 를 Public IP 로 상호 변환 | . ",
    "url": "/docs/buildpackage/docker-network/#%EB%8F%84%EC%BB%A4-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%9D%98-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC",
    
    "relUrl": "/docs/buildpackage/docker-network/#도커-네트워크의-동작-원리"
  },"123": {
    "doc": "Docker Network",
    "title": "주요 실습",
    "content": "-p 8080:80 : publisher 호스트(수신할 때의 포트 번호) : 컨테이너(내부) . // w1 컨테이너 생성( 외부 포트 8080) root@docker1:~# docker container run -d --name w1 -p 8080:80 nginx 6e8da9ae773109d923f32750f217c4aa1eefde00c04ab878500f596eaeefe44c root@docker1:~# // w2 컨테이너 생성( 외부 포트 8081) root@docker1:~# docker container run -d --name w2 -p 8181:80 nginx 2ee56918d0d5eaf3206f90ab88f6ad7419ab6d8751026c6deb4c7eedf22b1d85 root@docker1:~# root@docker1:~# root@docker1:~# docker container ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2ee56918d0d5 nginx \"/docker-entrypoint.…\" 2 seconds ago Up 2 seconds 0.0.0.0:8181-&gt;80/tcp, :::8181-&gt;80/tcp w2 6e8da9ae7731 nginx \"/docker-entrypoint.…\" 56 seconds ago Up 56 seconds 0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp w1 // 컨테이너 IP 확인 root@docker1:~# docker container inspect w1 | grep IPAddr \"SecondaryIPAddresses\": null, \"IPAddress\": \"172.17.0.2\", \"IPAddress\": \"172.17.0.2\", root@docker1:~# docker container inspect w2 | grep IPAddr \"SecondaryIPAddresses\": null, \"IPAddress\": \"172.17.0.3\", \"IPAddress\": \"172.17.0.3\", root@docker1:~# root@docker1:~# // curl 조회 root@docker1:~# curl -sf http://172.17.0.2 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Welcome to nginx!&lt;/title&gt; &lt;style&gt; html { color-scheme: light dark; } body { width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Welcome to nginx!&lt;/h1&gt; &lt;p&gt;If you see this page, the nginx web server is successfully installed and working. Further configuration is required.&lt;/p&gt; &lt;p&gt;For online documentation and support please refer to &lt;a href=\"http://nginx.org/\"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt; Commercial support is available at &lt;a href=\"http://nginx.com/\"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; root@docker1:~# root@docker1:~# root@docker1:~# curl -sf http://172.17.0.3 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Welcome to nginx!&lt;/title&gt; &lt;style&gt; html { color-scheme: light dark; } body { width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Welcome to nginx!&lt;/h1&gt; &lt;p&gt;If you see this page, the nginx web server is successfully installed and working. Further configuration is required.&lt;/p&gt; &lt;p&gt;For online documentation and support please refer to &lt;a href=\"http://nginx.org/\"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt; Commercial support is available at &lt;a href=\"http://nginx.com/\"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; root@docker1:~# root@docker1:~# // index.html 파일 변경 root@docker1:~# echo Welcome to the w1 service &gt; index.html root@docker1:~# docker container cp index.html w1:/usr/share/nginx/html/index.html root@docker1:~# root@docker1:~# echo Welcome to the w2 service &gt; index.html root@docker1:~# docker container cp index.html w2:/usr/share/nginx/html/index.html root@docker1:~# // curl 조회 root@docker1:~# curl -sf http://172.17.0.2 Welcome to the w1 service root@docker1:~# root@docker1:~# curl -sf http://172.17.0.3 Welcome to the w2 service root@docker1:~# // 외부 환경에서의 조회 root@docker1:~# curl -sf http://192.168.137.101:8080 Welcome to the w1 service root@docker1:~# root@docker1:~# curl -sf http://192.168.137.101:8181 Welcome to the w2 service root@docker1:~# // iptables 조회 (Chain DOCKER) root@docker1:~# iptables -t nat -vnL Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination 3 132 DOCKER all -- * * 0.0.0.0/0 0.0.0.0/0 ADDRTYPE match dst-type LOCAL Chain INPUT (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination Chain OUTPUT (policy ACCEPT 9 packets, 611 bytes) pkts bytes target prot opt in out source destination 2 120 DOCKER all -- * * 0.0.0.0/0 !127.0.0.0/8 ADDRTYPE match dst-type LOCAL Chain POSTROUTING (policy ACCEPT 11 packets, 731 bytes) pkts bytes target prot opt in out source destination 0 0 MASQUERADE all -- * !docker0 172.17.0.0/16 0.0.0.0/0 0 0 MASQUERADE tcp -- * * 172.17.0.2 172.17.0.2 tcp dpt:80 0 0 MASQUERADE tcp -- * * 172.17.0.3 172.17.0.3 tcp dpt:80 Chain DOCKER (2 references) pkts bytes target prot opt in out source destination 0 0 RETURN all -- docker0 * 0.0.0.0/0 0.0.0.0/0 1 60 DNAT tcp -- !docker0 * 0.0.0.0/0 0.0.0.0/0 tcp dpt:8080 to:172.17.0.2:80 1 60 DNAT tcp -- !docker0 * 0.0.0.0/0 0.0.0.0/0 tcp dpt:8181 to:172.17.0.3:80 . // testos 컨테이너 생성 root@docker1:~# docker container run -itd --name=testos centos 6f415171cba166d01d5bcfb918d2c2e19829424960507e3dd7930ba3761e1718 root@docker1:~# // grep 조회 root@docker1:~# docker container inspect testos | grep -C2 UpperDir \"LowerDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af8 1-init/diff:/var/lib/docker/overlay2/94606eea6540dbe5a3f3a03aa3fe4977ac7fcdf1aeba8e1a346cc88209df2bc5/diff\", \"MergedDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af 81/merged\", \"UpperDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af8 1/diff\", \"WorkDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81 /work\" }, root@docker1:~# docker container inspect testos | grep -C2 UpperDir \"LowerDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81-init/diff:/var/lib/docker/overlay2/94606eea6540dbe5a3f3a03aa3fe4977ac7fcdf1aeba8e1a346cc88209df2bc5/diff\", \"MergedDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81/merged\", \"UpperDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81/diff\", \"WorkDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81/work\" }, root@docker1:~# // 호스트에서 UpperDir 경로 조회 및 파일 생성 root@docker1:~# cd /var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81/diff root@docker1:/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81/diff# touch containerfile root@docker1:/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81/diff# ll total 8 drwxr-xr-x 2 root root 4096 Jan 8 12:57 ./ drwx--x--- 5 root root 4096 Jan 8 12:56 ../ -rw-r--r-- 1 root root 0 Jan 8 12:57 containerfile root@docker1:/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f // testos 컨테이너에서 파일 생성 확인 root@docker1:/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81/diff# docker container exec testos /bin/ls -l containerfile -rw-r--r-- 1 root root 0 Jan 8 12:57 containerfile . ",
    "url": "/docs/buildpackage/docker-network/#%EC%A3%BC%EC%9A%94-%EC%8B%A4%EC%8A%B5",
    
    "relUrl": "/docs/buildpackage/docker-network/#주요-실습"
  },"124": {
    "doc": "Docker Status",
    "title": "Docker Status",
    "content": ". 도커 컨테이너의 상태와 관련하여 정리한다. [도커 컨테이너 상태] . ",
    "url": "/docs/buildpackage/docker-status/",
    
    "relUrl": "/docs/buildpackage/docker-status/"
  },"125": {
    "doc": "Docker Volume",
    "title": "Docker Volume",
    "content": " ",
    "url": "/docs/buildpackage/docker-volume/",
    
    "relUrl": "/docs/buildpackage/docker-volume/"
  },"126": {
    "doc": "Docker Volume",
    "title": "Table of contents",
    "content": ". | 컨테이너의 기본 UpperDir 위치 확인하기 | 도커 마운트 타입 . | bind mount | volume . | 볼륨 자동 생성 | named volume 생성 | 볼륨 컨테이너 사용하기 | . | tmpfs | . | . 컨테이너 내에서 생성 또는 변경된 모든 파일은 Read-Write 가능한 Container Layer 에 저장된다. 도커는 Copy-on-write (CoW) 방식으로 파일을 관리한다. 컨테이너가 삭제되면, 데이터가 영구적으로 유지되지 않기 때문에 다른 프로세스나 컨테이너가 해당 데이터를 필요로 하는 경우 사용할 수 없게 된다. 이 때문에 Volume 즉, 영구적인 저장소가 필요하다. ",
    "url": "/docs/buildpackage/docker-volume/#table-of-contents",
    
    "relUrl": "/docs/buildpackage/docker-volume/#table-of-contents"
  },"127": {
    "doc": "Docker Volume",
    "title": "컨테이너의 기본 UpperDir 위치 확인하기",
    "content": "// testos 컨테이너 생성 root@docker1:~# docker container run -itd --name=testos centos 6f415171cba166d01d5bcfb918d2c2e19829424960507e3dd7930ba3761e1718 root@docker1:~# // grep 조회 root@docker1:~# docker container inspect testos | grep -C2 UpperDir \"LowerDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af8 1-init/diff:/var/lib/docker/overlay2/94606eea6540dbe5a3f3a03aa3fe4977ac7fcdf1aeba8e1a346cc88209df2bc5/diff\", \"MergedDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af 81/merged\", \"UpperDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af8 1/diff\", \"WorkDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81 /work\" }, root@docker1:~# docker container inspect testos | grep -C2 UpperDir \"LowerDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81-init/diff:/var/lib/docker/overlay2/94606eea6540dbe5a3f3a03aa3fe4977ac7fcdf1aeba8e1a346cc88209df2bc5/diff\", \"MergedDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81/merged\", \"UpperDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81/diff\", \"WorkDir\": \"/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81/work\" }, root@docker1:~# // 호스트에서 UpperDir 경로 조회 및 파일 생성 root@docker1:~# cd /var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81/diff root@docker1:/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81/diff# touch containerfile root@docker1:/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81/diff# ll total 8 drwxr-xr-x 2 root root 4096 Jan 8 12:57 ./ drwx--x--- 5 root root 4096 Jan 8 12:56 ../ -rw-r--r-- 1 root root 0 Jan 8 12:57 containerfile root@docker1:/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f // testos 컨테이너에서 파일 생성 확인 root@docker1:/var/lib/docker/overlay2/180352a45d8b916b4c541a2cbd908ff372e9bb4ab3e0c880b476f43fd429af81/diff# docker container exec testos /bin/ls -l containerfile -rw-r--r-- 1 root root 0 Jan 8 12:57 containerfile . ",
    "url": "/docs/buildpackage/docker-volume/#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%9D%98-%EA%B8%B0%EB%B3%B8-upperdir-%EC%9C%84%EC%B9%98-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/buildpackage/docker-volume/#컨테이너의-기본-upperdir-위치-확인하기"
  },"128": {
    "doc": "Docker Volume",
    "title": "도커 마운트 타입",
    "content": ". [Docker Mount Type] . bind mount . 도커 초기에 사용하던 방식이며, 호스트 싯스템의 전체 경로를 통해 참조됨에 따라 호스트 시스템의 File System 디렉터리 구조에 의존적이다. root@docker1:~# mkdir /tmp/hostdir root@docker1:~# mkdir /tmp/readonly root@docker1:~# echo writable &gt; /tmp/hostdir/file1 root@docker1:~# echo readonly &gt; /tmp/readonly/file2 // container_dir 는 기본, read_dir 는 read only 로 설정한다. root@docker1:~# docker container run -it -v /tmp/hostdir:/container_dir -v /tmp/readonly:/read_dir:ro --name test01 centos // 컨테이너에 바인딩 확인 [root@9dc954f8a1fa /]# cat /container_dir/file1 writable [root@9dc954f8a1fa /]# cat /read_dir/file2 readonly // 컨테이너 내 container_dir 폴더에 쓰기 가능 [root@9dc954f8a1fa /]# echo Hello, file1 &gt; /container_dir/file1 [root@9dc954f8a1fa /]# cat /container_dir/file1 Hello, file1 // 컨테이너 내 read_dir 폴더에 쓰기 불가 [root@9dc954f8a1fa /]# echo Hello, file2 &gt; /read_dir/file2 bash: /read_dir/file2: Read-only file system [root@9dc954f8a1fa /]# echo Hello, file3 &gt; /read_dir/file3 bash: /read_dir/file3: Read-only file system [root@9dc954f8a1fa /]# echo Hello, file3 &gt; /container_dir/file3 [root@9dc954f8a1fa /]# echo Hello, file4 &gt; /file4 [root@9dc954f8a1fa /]# exit exit root@docker1:~# docker container rm test01 test01 // 컨테이너에서 작성한 file3 바인딩 확인 root@docker1:~# ls /tmp/hostdir file1 file3 root@docker1:~# ls /tmp/readonly file2 . 컨테이너의 바인딩 정보는 docker container inspect 에서 Mounts 키워드로 확인할 수 있다. root@docker1:~# docker container run -it -v /tmp/hostdir:/container_dir -v /tmp/readonly:/read_dir:ro --name test01 centos [root@6c8284413747 /]# root@docker1:~# root@docker1:~# docker container inspect test01 | grep -A 20 Mounts \"Mounts\": [ { \"Type\": \"bind\", \"Source\": \"/tmp/hostdir\", \"Destination\": \"/container_dir\", \"Mode\": \"\", \"RW\": true, \"Propagation\": \"rprivate\" }, { \"Type\": \"bind\", \"Source\": \"/tmp/readonly\", \"Destination\": \"/read_dir\", \"Mode\": \"ro\", // read-only \"RW\": false, \"Propagation\": \"rprivate\" } ], \"Config\": { \"Hostname\": \"6c8284413747\", \"Domainname\": \"\", . volume . docker voulme create 명령을 통해서 미리 생성되거나 컨테이너가 생성될 때 생성된 볼륨을 컨테이너에 마운트해서 사용가능하다. 볼륨의 기본 경로는 /var/lib/docker/volumns/ 에 위치하며 컨테이너가 삭제/정지 되더라도 지워지지 않는다. 삭제시에는 docker volume rm 을 통해 삭제 가능하다. volume 마운트 타입 구성 방법에는 아래와 같이 3가지가 있다. 볼륨 자동 생성 . -v 옵션으로 컨테이너 생성 시 자동 생성되면 이름이 길어 식별하기 어렵다. root@docker1:~# docker container run -it -v /volume --name test02 centos // 컨테이너 /volume 에 passwd 파일 붙여넣기 [root@3d88f4ab4eaa /]# ls /volume/ [root@3d88f4ab4eaa /]# cp /etc/passwd /volume [root@3d88f4ab4eaa /]# ls /volume/ passwd [root@3d88f4ab4eaa /]# // detach 모드로 전환 [root@3d88f4ab4eaa /]# root@docker1:~# // volume 정보 조회 root@docker1:~# docker volume ls DRIVER VOLUME NAME local fba67fc43867c48a032bd2f778857feeb48cf3f79e8d2b1ff15b83edda28853d root@docker1:~# // volume 상세 정보 조회 root@docker1:~# docker volume inspect fba67fc43867c48a032bd2f778857feeb48cf3f79e8d2b1ff15b83edda28853d [ { \"CreatedAt\": \"2023-01-08T13:39:29Z\", \"Driver\": \"local\", \"Labels\": null, \"Mountpoint\": \"/var/lib/docker/volumes/fba67fc43867c48a032bd2f778857feeb48cf3f79e8d2b1ff15b83edda28853d/_data\", \"Name\": \"fba67fc43867c48a032bd2f778857feeb48cf3f79e8d2b1ff15b83edda28853d\", \"Options\": null, \"Scope\": \"local\" } ] // 호스트에서의 volume 데이터 확인 root@docker1:~# ls /var/lib/docker/volumes/fba67fc43867c48a032bd2f778857feeb48cf3f79e8d2b1ff15b83edda28853d/_data passwd // 컨테이너 마운트 정보 조회 root@docker1:~# docker container inspect test02 | grep -A 10 Mounts \"Mounts\": [ { \"Type\": \"volume\", \"Name\": \"fba67fc43867c48a032bd2f778857feeb48cf3f79e8d2b1ff15b83edda28853d\", \"Source\": \"/var/lib/docker/volumes/fba67fc43867c48a032bd2f778857feeb48cf3f79e8d2b1ff15b83edda28853d/_data\", \"Destination\": \"/volume\", \"Driver\": \"local\", \"Mode\": \"\", \"RW\": true, \"Propagation\": \"\" } . named volume 생성 . 여러 컨테이너 간에 볼륨을 보다 안전하게 공유할 수 있으며 암호화 가능하다. 컨텐츠를 사전에 채워 놓을 수 있다. root@docker1:~# docker volume ls DRIVER VOLUME NAME local fba67fc43867c48a032bd2f778857feeb48cf3f79e8d2b1ff15b83edda28853d root@docker1:~# // persistvol 볼륨 생성 volume create persistvol persistvol root@docker1:~# docker volume ls DRIVER VOLUME NAME local fba67fc43867c48a032bd2f778857feeb48cf3f79e8d2b1ff15b83edda28853d local persistvol // persistvol 볼륨 상세 조회 root@docker1:~# docker volume inspect persistvol [ { \"CreatedAt\": \"2023-01-08T13:52:07Z\", \"Driver\": \"local\", \"Labels\": {}, \"Mountpoint\": \"/var/lib/docker/volumes/persistvol/_data\", \"Name\": \"persistvol\", \"Options\": {}, \"Scope\": \"local\" } ] // persistvol 볼륨을 참조하는 vol_container 컨테이너 생성 root@docker1:~# docker container run -it --name vol_container -v persistvol:/container centos [root@7ccd49ed19a5 /]# ls /container [root@7ccd49ed19a5 /]# echo Hello, a &gt; /container/a [root@7ccd49ed19a5 /]# ls /container a [root@7ccd49ed19a5 /]# root@docker1:~# root@docker1:~# . 볼륨 컨테이너 사용하기 . -v 옵션으로 볼륨을 사용하는 컨테이너를 다른 컨테이너와 공유할 수 있다. 컨테이너 생성 시 --volumes-from 옵션을 설정하면 -v 옵션을 적용한 컨테이너의 볼륨 디렉토리를 공유할 수 있다. 또한 볼륨 컨테이너가 꺼져 있어도 사용할 수 있다. // vol_container 컨테이너의 볼륨을 참조하는 data_container 컨테이너 생성 root@docker1:~# docker container run -it --volumes-from vol_container --name data_container centos // 동일 데이터 확인 [root@41f2f04a995d /]# cat /container/a Hello, a [root@41f2f04a995d /]# echo Hello, yumi &gt; /container/a [root@41f2f04a995d /]# cat /container/a Hello, yumi [root@41f2f04a995d /]# root@docker1:~# // data_container 가 참조하는 볼륨 상세 조회 root@docker1:~# docker container inspect data_container | grep -A 10 Mounts \"Mounts\": [ { \"Type\": \"volume\", \"Name\": \"persistvol\", \"Source\": \"/var/lib/docker/volumes/persistvol/_data\", \"Destination\": \"/container\", \"Driver\": \"local\", \"Mode\": \"\", \"RW\": true, \"Propagation\": \"\" } root@docker1:~# . tmpfs . 호스트의 메모리 공간에 저장되기 때문에 컨테이너 정지 시 삭제되나, 빠른 I/O 목적으로 할 경우에는 장점이 된다. ",
    "url": "/docs/buildpackage/docker-volume/#%EB%8F%84%EC%BB%A4-%EB%A7%88%EC%9A%B4%ED%8A%B8-%ED%83%80%EC%9E%85",
    
    "relUrl": "/docs/buildpackage/docker-volume/#도커-마운트-타입"
  },"129": {
    "doc": "Docker",
    "title": "Docker",
    "content": " ",
    "url": "/docs/buildpackage/docker/",
    
    "relUrl": "/docs/buildpackage/docker/"
  },"130": {
    "doc": "DevOps Exercise",
    "title": "Devops Exercise",
    "content": " ",
    "url": "/docs/devops/exercise/#devops-exercise",
    
    "relUrl": "/docs/devops/exercise/#devops-exercise"
  },"131": {
    "doc": "DevOps Exercise",
    "title": "Table of contents",
    "content": ". | 아키텍처 구성 방안 | 구성을 위한 설정 . | SpringBoot (Vue.js) 프로젝트 생성하기 | Github Repository 의 webhook 설정하기 | Jenkins 설정하기 | Artifactory 설정하기 (Docker hub, Jfrog) | . | . DevOps 주요 기능을 로컬 환경에서 구성 및 실습을 위한 아키텍처를 구성하여 목적 및 기능을 확인한다. ",
    "url": "/docs/devops/exercise/#table-of-contents",
    
    "relUrl": "/docs/devops/exercise/#table-of-contents"
  },"132": {
    "doc": "DevOps Exercise",
    "title": "아키텍처 구성 방안",
    "content": ". DevOps Architecture On Local environment . ",
    "url": "/docs/devops/exercise/#%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EA%B5%AC%EC%84%B1-%EB%B0%A9%EC%95%88",
    
    "relUrl": "/docs/devops/exercise/#아키텍처-구성-방안"
  },"133": {
    "doc": "DevOps Exercise",
    "title": "구성을 위한 설정",
    "content": "SpringBoot (Vue.js) 프로젝트 생성하기 . Github Repository 의 webhook 설정하기 . Jenkins 설정하기 . Artifactory 설정하기 (Docker hub, Jfrog) . ",
    "url": "/docs/devops/exercise/#%EA%B5%AC%EC%84%B1%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/devops/exercise/#구성을-위한-설정"
  },"134": {
    "doc": "DevOps Exercise",
    "title": "DevOps Exercise",
    "content": " ",
    "url": "/docs/devops/exercise/",
    
    "relUrl": "/docs/devops/exercise/"
  },"135": {
    "doc": "Flutter 기본 개념",
    "title": "Flutter 기본 개념",
    "content": " ",
    "url": "/docs/programming-language/flutter-basic/",
    
    "relUrl": "/docs/programming-language/flutter-basic/"
  },"136": {
    "doc": "Flutter 기본 개념",
    "title": "Table of contents",
    "content": ". | 주요 에러 해결 방법 | don't support null safety: - package:english_words 에러 | 코드 정렬 | Flutter Layout 학습 사이트 | Const 와 Final 의 차이점 | 자료구조 종류 | Thread | Future, Async, await | . 앱을 구축하는데 있어서 주된 걸림돌인 Android, iOS 등의 상이한 아키텍쳐가 있었으나, 구글에서 개발한 Flutter 는 이를 보완하고 보다 직관적으로 개발을 할 수 있게 한다. 기본적인 내용 및 개발 시 참조해야 할 만한 사항을 정리하고자 합니다.. ",
    "url": "/docs/programming-language/flutter-basic/#table-of-contents",
    
    "relUrl": "/docs/programming-language/flutter-basic/#table-of-contents"
  },"137": {
    "doc": "Flutter 기본 개념",
    "title": "주요 에러 해결 방법",
    "content": " ",
    "url": "/docs/programming-language/flutter-basic/#%EC%A3%BC%EC%9A%94-%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95",
    
    "relUrl": "/docs/programming-language/flutter-basic/#주요-에러-해결-방법"
  },"138": {
    "doc": "Flutter 기본 개념",
    "title": "don't support null safety: - package:english_words 에러",
    "content": ". | Run –&gt; Edit Configurations –&gt; Add Additional Run args 에서 --no-sound-null-safety 를 추가한다. | . ",
    "url": "/docs/programming-language/flutter-basic/#dont-support-null-safety---packageenglish_words-%EC%97%90%EB%9F%AC",
    
    "relUrl": "/docs/programming-language/flutter-basic/#dont-support-null-safety---packageenglish_words-에러"
  },"139": {
    "doc": "Flutter 기본 개념",
    "title": "코드 정렬",
    "content": ". | 단축키 Ctl+Alt+L을 누르면 아래와 같이 자동정렬이 됩니다. | . ",
    "url": "/docs/programming-language/flutter-basic/#%EC%BD%94%EB%93%9C-%EC%A0%95%EB%A0%AC",
    
    "relUrl": "/docs/programming-language/flutter-basic/#코드-정렬"
  },"140": {
    "doc": "Flutter 기본 개념",
    "title": "Flutter Layout 학습 사이트",
    "content": ". | https://medium.com/flutter-community/flutter-layout-cheat-sheet-5363348d037e | . ",
    "url": "/docs/programming-language/flutter-basic/#flutter-layout-%ED%95%99%EC%8A%B5-%EC%82%AC%EC%9D%B4%ED%8A%B8",
    
    "relUrl": "/docs/programming-language/flutter-basic/#flutter-layout-학습-사이트"
  },"141": {
    "doc": "Flutter 기본 개념",
    "title": "Const 와 Final 의 차이점",
    "content": ". | Cont 변수 : 컴파일 시 상수가 된다. 런타임 시에도 변하지 않는다. (Compile-time Constant) | Final 변수 : 런타임 시 상수가 된다. 변경 시, reBuild 되어야 한다. (Run-time Constant) | . ",
    "url": "/docs/programming-language/flutter-basic/#const-%EC%99%80-final-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90",
    
    "relUrl": "/docs/programming-language/flutter-basic/#const-와-final-의-차이점"
  },"142": {
    "doc": "Flutter 기본 개념",
    "title": "자료구조 종류",
    "content": ". | List, Set | . ",
    "url": "/docs/programming-language/flutter-basic/#%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%A2%85%EB%A5%98",
    
    "relUrl": "/docs/programming-language/flutter-basic/#자료구조-종류"
  },"143": {
    "doc": "Flutter 기본 개념",
    "title": "Thread",
    "content": ". | 프로세스 내에서 실행되는 흐름의 단위 | Dart 는 싱글스레드로 운영되는 언어 | . ",
    "url": "/docs/programming-language/flutter-basic/#thread",
    
    "relUrl": "/docs/programming-language/flutter-basic/#thread"
  },"144": {
    "doc": "Flutter 기본 개념",
    "title": "Future, Async, await",
    "content": ". | Future 클래스는 비동기 작업을 할 때 사용 | Future 는 일정 소요시간 후에 실제 데이터나 에러를 반환 | async 클래스는 await 메서드를 가지고 있음 . | await 로 선언된 메서드는 응답이 처리될 때까지 대기 | . | 예제 | . import 'dart:io'; void main() { showData(); } void showData() async { startTask(); String account = await accessData(); fetchData(account); } void startTask() { String info1 = '요청수행 시작'; print(info1); } Future&lt;String&gt; accessData() async { String account = ''; Duration time = Duration(seconds: 3); if (time.inSeconds &gt; 2) { // sleep(time); await Future.delayed(time, () { account = '8500만원'; print(account); }); } else { String info2 = '데이터를 가져왔습니다'; print(info2); } return account; } void fetchData(String account) { String info3 = '잔액은 $account 원입니다..'; print(info3); } . 출력 . 요청수행 시작 8500만원 잔액은 8500만원 원입니다.. ",
    "url": "/docs/programming-language/flutter-basic/#future-async-await",
    
    "relUrl": "/docs/programming-language/flutter-basic/#future-async-await"
  },"145": {
    "doc": "Toy - EarthToday",
    "title": "Toy - EarthToday",
    "content": ". 우주의 L1 영역에 위치한 DSCOVR 위성의 지구 이미지를 확인할 수 있습니다. 주요 기능 . | 날짜 선택, 날짜별 이미지 수 조회 | 시간별 애니매이션(플레이 기능, 속도 조절) | 특정 이미지 확대 | . 개발 기간 . | 2022-03-23 ~ 2022-04-04 (13일) | . App URL : EarthToday - DSCOVR’s EPIC . 관련 API . | NASA | . 주요 화면 . ",
    "url": "/docs/programming-language/flutter-earth/",
    
    "relUrl": "/docs/programming-language/flutter-earth/"
  },"146": {
    "doc": "Toy - 무선국전파노출지수",
    "title": "Toy - 무선국전파노출지수",
    "content": ". 지역별 무선국 전파 노출 지수를 확인할 수 있습니다. 주요 기능 . 현재 지역 또는 선택한 지역 내 주어진 반경의 각 무선국 별 전파 강도 및 전파 노출지수를 확인합니다. | 선택한 지역 내 무선국 측정 정보 조회 | 내 주변 찾기 조회 | 무선국별 측정 전파 강도 및 전파노출지수 조회 | . 개발 기간 . | 2022-03-12 ~ 2022-03-20 (8일) | . App URL : 무선국전파노출지수 . 관련 API . | 한국방송통신전파진흥원_의무측정무선국에_따른_전자파_노출지수 | . 주요 화면 . ",
    "url": "/docs/programming-language/flutter-emf/",
    
    "relUrl": "/docs/programming-language/flutter-emf/"
  },"147": {
    "doc": "Toy - 전기차충전소 위치찾기",
    "title": "Toy - 전기차 충전소 위치찾기",
    "content": ". 전기자동차 충전소 위치와 상태를 확인할 수 있습니다. 주요 기능 . 시도를 선택하거나 내 주변을 탐색함으로서 전기 자동차 충전소 위치 및 상태를 확인할 수 있습니다. | 선택한 시도 기준 전기차 충전소 위치 조회 | 내 주변 찾기 조회 | 충전기 상태 및 기타 정보 조회 | 관심 충전소 등록 기능 | . 개발 기간 . | 2022-03-02 ~ 2022-03-12 (10일) | . App URL : 전기차충전소위치찾기 . 관련 API . | 한국환경공단_전기자동차 충전소 정보 | . 주요 화면 . ",
    "url": "/docs/programming-language/flutter-evcharger/#toy---%EC%A0%84%EA%B8%B0%EC%B0%A8-%EC%B6%A9%EC%A0%84%EC%86%8C-%EC%9C%84%EC%B9%98%EC%B0%BE%EA%B8%B0",
    
    "relUrl": "/docs/programming-language/flutter-evcharger/#toy---전기차-충전소-위치찾기"
  },"148": {
    "doc": "Toy - 전기차충전소 위치찾기",
    "title": "Toy - 전기차충전소 위치찾기",
    "content": " ",
    "url": "/docs/programming-language/flutter-evcharger/",
    
    "relUrl": "/docs/programming-language/flutter-evcharger/"
  },"149": {
    "doc": "Flutter 주요 예제",
    "title": "Flutter 주요 예제",
    "content": " ",
    "url": "/docs/programming-language/flutter-example/",
    
    "relUrl": "/docs/programming-language/flutter-example/"
  },"150": {
    "doc": "Flutter 주요 예제",
    "title": "Table of contents",
    "content": ". | 기본 레이아웃 | App Bar 메뉴 | Drawer 메뉴 | Navigator 페이지 이동 | Multi 페이지 구성 및 이동 | 스낵바 표시 및 스낵바 버튼 페이지 이동 | 버튼 종류 및 표현 | 예제) Dice Game | http &amp; json 데이터 가져오기 | Spin 기능 및 날씨앱 (최종) | Stream Builder 예제 | . 플러터를 학습하면서 주요한 내용을 정리하였으며 주요 예제 및 코드는 코딩쉐프 님의 유튜브 동영상을 참고로 하였습니다. 상세한 설명에 감사하다는 말씀을 드리고 싶습니다. 기본 레이아웃 . import 'package:flutter/material.dart'; void main() =&gt; runApp(MyApp()); class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( debugShowCheckedModeBanner: false, title: 'BBANTO', home: Grade(), ); } } class Grade extends StatelessWidget { const Grade({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return Scaffold( backgroundColor: Colors.amber[800], appBar: AppBar( title: Text('BBANTO'), backgroundColor: Colors.amber[700], centerTitle: true, elevation: 0.0, ), body: Padding( padding: EdgeInsets.fromLTRB(30.0, 40.0, 0.0, 0.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Center( child: CircleAvatar( backgroundImage: AssetImage( 'assets/bc9.png' ), radius: 60.0, ), ), Divider( height: 60.0, color: Colors.grey[850], thickness: 0.5, endIndent: 30.0, ), Text('NAME', style: TextStyle( color: Colors.white, letterSpacing: 2.0 ) ), SizedBox( height: 10.0, ), Text('BBANTO', style: TextStyle( color: Colors.white, letterSpacing: 2.0, fontSize: 28.0, fontWeight: FontWeight.bold ),), SizedBox( height: 30, ), Text('BBANTOPOWER LEVEL', style: TextStyle( color: Colors.white, letterSpacing: 2.0 ) ), SizedBox( height: 10.0, ), Text('14', style: TextStyle( color: Colors.white, letterSpacing: 2.0, fontSize: 28.0, fontWeight: FontWeight.bold ), ), SizedBox( height: 30.0, ), Row( children: [ Icon(Icons.check_circle_outline), SizedBox( width: 10.0, ), Text('using lightsaber', style: TextStyle( fontSize: 16.0, letterSpacing: 1.0, ),), ], ), Row( children: [ Icon(Icons.check_circle_outline), SizedBox( width: 10.0, ), Text('face hero tatoo', style: TextStyle( fontSize: 16.0, letterSpacing: 1.0, ),), ], ), Row( children: [ Icon(Icons.check_circle_outline), SizedBox( width: 10.0, ), Text('fire flagem', style: TextStyle( fontSize: 16.0, letterSpacing: 1.0, ),), ], ), Center( child: CircleAvatar( backgroundImage: AssetImage( 'assets/bcw.jpg' ), radius: 40.0, backgroundColor: Colors.amber[800], ), ) ], ), ), ); } } . App Bar 메뉴 . import 'package:flutter/material.dart'; void main() =&gt; runApp(MyApp()); class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( title: 'AppBar', theme: ThemeData( primarySwatch: Colors.red ), home: MyPage(), ); } } class MyPage extends StatelessWidget { const MyPage({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text('Appbar icon menu'), centerTitle: true, elevation: 0.0, leading: IconButton( icon: Icon(Icons.menu), onPressed: () { print('menu button clicked'); }, ), actions: [ IconButton( icon: Icon(Icons.shopping_cart), onPressed: () { print('shopping cart button clicked'); }, ), IconButton( icon: Icon(Icons.search), onPressed: () { print('search button clicked'); }, ) ], ), ); } } . Drawer 메뉴 . import 'package:flutter/material.dart'; void main() =&gt; runApp(MyApp()); class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( title: 'AppBar', theme: ThemeData( primarySwatch: Colors.red ), home: MyPage(), ); } } class MyPage extends StatelessWidget { const MyPage({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text('Appbar icon menu'), centerTitle: true, elevation: 0.0, actions: [ IconButton( icon: Icon(Icons.shopping_cart), onPressed: () { print('shopping cart button clicked'); }, ), IconButton( icon: Icon(Icons.search), onPressed: () { print('search button clicked'); }, ) ], ), drawer: Drawer( child: ListView( padding: EdgeInsets.zero, children: [ UserAccountsDrawerHeader( currentAccountPicture: CircleAvatar( backgroundImage: AssetImage('assets/bc9.png'), backgroundColor: Colors.white, ), otherAccountsPictures: [ CircleAvatar( backgroundImage: AssetImage('assets/bcw.jpg'), backgroundColor: Colors.white, ), // CircleAvatar( // backgroundImage: AssetImage('assets/bcw.jpg'), // backgroundColor: Colors.white, // ) ], accountName: Text('BAANTO'), accountEmail: Text('aaa@gmail.com'), onDetailsPressed: (){ print('arrow is clicked..'); }, decoration: BoxDecoration( color: Colors.red[200], borderRadius: BorderRadius.only( bottomLeft: Radius.circular(40.0), bottomRight: Radius.circular(40.0), ) ), ), ListTile( leading: Icon(Icons.home, color: Colors.grey[800]), title: Text('Home'), onTap: () { print('Home is clicked..'); }, trailing: Icon(Icons.add), ), ListTile( leading: Icon(Icons.settings, color: Colors.grey[800]), title: Text('Setting'), onTap: () { print('Setting is clicked..'); }, trailing: Icon(Icons.add), ), ListTile( leading: Icon(Icons.question_answer, color: Colors.grey[800]), title: Text('Q&amp;A'), onTap: () { print('Q&amp;A is clicked..'); }, trailing: Icon(Icons.add), ) ], ), ), ); } } . Navigator 페이지 이동 . import 'package:flutter/material.dart'; import 'package:fluttertoast/fluttertoast.dart'; void main() =&gt; runApp(MyApp()); class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( title: 'SnackBar', theme: ThemeData(primarySwatch: Colors.blue), home: FirstPage(), ); } } class FirstPage extends StatelessWidget { const FirstPage({Key? key}) : super(key: key); @override Widget build(BuildContext context2) { return Scaffold( appBar: AppBar( title: Text('frist page'), ), body: Center( child: RaisedButton( child: Text('Go to the second page'), onPressed: () { Navigator.push( context2, MaterialPageRoute(builder: (_) =&gt; SecondPage())); }, ), ), ); } } class SecondPage extends StatelessWidget { const SecondPage({Key? key}) : super(key: key); @override Widget build(BuildContext ctx) { return Scaffold( appBar: AppBar( title: Text('second page'), ), body: Center( child: RaisedButton( child: Text('Go to the first page'), onPressed: () { Navigator.pop(ctx); }, ), ), ); } } . Multi 페이지 구성 및 이동 . main.dart . import 'package:coding_chef1st/ScreenB.dart'; import 'package:coding_chef1st/ScreenC.dart'; import 'package:flutter/material.dart'; import 'package:coding_chef1st/ScreenA.dart'; void main() =&gt; runApp(MyApp()); class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( initialRoute: '/', routes: { '/' : (context) =&gt; ScreenA(), '/b': (context) =&gt; ScreenB(), '/c': (context) =&gt; ScreenC() }, ); } } . ScreenA.dart . import 'package:flutter/material.dart'; class ScreenA extends StatelessWidget { const ScreenA({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: Text('ScreenA')), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ RaisedButton( color: Colors.red, child: Text('Go to Screen B'), onPressed: (){ Navigator.pushNamed(context, '/b'); }, ), RaisedButton( color: Colors.red, child: Text('Go to Screen C'), onPressed: (){ Navigator.pushNamed(context, '/c'); }, ) ], ) ), ); } } . ScreenB.dart . import 'package:flutter/material.dart'; class ScreenB extends StatelessWidget { const ScreenB({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: Text('ScreenB')), body: Center( child: Text( 'ScreenB', style: TextStyle(fontSize: 24.0), ), ), ); } } . ScreenC.dart . import 'package:flutter/material.dart'; class ScreenC extends StatelessWidget { const ScreenC({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: Text('ScreenC')), body: Center( child: Text( 'ScreenC', style: TextStyle(fontSize: 24.0), ), ), ); } } . 스낵바 표시 및 스낵바 버튼 페이지 이동 . import 'package:flutter/material.dart'; void main() =&gt; runApp(MyApp()); class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( theme: ThemeData(primarySwatch: Colors.blue), home: MyPage(), ); } } class MyPage extends StatelessWidget { const MyPage({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: Text('Scaffold Messenaer')), body: HomeBody(), floatingActionButton: FloatingActionButton( onPressed: () { ScaffoldMessenger.of(context).showSnackBar(SnackBar( content: Text('Like a new snalckslfdsf'), duration: Duration(seconds: 5), action: SnackBarAction( label: 'Undo', onPressed: () { Navigator.push(context, MaterialPageRoute(builder: (context) =&gt; ThirdPage())); }, ), )); }, child: Icon(Icons.thumb_up), ), ); } } class HomeBody extends StatelessWidget { const HomeBody({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return Center( child: ElevatedButton( child: Text('Go to second page'), onPressed: () { Navigator.push( context, MaterialPageRoute(builder: (context) =&gt; SecondPage())); }, ), ); } } class SecondPage extends StatelessWidget { const SecondPage({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: Text('Second Page')), body: Center( child: Text( \"종하요가 추가되었습니다\", style: TextStyle(fontSize: 20.0, color: Colors.redAccent), ), )); } } class ThirdPage extends StatelessWidget { @override Widget build(BuildContext context) { return ScaffoldMessenger( child: Scaffold( appBar: AppBar(title: Text('third Page')), body: Builder(builder: (context) { return Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ Text( \"종하요를 취소하시겠습니다.?\", style: TextStyle(fontSize: 20.0, color: Colors.yellow), ), ElevatedButton( onPressed: () { ScaffoldMessenger.of(context).showSnackBar(SnackBar( content: Text(\"좋아요가 취소되었습니다.\"), duration: Duration(seconds: 3), )); }, child: Text(\"취소하기\")) ], ), ); })), ); } } . 버튼 종류 및 표현 . import 'package:flutter/material.dart'; void main() =&gt; runApp(MyApp()); class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( theme: ThemeData(primarySwatch: Colors.blue), home: MyButtons(), ); } } class MyButtons extends StatelessWidget { const MyButtons({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text('Buttons'), centerTitle: true, ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ TextButton( // onPressed: () { // print(\"text button clicked\"); // }, onLongPress: () { print(\"text button clicked\"); }, child: Text('TextButton', style: TextStyle(fontSize: 20.0)), style: TextButton.styleFrom( primary: Colors.red, // backgroundColor: Colors.blue ), onPressed: () {}, ), ElevatedButton( onPressed: null, child: Text('ElevatedButton'), style: ElevatedButton.styleFrom( primary: Colors.orangeAccent, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(15.0), ), elevation: 0.0), ), OutlinedButton( onPressed: () { print('OutLIned Button'); }, child: Text('OutLinedButton'), style: OutlinedButton.styleFrom( primary: Colors.green, side: BorderSide(color: Colors.black87, width: 2.0)), ), TextButton.icon( onPressed: () { print('Icon Button'); }, icon: Icon( Icons.home, ), label: Text('Go to Home'), style: OutlinedButton.styleFrom( primary: Colors.black), ), ButtonBar( alignment: MainAxisAlignment.center, buttonPadding: EdgeInsets.all(20), children: [ TextButton(onPressed: (){}, child: Text('Text Button')), ElevatedButton(onPressed: (){}, child: Text('ElevatedButton')) ], ) ], ), ), ); } } . 예제) Dice Game . main.dart . import 'package:flutter/material.dart'; import 'dice.dart'; void main() =&gt; runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( debugShowCheckedModeBanner: false, title: 'Dice game', home: LogIn(), ); } } class LogIn extends StatefulWidget { @override State&lt;LogIn&gt; createState() =&gt; _LogInState(); } class _LogInState extends State&lt;LogIn&gt; { TextEditingController controller = TextEditingController(); TextEditingController controller2 = TextEditingController(); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text('Log in'), backgroundColor: Colors.redAccent, centerTitle: true, leading: IconButton(icon: Icon(Icons.menu), onPressed: () {}), actions: &lt;Widget&gt;[ IconButton(icon: Icon(Icons.search), onPressed: () {}) ], ), body: Builder( builder: (context) { return GestureDetector( onTap: () { FocusScope.of(context).unfocus(); }, child: SingleChildScrollView( child: Column( children: [ Padding(padding: EdgeInsets.only(top: 50)), Center( child: Image( image: AssetImage('image/chef.gif'), width: 170.0, height: 190.0), ), Form( child: Theme( data: ThemeData( primaryColor: Colors.teal, inputDecorationTheme: InputDecorationTheme( labelStyle: TextStyle( color: Colors.teal, fontSize: 15.0))), child: Container( padding: EdgeInsets.all(40.0), child: Column( children: [ TextField( controller: controller, decoration: InputDecoration( labelText: 'Enter \"dice\"'), keyboardType: TextInputType.emailAddress, ), TextField( controller: controller2, decoration: InputDecoration( labelText: 'Enter Password'), keyboardType: TextInputType.text, obscureText: true, ), SizedBox(height: 40.0), ButtonTheme( minWidth: 100.0, height: 50.0, child: RaisedButton( color: Colors.orangeAccent, child: Icon(Icons.arrow_forward, color: Colors.white, size: 35.0), onPressed: () { if (controller.text == 'dice' &amp;&amp; controller2.text == '1234') { Navigator.push( context, MaterialPageRoute( builder: (BuildContext context) =&gt; Dice())); } else if (controller.text == 'dice' &amp;&amp; controller2.text != '1234') { showSnackBar2(context); } else if (controller.text != 'dice' &amp;&amp; controller2.text == '1234') { showSnackBar3(context); } else { showSnackBar(context); } })) ], ), ))) ], ), ), ); }, ), ); } } void showSnackBar(BuildContext context) { Scaffold.of(context).showSnackBar(SnackBar( content: Text( '로그인 정보를 다시 확인하세요', textAlign: TextAlign.center, ), duration: Duration(seconds: 2), backgroundColor: Colors.blue, )); } void showSnackBar2(BuildContext context) { Scaffold.of(context).showSnackBar(SnackBar( content: Text( '비밀번호가 일치항ㄶ음', textAlign: TextAlign.center, ), duration: Duration(seconds: 2), backgroundColor: Colors.blue, )); } void showSnackBar3(BuildContext context) { Scaffold.of(context).showSnackBar(SnackBar( content: Text( 'dice 정보 확인', textAlign: TextAlign.center, ), duration: Duration(seconds: 2), backgroundColor: Colors.blue, )); } . dice.dart . import 'package:flutter/material.dart'; import 'dart:math'; import 'package:fluttertoast/fluttertoast.dart'; class Dice extends StatefulWidget { const Dice({Key? key}) : super(key: key); @override State&lt;Dice&gt; createState() =&gt; _DiceState(); } class _DiceState extends State&lt;Dice&gt; { int leftDice = 1; int rightDice = 1; @override Widget build(BuildContext context) { return Scaffold( backgroundColor: Colors.redAccent, appBar: AppBar( backgroundColor: Colors.redAccent, title: Text('Dice Game'), ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ Padding( padding: EdgeInsets.all(32.0), child: Row( children: [ Expanded(child: Image.asset('image/dice$leftDice.png')), SizedBox(width: 20.0), Expanded(child: Image.asset('image/dice$rightDice.png')), ], ), ), SizedBox(height: 60.0), ButtonTheme( minWidth: 100.0, height: 60.0, child: RaisedButton( child: Icon( Icons.play_arrow, color: Colors.white, size: 50.0, ), onPressed: () { setState(() { leftDice = Random().nextInt(6) + 1; rightDice = Random().nextInt(6) + 1; }); showToast( \"Left Dice : {$leftDice} , Right Dice : {$rightDice}\"); }, color: Colors.orangeAccent, ), ) ], ), ), ); } } void showToast(String message) { Fluttertoast.showToast( msg: message, backgroundColor: Colors.white, textColor: Colors.black, toastLength: Toast.LENGTH_SHORT, gravity: ToastGravity.BOTTOM); } . http &amp; json 데이터 가져오기 . main.dart . import 'package:flutter/material.dart'; import 'screens/loading.dart'; void main() =&gt; runApp(MyApp()); class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( title: 'Weather App', theme: ThemeData( primarySwatch: Colors.blue, ), home: Loading(), ); } } . loading.dart . import 'package:flutter/material.dart'; import 'package:geolocator/geolocator.dart'; import 'package:http/http.dart' as http; import 'dart:convert'; class Loading extends StatefulWidget { const Loading({Key? key}) : super(key: key); @override _LoadingState createState() =&gt; _LoadingState(); } class _LoadingState extends State&lt;Loading&gt; { @override void initState() { // TODO: implement initState super.initState(); getLocation(); fetchData(); } void getLocation() async{ try{ Position position = await Geolocator.getCurrentPosition(desiredAccuracy: LocationAccuracy.high); print(position); } catch(e) { print('인터넷 연결에 문제가 있습니다.'); } } void fetchData() async{ http.Response response = await http.get('https://samples.openweathermap.org/data/2.5/weather?q=London&amp;appid=b1b15e88fa797225412429c1c50c122a1'); print(response.body); print(response.statusCode); if(response.statusCode == 200) { String jsonData = response.body; var myJson = jsonDecode(jsonData)['weather'][0]['description']; print(myJson); var windSpeed = jsonDecode(jsonData)['wind']['speed']; var sysId = jsonDecode(jsonData)['id']; print(windSpeed); print(sysId); } } @override Widget build(BuildContext context) { return Scaffold( body: Center( child: RaisedButton( onPressed:null, child: Text( 'Get my location', style: TextStyle(color: Colors.white), ), color: Colors.blue, ) ) ); } } . Spin 기능 및 날씨앱 (최종) . main.dart . import 'package:flutter/material.dart'; import 'screens/loading.dart'; void main() =&gt; runApp(MyApp()); class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( title: 'Weather App', theme: ThemeData( primarySwatch: Colors.blue, ), home: Loading(), ); } } . my_location.dart . import 'package:geolocator/geolocator.dart'; class MyLocation{ late double latitude2; late double longitude2; Future&lt;void&gt; getMyCurrentLocation() async{ try{ Position position = await Geolocator.getCurrentPosition(desiredAccuracy: LocationAccuracy.high); print(position); latitude2 = position.latitude; longitude2 = position.longitude; } catch(e) { print('인터넷 연결에 문제가 있습니다.'); } } } . network.dart . import 'package:http/http.dart' as http; import 'dart:convert'; class Network{ final String url; final String url2; Network(this.url, this.url2); Future&lt;dynamic&gt; getJsonData() async { http.Response response = await http.get(Uri.parse(url)); // print(response.body); // print(response.statusCode); if (response.statusCode == 200) { String jsonData = response.body; var pasingData = jsonDecode(jsonData); return pasingData; } else { print(response.body); } } Future&lt;dynamic&gt; getAirData() async { http.Response response = await http.get(Uri.parse(url2)); // print(response.body); // print(response.statusCode); if (response.statusCode == 200) { String jsonData = response.body; var pasingData = jsonDecode(jsonData); return pasingData; } else { print(response.body); } } } . model.dart . import 'package:flutter/cupertino.dart'; import 'package:flutter/material.dart'; import 'package:flutter_svg/flutter_svg.dart'; class Model { Widget getWeatherIcon(int condition) { if (condition &lt; 300) { return SvgPicture.asset( 'svg/climacon-cloud_lightning.svg', color: Colors.black87, ); } else if (condition &lt; 600) { return SvgPicture.asset( 'svg/climacon-cloud_snow_alt.svg', color: Colors.black87, ); } else if (condition &lt; 800) { return SvgPicture.asset( 'svg/climacon-sun.svg', color: Colors.black87, ); } else { return SvgPicture.asset( 'svg/climacon-cloud_sun.svg', color: Colors.black87, ); } } Widget getAirIcon(int index){ if(index == 1) { return Image.asset('image/good.png', width: 37.0, height: 35.0); } else if(index == 2) { return Image.asset('image/fair.png', width: 37.0, height: 35.0); } else if(index == 3) { return Image.asset('image/moderate.png', width: 37.0, height: 35.0); } else if(index == 4) { return Image.asset('image/poor.png', width: 37.0, height: 35.0); } else { return Image.asset('image/bad.png', width: 37.0, height: 35.0); } } Widget getAirCondition(int index){ if(index == 1) { return Text('매우 좋음', style: TextStyle( color: Colors.indigo, fontWeight: FontWeight.bold ), ); } else if(index == 2) { return Text('좋음', style: TextStyle( color: Colors.indigo, fontWeight: FontWeight.bold ), ); } else if(index == 3) { return Text('보통', style: TextStyle( color: Colors.indigo, fontWeight: FontWeight.bold ), ); } else if(index == 4) { return Text('나쁨', style: TextStyle( color: Colors.indigo, fontWeight: FontWeight.bold ), ); } else { return Text('매우 나쁨', style: TextStyle( color: Colors.indigo, fontWeight: FontWeight.bold ), ); } } } . loading.dart . import 'package:coding_chef1st/screens/weather_screen.dart'; import 'package:flutter/material.dart'; import 'package:coding_chef1st/data/my_location.dart'; import 'package:coding_chef1st/data/network.dart'; import 'package:flutter_spinkit/flutter_spinkit.dart'; const apikey = 'a759b12d9ea168907120f96bd766b754'; class Loading extends StatefulWidget { const Loading({Key? key}) : super(key: key); @override _LoadingState createState() =&gt; _LoadingState(); } class _LoadingState extends State&lt;Loading&gt; { late double latitude3; late double longitude3; @override void initState() { // TODO: implement initState super.initState(); getLocation(); } void getLocation() async { MyLocation myLocation = MyLocation(); await myLocation.getMyCurrentLocation(); latitude3 = myLocation.latitude2; longitude3 = myLocation.longitude2; print(latitude3); print(longitude3); Network network = new Network( 'https://api.openweathermap.org/data/2.5/' 'weather?lat=$latitude3&amp;lon=' '$longitude3&amp;appid=$apikey&amp;units=metric', 'https://api.openweathermap.org/data/2.5/' 'air_pollution?lat=$latitude3&amp;lon=' '$longitude3&amp;appid=$apikey'); var weatherData = await network.getJsonData(); print(weatherData); var airData = await network.getAirData(); print(airData); Navigator.push(context, MaterialPageRoute(builder: (context) { return WeatherScreen( parseWeatherData: weatherData, parseAirPollution: airData, ); })); } // void fetchData() async{ // // var myJson = pasingData['weather'][0]['description']; // print(myJson); // var windSpeed = pasingData['wind']['speed']; // var sysId = pasingData['id']; // print(windSpeed); // print(sysId); // } else { // print(response.statusCode); // } // } @override Widget build(BuildContext context) { return Scaffold( backgroundColor: Colors.amber, body: Center( child: SpinKitDoubleBounce( color: Colors.white, size: 80.0, ), ), ); } } . weather_screen.dart . import 'package:flutter/material.dart'; import 'package:google_fonts/google_fonts.dart'; import 'package:flutter_svg/flutter_svg.dart'; import 'package:timer_builder/timer_builder.dart'; import 'package:intl/intl.dart'; import 'package:coding_chef1st/model/model.dart'; class WeatherScreen extends StatefulWidget { WeatherScreen({this.parseWeatherData, this.parseAirPollution}); final dynamic parseWeatherData; final dynamic parseAirPollution; @override _WeatherScreenState createState() =&gt; _WeatherScreenState(); } class _WeatherScreenState extends State&lt;WeatherScreen&gt; { Model model = Model(); String? cityName; late int temp; late Widget icon; late Widget airIcon; late Widget airState; late String des; late double dust1; late double dust2; var date = DateTime.now(); @override void initState() { // TODO: implement initState super.initState(); updateData(widget.parseWeatherData, widget.parseAirPollution); } void updateData(dynamic whetherData, dynamic airData) { double temp2 = whetherData['main']['temp']; temp = temp2.round(); int condition = whetherData['weather'][0]['id']; int index = airData['list'][0]['main']['aqi']; cityName = whetherData['name']; icon = model.getWeatherIcon(condition); des = whetherData['weather'][0]['description']; airIcon = model.getAirIcon(index); airState = model.getAirCondition(index); dust1 = airData['list'][0]['components']['pm10']; dust2 = airData['list'][0]['components']['pm2_5']; print(temp); print(cityName); } String getSystemTime() { var now = DateTime.now(); return DateFormat(\"h:mm a\").format(now); } @override Widget build(BuildContext context) { return Scaffold( extendBodyBehindAppBar: true, appBar: AppBar( // title: Text('dd'), backgroundColor: Colors.transparent, elevation: 0.0, leading: IconButton( icon: Icon(Icons.near_me), onPressed: () {}, iconSize: 30.0, ), actions: [ IconButton( icon: Icon( Icons.location_searching, ), onPressed: () {}, iconSize: 30, ) ], ), body: Container( child: Stack( children: [ Image.asset( 'image/background.jpg', fit: BoxFit.cover, width: double.infinity, height: double.infinity, ), Container( padding: EdgeInsets.all(20.0), child: Column( mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ Expanded( child: Column( mainAxisAlignment: MainAxisAlignment.spaceBetween, crossAxisAlignment: CrossAxisAlignment.start, children: [ Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ SizedBox(height: 150.0), Text( '$cityName', style: GoogleFonts.lato( fontSize: 35.0, fontWeight: FontWeight.bold, color: Colors.white), ), Row( children: [ TimerBuilder.periodic((Duration(minutes: 1)), builder: (context) { print('${getSystemTime()}'); return Text( '${getSystemTime()}', style: GoogleFonts.lato( fontSize: 16.0, color: Colors.white), ); }), Text(DateFormat(' - EEEE, ').format(date), style: GoogleFonts.lato( fontSize: 16.0, color: Colors.white)), Text(DateFormat('d MMM, yyy').format(date), style: GoogleFonts.lato( fontSize: 16.0, color: Colors.white)) ], ) ], ), Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Text( '$temp\\u2103', style: GoogleFonts.lato( fontSize: 85.0, fontWeight: FontWeight.w300, color: Colors.white), ), Row( children: [ icon, SizedBox( width: 10.0, ), Text('$des', style: GoogleFonts.lato( fontSize: 16.0, color: Colors.white)) ], ) ], ) ], ), ), Column( children: [ Divider( height: 15.0, thickness: 2.0, color: Colors.white30, ), Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ Column( children: [ Text('대기질 지수', style: GoogleFonts.lato( fontSize: 14.0, color: Colors.white)), SizedBox( height: 10.0, ), airIcon, SizedBox( height: 10.0, ), airState, ], ), Column( children: [ Text('미세 먼지', style: GoogleFonts.lato( fontSize: 14.0, color: Colors.white)), SizedBox( height: 10.0, ), Text('$dust1', style: GoogleFonts.lato( fontSize: 24.0, color: Colors.white)), SizedBox( height: 10.0, ), Text('mg/m3', style: GoogleFonts.lato( fontSize: 14.0, color: Colors.white, fontWeight: FontWeight.bold)), ], ), Column( children: [ Text('초미세먼지', style: GoogleFonts.lato( fontSize: 14.0, color: Colors.white)), SizedBox( height: 10.0, ), Text('$dust2', style: GoogleFonts.lato( fontSize: 24.0, color: Colors.white)), SizedBox( height: 10.0, ), Text('mg/m3', style: GoogleFonts.lato( fontSize: 14.0, color: Colors.white, fontWeight: FontWeight.bold)), ], ) ], ) ], ) ], ), ) ], ), ), ); } } . Stream Builder 예제 . | 1초마다 카운터가 증가하는 예제 | . main.dart . import 'package:flutter/material.dart'; import 'package:stream_ex/counter.dart'; void main() =&gt; runApp(MyApp()); class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( title: 'Stream Builder', theme: ThemeData( primaryColor: Colors.blue ), home: Counter(), ); } } . counter.dart . import 'package:flutter/material.dart'; class Counter extends StatefulWidget { const Counter({Key? key}) : super(key: key); @override _CounterState createState() =&gt; _CounterState(); } class _CounterState extends State&lt;Counter&gt; { final int price = 2000; @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text('Stream Builder'), ), body: StreamBuilder&lt;int&gt;( initialData: price, stream: addStreamValue(), builder: (context, snapshot) { final priceNumber = snapshot.data.toString(); return Center( child: Text(priceNumber, style: TextStyle( fontSize: 40, color: Colors.blue ),), ); }, ), ); } Stream&lt;int&gt; addStreamValue() { return Stream&lt;int&gt;.periodic( Duration(seconds: 1), (count) =&gt; price + count ); } } . 코딩셰프 조금 매운맛 25강부터 시작하기 . ",
    "url": "/docs/programming-language/flutter-example/#table-of-contents",
    
    "relUrl": "/docs/programming-language/flutter-example/#table-of-contents"
  },"151": {
    "doc": "Toy - Panabara 준비",
    "title": "Toy - Panabara 준비",
    "content": " ",
    "url": "/docs/programming-language/flutter-panabara-pre/",
    
    "relUrl": "/docs/programming-language/flutter-panabara-pre/"
  },"152": {
    "doc": "Toy - Panabara 준비",
    "title": "Table of contents",
    "content": ". | sqllite3 초기화 및 기타 설정 . | 1. 사전 삭제 파일 | 2. migrate 실행 | 3. Django Super User 생성 | . | 테이블 기본 정보 생성 . | 1. StockBaseInfo 테이블 | 2. MyStocks, Balances 테이블 | . | sqlite3 실행하기 | sqlite3 데이터 추출하기 | Library 재설치 | bulk_update | . Panabara 프로젝트를 진행하면서 유용한 팁들을 정리해 보고자 합니다. 주로 로컬 환경에서 개발 시의 설정 방법, 테이블 조회 방법, 에러 발생 시 팁 등을 정리하였습니다. ",
    "url": "/docs/programming-language/flutter-panabara-pre/#table-of-contents",
    
    "relUrl": "/docs/programming-language/flutter-panabara-pre/#table-of-contents"
  },"153": {
    "doc": "Toy - Panabara 준비",
    "title": "sqllite3 초기화 및 기타 설정",
    "content": "1. 사전 삭제 파일 . 기존의 DB 정보 삭제와 초기화를 위해서 아래와 같은 절차로 진행한다. - migrations 폴더 내 `init.py` 외 파일 - db.sqlite3 . 2. migrate 실행 . python manage.py makemigrations python manage.py migrate . 3. Django Super User 생성 . &gt;python manage.py createsuperuser Username (leave blank to use 'pinco'): xxxx Email address: test@example.com Password:xxxx Password (again):xxxx Superuser created successfully. ",
    "url": "/docs/programming-language/flutter-panabara-pre/#sqllite3-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%B0%8F-%EA%B8%B0%ED%83%80-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/programming-language/flutter-panabara-pre/#sqllite3-초기화-및-기타-설정"
  },"154": {
    "doc": "Toy - Panabara 준비",
    "title": "테이블 기본 정보 생성",
    "content": "1. StockBaseInfo 테이블 . | 국내, 미국, 코인 전 종목의 기본 정보를 가져와 저장한다. | __init__.py 주석 해제 후 stockinfo update : python manage.py runserver --noreload . | . 2. MyStocks, Balances 테이블 . | 보유 종목, 월별 총액 정보를 엑셀 정보로 부터 가져온다. | txtuploader_banance.py . | 월별 잔액 정보를 Balances 테이블에 Insert 한다. | . | txtuploader_mystocks.py . | 보유 종목 정보를 MyStocks 테이블에 Insert 한다. | . | . ",
    "url": "/docs/programming-language/flutter-panabara-pre/#%ED%85%8C%EC%9D%B4%EB%B8%94-%EA%B8%B0%EB%B3%B8-%EC%A0%95%EB%B3%B4-%EC%83%9D%EC%84%B1",
    
    "relUrl": "/docs/programming-language/flutter-panabara-pre/#테이블-기본-정보-생성"
  },"155": {
    "doc": "Toy - Panabara 준비",
    "title": "sqlite3 실행하기",
    "content": "가상환경을 Activate 한 후, 아래 명령어로 테이블 정보를 조회한다. 테이블 조회는 해당 모델 앞에 상위폴더_ 를 추가하여 조회한다. &gt; python manage.py dbshell sqlite&gt; .tables -- users 테이블 보기 sqlite&gt; .schema examples_mystocks sqlite&gt; select * from auth_user; sqlite&gt; select * from examples_mystocks where author_id ='3'; sqlite&gt; select * from examples_stockbaseinfo; sqlite&gt; select * from examples_MyStocks; select * from examples_balances; -- 유저별로 남긴 코멘트 조회 (join문) sqlite&gt; select users.naeme, comments.content from users join comments on comments.author_id = users.id; -- 유저ID 1번이 남긴 코멘트 조회 sqlite&gt; select users.naeme, comments.content from users join comments on comments.author_id = users.id where users.id=1; . ",
    "url": "/docs/programming-language/flutter-panabara-pre/#sqlite3-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/programming-language/flutter-panabara-pre/#sqlite3-실행하기"
  },"156": {
    "doc": "Toy - Panabara 준비",
    "title": "sqlite3 데이터 추출하기",
    "content": "sqlite3.3exe 가 있는 폴더에서 아래와 같이 실행한다. 2021-12-06 오전 11:03 1,083,392 sqlite3.exe 2021-08-10 오후 08:59 &lt;DIR&gt; static 2021-08-10 오후 08:59 &lt;DIR&gt; tests 16개 파일 2,854,205 바이트 13개 디렉터리 195,968,417,792 바이트 남음 (pnbr_env) D:\\1_GitSource\\PANABARA&gt;sqlite3 D:\\1_GitSource\\PANABARA\\db.sqlite3 SQLite version 3.37.0 2021-11-27 14:13:22 Enter \".help\" for usage hints. sqlite&gt; .headers on sqlite&gt; .mode csv sqlite&gt; .output dataoutput.csv sqlite&gt; select * from examples_stockbaseinfo; sqlite&gt; .quit (pnbr_env) D:\\1_GitSource\\PANABARA&gt; . ",
    "url": "/docs/programming-language/flutter-panabara-pre/#sqlite3-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/programming-language/flutter-panabara-pre/#sqlite3-데이터-추출하기"
  },"157": {
    "doc": "Toy - Panabara 준비",
    "title": "Library 재설치",
    "content": ". | YahooFinance 업데이트로 아래로 재설치 필요 . | 에러 내용 : json.decoder.jsondecodeerror expecting value line 1 column 1 (char 0) . | pip install yfinance --upgrade --no-cache-dir | . | . | . ",
    "url": "/docs/programming-language/flutter-panabara-pre/#library-%EC%9E%AC%EC%84%A4%EC%B9%98",
    
    "relUrl": "/docs/programming-language/flutter-panabara-pre/#library-재설치"
  },"158": {
    "doc": "Toy - Panabara 준비",
    "title": "bulk_update",
    "content": ". | 일단 50 개씩 자르자. result = list(divide_list(update_queries,50)) # 이거 나중에 const 로 바꾸자. for rs in result : MyStocks.objects.bulk_update(rs, ['kcurrencyrate','kbuyprice','kcurprice','iunitcurprice', 'ktotalcurprice','ktotalbuyprice','kprofitratio','ktotalprevbuyprice','ktotalprevprice','kprofitpreratio','iupdatedate']) . | . 이 에러는 왜나는거지?? . File \"d:\\1_GitSource\\PANABARA\\pnbr_env\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py\", line 383, in execute return Database.Cursor.execute(self, query, params) django.db.utils.OperationalError: too many SQL variables [07/Dec/2021 23:32:35] \"GET /refresh/ HTTP/1.1\" 500 305677 . ",
    "url": "/docs/programming-language/flutter-panabara-pre/#bulk_update",
    
    "relUrl": "/docs/programming-language/flutter-panabara-pre/#bulk_update"
  },"159": {
    "doc": "Flutter",
    "title": "Flutter",
    "content": " ",
    "url": "/docs/programming-language/flutter/",
    
    "relUrl": "/docs/programming-language/flutter/"
  },"160": {
    "doc": "Framework",
    "title": "Framework",
    "content": "프레임워크의 종류와 그의 특징과 기능을 정리해 보고자 한다. ",
    "url": "/docs/framework",
    
    "relUrl": "/docs/framework"
  },"161": {
    "doc": "Git Command",
    "title": "Git Command",
    "content": " ",
    "url": "/docs/cicdtools/gitgithub-command/",
    
    "relUrl": "/docs/cicdtools/gitgithub-command/"
  },"162": {
    "doc": "Git Command",
    "title": "Table of contents",
    "content": ". | 단계별 명령어 . | Git 폴더 생성하기 | Staging / Commit 하기 | Git 이력 보기 | 로컬 레포지토리에서 Main 브랜치명 변경하기 | Push 하기 | remote 대상을 origin 으로 저장하기 | 현재 remote 대상 정보보기 | origin 주소의 main 브랜치로 Push 하기 | . | 협업 시 간단 절차 | . ",
    "url": "/docs/cicdtools/gitgithub-command/#table-of-contents",
    
    "relUrl": "/docs/cicdtools/gitgithub-command/#table-of-contents"
  },"163": {
    "doc": "Git Command",
    "title": "단계별 명령어",
    "content": "Git 폴더 생성하기 . PS D:\\codingapple_git&gt; git add . Staging / Commit 하기 . PS D:\\codingapple_git&gt; git add . PS D:\\codingapple_git&gt; git commit -m \"save...\" . Git 이력 보기 . PS D:\\codingapple_git&gt; git log --oneline . 로컬 레포지토리에서 Main 브랜치명 변경하기 . PS D:\\codingapple_git&gt; git branch -M main . Push 하기 . PS D:\\codingapple_git&gt; git push -u https://github.com/dmjgr5/gitlesson.git main . remote 대상을 origin 으로 저장하기 . PS D:\\codingapple_git&gt; git remote add origin https://github.com/dmjgr5/gitlesson.git . 현재 remote 대상 정보보기 . PS D:\\codingapple_git&gt; git remote -v . origin 주소의 main 브랜치로 Push 하기 . PS D:\\codingapple_git&gt; git push origin main . Github 에 다른 사람에 의해 Push 된게 있다면? . push 되지 않는다. git pull [git 주소] 이후 git push 하여야 한다. 따라서 git push 이전에는 git pull 을 하여야 한다. PS D:\\codingapple_git&gt; git push origin main To https://github.com/dmjgr5/gitlesson.git ! [rejected] main -&gt; main (non-fast-forward) error: failed to push some refs to 'https://github.com/dmjgr5/gitlesson.git' hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. PS D:\\codingapple_git&gt; git pull https://github.com/dmjgr5/gitlesson.git From https://github.com/dmjgr5/gitlesson * branch main -&gt; FETCH_HEAD Merge made by the 'ort' strategy. zzz | 1 + 1 file changed, 1 insertion(+) create mode 100644 zzz PS D:\\codingapple_git&gt; git push origin main Enumerating objects: 7, done. Counting objects: 100% (7/7), done. Delta compression using up to 8 threads Compressing objects: 100% (4/4), done. Writing objects: 100% (5/5), 473 bytes | 473.00 KiB/s, done. Total 5 (delta 2), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (2/2), completed with 1 local object. To https://github.com/dmjgr5/gitlesson.git 48a79a9..a75f918 main -&gt; main . ",
    "url": "/docs/cicdtools/gitgithub-command/#%EB%8B%A8%EA%B3%84%EB%B3%84-%EB%AA%85%EB%A0%B9%EC%96%B4",
    
    "relUrl": "/docs/cicdtools/gitgithub-command/#단계별-명령어"
  },"164": {
    "doc": "Git Command",
    "title": "협업 시 간단 절차",
    "content": ". | 개발자는 자기 브랜치로 만듦 | PS D:\\codingapple_git&gt; git branch mining PS D:\\codingapple_git&gt; git switch mining | 개발 후 Push 자기브랜치 | github 에서 pull request | 리뷰어는 pull request 에서 merge . | 충돌나는게 있다면 파일별로 수정하여 resolve 처리 이후 merge | . | . ",
    "url": "/docs/cicdtools/gitgithub-command/#%ED%98%91%EC%97%85-%EC%8B%9C-%EA%B0%84%EB%8B%A8-%EC%A0%88%EC%B0%A8",
    
    "relUrl": "/docs/cicdtools/gitgithub-command/#협업-시-간단-절차"
  },"165": {
    "doc": "Git CLI",
    "title": "Git CLI",
    "content": " ",
    "url": "/docs/cicdtools/gitgithub-gitcli/",
    
    "relUrl": "/docs/cicdtools/gitgithub-gitcli/"
  },"166": {
    "doc": "Git CLI",
    "title": "Table of contents",
    "content": ". | Procedures | Branch and Conflict | . First install Git Bash from https://git-scm.com/download/win . Procedures . | go to the folder to make git managed . | git init . : initialize .git called git repository | . | register user information . | git config --global user.name \"myname\" | git config --global user.email \"abc@gmail.com\" | . | git status : working tree status | git add &lt;filename&gt; : add to Staging Area . | git add . : all files added in current folder, but at least add FIRST | . | git commit -m \"history comment\" : goes to Repository, create version . | git commit -am \"filename\" : add &amp; commit at once | git log : shows file version | git log stat : show file version history | git diff : shows differences . | git checkout &lt;[VersionNumber]&gt; : go back to previous version | git checkout master : go to latest version | git reset --hard [VersionNumber] : reset to [VersionNumber] version, strongly deleted. | .gitignore : ignore fires listed in .gitignore file | . Branch and Conflict . | git branch : make branch | git checkout : go to the branch name, changes HEAD | base : common ancestor between branches | . $ git log --graph --oneline # shows oneline * 8f928c8 (HEAD -&gt; master) work 3 * 185a6da work 2 * d06d25d work 1 samsung1@samsung MINGW64 ~/Desktop/gitStudyFolder/manual (master) $ git branch * master samsung1@samsung MINGW64 ~/Desktop/gitStudyFolder/manual (master) $ git branch apple # make apple branch samsung1@samsung MINGW64 ~/Desktop/gitStudyFolder/manual (master) $ git branch apple * master samsung1@samsung MINGW64 ~/Desktop/gitStudyFolder/manual (master) $ git branch apple * master samsung1@samsung MINGW64 ~/Desktop/gitStudyFolder/manual (master) $ git log --graph --oneline * 8f928c8 (HEAD -&gt; master, apple) work 3 * 185a6da work 2 * d06d25d work 1 samsung1@samsung MINGW64 ~/Desktop/gitStudyFolder/manual (master) $ git branch google samsung1@samsung MINGW64 ~/Desktop/gitStudyFolder/manual (master) $ git branch apple google * master samsung1@samsung MINGW64 ~/Desktop/gitStudyFolder/manual (master) $ git branch ms samsung1@samsung MINGW64 ~/Desktop/gitStudyFolder/manual (master) $ git log --graph --oneline * 8f928c8 (HEAD -&gt; master, ms, google, apple) work 3 * 185a6da work 2 * d06d25d work 1 samsung1@samsung MINGW64 ~/Desktop/gitStudyFolder/manual (master) $ nano work.txt samsung1@samsung MINGW64 ~/Desktop/gitStudyFolder/manual (master) $ git commit -am \"master work 4\" warning: LF will be replaced by CRLF in work.txt. The file will have its original line endings in your working directory [master 375e49a] master work 4 1 file changed, 1 insertion(+) samsung1@samsung MINGW64 ~/Desktop/gitStudyFolder/manual (master) $ git log --graph --oneline * 375e49a (HEAD -&gt; master) master work 4 * 8f928c8 (ms, google, apple) work 3 * 185a6da work 2 * d06d25d work 1 samsung1@samsung MINGW64 ~/Desktop/gitStudyFolder/manual (master) $ git checkout apple Switched to branch 'apple' samsung1@samsung MINGW64 ~/Desktop/gitStudyFolder/manual (apple) $ git log --graph --oneline * 8f928c8 (HEAD -&gt; apple, ms, google) work 3 * 185a6da work 2 * d06d25d work 1 samsung1@samsung MINGW64 ~/Desktop/gitStudyFolder/manual (apple) $ git checkout master Switched to branch 'master' . ",
    "url": "/docs/cicdtools/gitgithub-gitcli/#table-of-contents",
    
    "relUrl": "/docs/cicdtools/gitgithub-gitcli/#table-of-contents"
  },"167": {
    "doc": "Github 로컬/원격 연동",
    "title": "Github 원격 저장소와 로컬 저장소 연동하기",
    "content": " ",
    "url": "/docs/cicdtools/gitgithub-githublocalremote/#github-%EC%9B%90%EA%B2%A9-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%99%80-%EB%A1%9C%EC%BB%AC-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/cicdtools/gitgithub-githublocalremote/#github-원격-저장소와-로컬-저장소-연동하기"
  },"168": {
    "doc": "Github 로컬/원격 연동",
    "title": "Table of contents",
    "content": ". | 1. Local Directory 생성 | 2. Git Repository 생성 | 3. Github 연결 설정 | 4. Commit and Push | . 로컬에 있는 데이터 및 소스들을 Github 에 올리기 위해 필요한 절차 및 명령어를 간단히 정리해 보고자 한다. 기본적인 내용이지만 가끔 생성할 때마다 기억이 잘 안나 구글링을 다시 해보곤 해서 이참에 정리하고자 한다. ",
    "url": "/docs/cicdtools/gitgithub-githublocalremote/#table-of-contents",
    
    "relUrl": "/docs/cicdtools/gitgithub-githublocalremote/#table-of-contents"
  },"169": {
    "doc": "Github 로컬/원격 연동",
    "title": "1. Local Directory 생성",
    "content": ". | 위 C:\\gitShare 폴더에 Github 에 올리고자하는 폴더 및 파일들이 있다고 가정하다. 먼저 gitBash 에서 아래와 같이 .git repository 를 생성하기 위해 아래 명령어가 필요하다. | . dc@ MINGW64 /c/gitShare $ git init . | 아래와 같이 .git 디렉토리가 생성된 것을 확인할 수 있다. | . ",
    "url": "/docs/cicdtools/gitgithub-githublocalremote/#1-local-directory-%EC%83%9D%EC%84%B1",
    
    "relUrl": "/docs/cicdtools/gitgithub-githublocalremote/#1-local-directory-생성"
  },"170": {
    "doc": "Github 로컬/원격 연동",
    "title": "2. Git Repository 생성",
    "content": ". | Github 에서 push 할 저장소인 원격 repository 를 아래 메뉴를 통해 생성한다. | Repository 생성 후, 아래 주소를 복사한다. | . ",
    "url": "/docs/cicdtools/gitgithub-githublocalremote/#2-git-repository-%EC%83%9D%EC%84%B1",
    
    "relUrl": "/docs/cicdtools/gitgithub-githublocalremote/#2-git-repository-생성"
  },"171": {
    "doc": "Github 로컬/원격 연동",
    "title": "3. Github 연결 설정",
    "content": "dc@ MINGW64 /c/gitShare (master) $ git remote add origin [git address] . | 위와 같이 복사한 주소를 git remote add origin [복사 주소] 명령어를 통해 Local Repository 를 원격 저장소와 동기화 한다. 필요 시, Github 계정을 통해 인증한다. | . ",
    "url": "/docs/cicdtools/gitgithub-githublocalremote/#3-github-%EC%97%B0%EA%B2%B0-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/cicdtools/gitgithub-githublocalremote/#3-github-연결-설정"
  },"172": {
    "doc": "Github 로컬/원격 연동",
    "title": "4. Commit and Push",
    "content": ". | Working directory 데이터를 git Repository 로 옮기기 위해 아래 명령이 필요하다. | . dc@ MINGW64 /c/gitShare (master) $ git add . dc@ MINGW64 /c/gitShare (master) $ git commit -m \"init\" [master (root-commit) 97d2ae3] init 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 test.txt . | 이후 Push 명령어를 통해 Github repository 에 올릴 수 있다. | . dc@MINGW64 /c/gitShare (master) $ git push origin master Enumerating objects: 3, done. Counting objects: 100% (3/3), done. Writing objects: 100% (3/3), 203 bytes | 67.00 KiB/s, done. Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 remote: remote: Create a pull request for 'master' on GitHub by visiting: remote: https://github.com/dmjgr5/test/pull/new/master remote: To https://github.com/dmjgr5/test.git * [new branch] master -&gt; master . | Github 에서 아래와 같이 해당 데이터가 올라온 것을 확인할 수 있다. | . ",
    "url": "/docs/cicdtools/gitgithub-githublocalremote/#4-commit-and-push",
    
    "relUrl": "/docs/cicdtools/gitgithub-githublocalremote/#4-commit-and-push"
  },"173": {
    "doc": "Github 로컬/원격 연동",
    "title": "Github 로컬/원격 연동",
    "content": " ",
    "url": "/docs/cicdtools/gitgithub-githublocalremote/",
    
    "relUrl": "/docs/cicdtools/gitgithub-githublocalremote/"
  },"174": {
    "doc": "Github Page On Local",
    "title": "Github Page 로컬에서 실행하기 - Jekyll",
    "content": " ",
    "url": "/docs/cicdtools/gitgithub-githubpagelocal/#github-page-%EB%A1%9C%EC%BB%AC%EC%97%90%EC%84%9C-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0---jekyll",
    
    "relUrl": "/docs/cicdtools/gitgithub-githubpagelocal/#github-page-로컬에서-실행하기---jekyll"
  },"175": {
    "doc": "Github Page On Local",
    "title": "Table of contents",
    "content": ". | 1. 루비(Ruby) 설치 | 2. 지킬(Jekyll) 설치 | 3. 로컬 환경 접속 | 4. 업로드 | 5. dmjgr5.github.io 기준 설정 | . 깃허브 페이지를 작성 후 로컬에서 테스트할 수 있는 환경을 구성하고자 한다. 깃허브에 Push 후 확인할 수 있지만, 오타가 기타 오류가 발생할 경우 재업로드 해야 하는 불편함이 따르므로 Push 이전에 항상 로컬에서 테스트를 하면 이러한 불편함을 없앨 수 있다. ",
    "url": "/docs/cicdtools/gitgithub-githubpagelocal/#table-of-contents",
    
    "relUrl": "/docs/cicdtools/gitgithub-githubpagelocal/#table-of-contents"
  },"176": {
    "doc": "Github Page On Local",
    "title": "1. 루비(Ruby) 설치",
    "content": ". | URL : https://rubyinstaller.org/downloads/ . | Ruby+Devkit 2.7.4-1 (x64) : 3.0 지원안하므로 2.X 로 설치한다. | . | 버전 확인 : ruby -v | . user@user:~/dmjgr5.github.io$ ruby -v ruby 2.7.0p0 (2019-12-25 revision 647ee6f091) . ",
    "url": "/docs/cicdtools/gitgithub-githubpagelocal/#1-%EB%A3%A8%EB%B9%84ruby-%EC%84%A4%EC%B9%98",
    
    "relUrl": "/docs/cicdtools/gitgithub-githubpagelocal/#1-루비ruby-설치"
  },"177": {
    "doc": "Github Page On Local",
    "title": "2. 지킬(Jekyll) 설치",
    "content": ". | Command Prompt with Ruby를 실행 . | gem install jekyll | gem install bundler | . | version 확인 | . user@user-500R5K-501R5K-500R5Q:~/dmjgr5.github.io$ jekyll --version Warning: the running version of Bundler (2.1.2) is older than the version that created the lockfile (2.4.21). We suggest you to upgrade to the version that created the lockfile by running `gem install bundler:2.4.21`. jekyll 4.3.2 user@user-500R5K-501R5K-500R5Q:~/dmjgr5.github.io$ gem -v 3.1.2 user@user-500R5K-501R5K-500R5Q:~/dmjgr5.github.io$ bundler --version Bundler version 2.4.21 . | 샘플블로그 체크 . | jekyll new HelloBlog | cd HelloBlog | bundle exec jekyll serve . | http://127.0.0.1:4000/ | . | . | . ",
    "url": "/docs/cicdtools/gitgithub-githubpagelocal/#2-%EC%A7%80%ED%82%ACjekyll-%EC%84%A4%EC%B9%98",
    
    "relUrl": "/docs/cicdtools/gitgithub-githubpagelocal/#2-지킬jekyll-설치"
  },"178": {
    "doc": "Github Page On Local",
    "title": "3. 로컬 환경 접속",
    "content": ". | 깃허브 페이지 폴더로 이동한다. | 인코딩 에러 발생시 다음의 코드를 실행한다. | chcp 65001 | . | 지킬을 실행한다. | jekyll serve or sudo bundle exec jekyll serve | 브라우저를 열어 http://127.0.0.1:4000/로 접속하면 로컬 상에서 블로그가 구현된 결과를 살펴 볼 수 있다. | . | . ",
    "url": "/docs/cicdtools/gitgithub-githubpagelocal/#3-%EB%A1%9C%EC%BB%AC-%ED%99%98%EA%B2%BD-%EC%A0%91%EC%86%8D",
    
    "relUrl": "/docs/cicdtools/gitgithub-githubpagelocal/#3-로컬-환경-접속"
  },"179": {
    "doc": "Github Page On Local",
    "title": "4. 업로드",
    "content": "포스트 업로드하는 것은 일반적인 소스코드 업로드하는 것과 동일하다. VSCODE 에서 직접 업로드 하는 방법이 있으며, 작업의 반복적인 부분이 있어 쉘 스크립트로 자동화가 가능하며 자동화하는 방법은 다음과 같다. | 쉘스크립트 . | 프로젝트 폴더에 post_upload.sh 파일을 만들고 다음과 같이 내용을 입력한다. echo `git status` echo `git add _posts/*` echo `git commit -m \"post upload\"` echo `git push origin master` . | 실행 명령어는 다음과 같다. $ sh post_upload.sh . | . | 로컬 실행 : C:\\park.github.io&gt;bundle exec jekyll serve . C:\\park.github.io&gt;git add . C:\\park.github.io&gt;git commit -m \"3rd blog page test\" C:\\park.github.io&gt;git push -u origin master . | . ",
    "url": "/docs/cicdtools/gitgithub-githubpagelocal/#4-%EC%97%85%EB%A1%9C%EB%93%9C",
    
    "relUrl": "/docs/cicdtools/gitgithub-githubpagelocal/#4-업로드"
  },"180": {
    "doc": "Github Page On Local",
    "title": "5. dmjgr5.github.io 기준 설정",
    "content": "- testuser@testuser-500R5K-501R5K-500R5Q:~/dmjgr5.github.io$ ruby -v ruby 2.7.0p0 (2019-12-25 revision 647ee6f091) [x86_64-linux- testuser@testuser-500R5K-501R5K-500R5Q:~/dmjgr5.github.io$ jekyll --version Warning: the running version of Bundler (2.1.2) is older than the version that created the lockfile (2.4.21). We suggest you to upgrade to the version that created the lockfile by running `gem install bundler:2.4.21`. jekyll 4.3.2 testuser@testuser-500R5K-501R5K-500R5Q:~/dmjgr5.github.io$ gem -v 3.1.2 testuser@testuser-500R5K-501R5K-500R5Q:~/dmjgr5.github.io$ bundler --version Bundler version 2.4.21 – 실행 sudo jekyll serve sudo bundle exec jekyll serve . ",
    "url": "/docs/cicdtools/gitgithub-githubpagelocal/#5-dmjgr5githubio-%EA%B8%B0%EC%A4%80-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/cicdtools/gitgithub-githubpagelocal/#5-dmjgr5githubio-기준-설정"
  },"181": {
    "doc": "Github Page On Local",
    "title": "Github Page On Local",
    "content": " ",
    "url": "/docs/cicdtools/gitgithub-githubpagelocal/",
    
    "relUrl": "/docs/cicdtools/gitgithub-githubpagelocal/"
  },"182": {
    "doc": "Github Profile",
    "title": "Github Profile",
    "content": " ",
    "url": "/docs/cicdtools/gitgithub-githubprofile/",
    
    "relUrl": "/docs/cicdtools/gitgithub-githubprofile/"
  },"183": {
    "doc": "Github Profile",
    "title": "Table of contents",
    "content": ". | Repository 생성 | 참조 사이트 . | HITS : https://hits.seeyoufarm.com/ | Emoji : https://www.webfx.com/tools/emoji-cheat-sheet/ | shields.io : https://shields.io/ | Tables Generator : https://www.tablesgenerator.com/markdown_tables | . | . 자신을 소개하는 프로필용으로 깃허브를 사용하는 분들이 많아지고 있습니다. 단순한 텍스트 형태 보다는 좀 더 보기 쉽고 예쁘게 만들면 더 좋게죠. 이를 위한 참조 사이트 및 예제를 공유하고자 합니다. Repository 생성 . 아래와 같이 자신의 github 명과 동일한 이름의 repository 를 생성합니다. 일반적으로 깃허브 첫 페이지에는 [githubid].md 파일이 profile 란에 표시됩니다. 편집 모드에서 아래에 markdown 형식으로 작성한 후 Commit Changes 버튼을 클릭하면 바로 반영이 가능할 것입니다. 참조 사이트 . HITS : https://hits.seeyoufarm.com/ . 방문자 수를 보여주는 참조사이트로 아래와 같이 자신의 github URL 입력한 후, 하단의 마크다운 형태의 텍스트를 copy 하여 붙여넣기 하면 조회수 이모지를 넣을 수 있습니다. Emoji : https://www.webfx.com/tools/emoji-cheat-sheet/ . 다양한 이모지가 있어 필요한 이모지를 검색하여 손쉽게 가져다 쓸 수 있겠네요. 아이콘 위에 copy 버튼을 클릭하여 마크다운에 붙여넣기 하면 되겠습니다. 예로서 :clap: 는 :clap: 로 보여지네요. shields.io : https://shields.io/ . 아래를 참조하여 작성하시면 이해하기 수월할 것 같습니다.. | . [![Gmail Badge](https://img.shields.io/badge/Gmail-d14836?style=flat-square&amp;logo=Gmail&amp;logoColor=white&amp;link=mailto:dmjgr@gmail.com)](mailto:dmjgr@gmail.com) . | . ![PYTHON](https://img.shields.io/badge/PYTHON-%E2%98%85%E2%98%85%E2%98%85%E2%98%85%E2%98%86-0696D7?style=plastic&amp;logo=Python&amp;logoColor=white) . | . Tables Generator : https://www.tablesgenerator.com/markdown_tables . Markdown형식의 표를 만들어주는 사이트입니다. markdown 으로 작성하기 어려운 표를 에디터에서 편집한 후 붙여넣기 하면 수월하게 작성할 수 있겠네요. ",
    "url": "/docs/cicdtools/gitgithub-githubprofile/#table-of-contents",
    
    "relUrl": "/docs/cicdtools/gitgithub-githubprofile/#table-of-contents"
  },"184": {
    "doc": "Git & Github",
    "title": "Git",
    "content": " ",
    "url": "/docs/cicdtools/gitgithub/#git",
    
    "relUrl": "/docs/cicdtools/gitgithub/#git"
  },"185": {
    "doc": "Git & Github",
    "title": "Git & Github",
    "content": " ",
    "url": "/docs/cicdtools/gitgithub/",
    
    "relUrl": "/docs/cicdtools/gitgithub/"
  },"186": {
    "doc": "Helm Chart 생성",
    "title": "Helm Chart 생성",
    "content": " ",
    "url": "/docs/cloud/helmchart-create/",
    
    "relUrl": "/docs/cloud/helmchart-create/"
  },"187": {
    "doc": "Helm Chart 생성",
    "title": "Table of contents",
    "content": ". | Helm Chart 생성하기 | Helm Chart 파일 . | Chart.yaml | values.yml | templates/_helpers.tpl | templates/serviceaccount.yaml | templates/deployment.yaml | templates/service.yaml | templates/ingress.yaml | . | . ",
    "url": "/docs/cloud/helmchart-create/#table-of-contents",
    
    "relUrl": "/docs/cloud/helmchart-create/#table-of-contents"
  },"188": {
    "doc": "Helm Chart 생성",
    "title": "Helm Chart 생성하기",
    "content": "user1@user1-500R5K-501R5K-500R5Q:~/helm-test$ helm create mychart Creating mychart user1@user1-500R5K-501R5K-500R5Q:~/helm-test$ tree . └── mychart ├── charts ├── Chart.yaml ├── templates │   ├── deployment.yaml │   ├── _helpers.tpl │   ├── hpa.yaml │   ├── ingress.yaml │   ├── NOTES.txt │   ├── serviceaccount.yaml │   ├── service.yaml │   └── tests │   └── test-connection.yaml └── values.yaml 4 directories, 10 files . ",
    "url": "/docs/cloud/helmchart-create/#helm-chart-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/cloud/helmchart-create/#helm-chart-생성하기"
  },"189": {
    "doc": "Helm Chart 생성",
    "title": "Helm Chart 파일",
    "content": "Chart.yaml . user1@user1-500R5K-501R5K-500R5Q:~/helm-test/mychart$ cat Chart.yaml apiVersion: v2 name: mychart description: A Helm chart for Kubernetes # A chart can be either an 'application' or a 'library' chart. # # Application charts are a collection of templates that can be packaged into versioned archives # to be deployed. # # Library charts provide useful utilities or functions for the chart developer. They're included as # a dependency of application charts to inject those utilities and functions into the rendering # pipeline. Library charts do not define any templates and therefore cannot be deployed. type: application # This is the chart version. This version number should be incremented each time you make changes # to the chart and its templates, including the app version. # Versions are expected to follow Semantic Versioning (https://semver.org/) version: 0.1.0 # This is the version number of the application being deployed. This version number should be # incremented each time you make changes to the application. Versions are not expected to # follow Semantic Versioning. They should reflect the version the application is using. # It is recommended to use it with quotes. appVersion: \"1.16.0\" . values.yml . user1@user1-500R5K-501R5K-500R5Q:~/helm-test/mychart$ cat values.yaml # Default values for mychart. # This is a YAML-formatted file. # Declare variables to be passed into your templates. replicaCount: 1 image: repository: nginx pullPolicy: IfNotPresent # Overrides the image tag whose default is the chart appVersion. tag: \"\" imagePullSecrets: [] nameOverride: \"\" fullnameOverride: \"\" serviceAccount: # Specifies whether a service account should be created create: true # Automatically mount a ServiceAccount's API credentials? automount: true # Annotations to add to the service account annotations: {} # The name of the service account to use. # If not set and create is true, a name is generated using the fullname template name: \"\" podAnnotations: {} podLabels: {} podSecurityContext: {} # fsGroup: 2000 securityContext: {} # capabilities: # drop: # - ALL # readOnlyRootFilesystem: true # runAsNonRoot: true # runAsUser: 1000 service: type: ClusterIP port: 80 ingress: enabled: false className: \"\" annotations: {} # kubernetes.io/ingress.class: nginx # kubernetes.io/tls-acme: \"true\" hosts: - host: chart-example.local paths: - path: / pathType: ImplementationSpecific tls: [] # - secretName: chart-example-tls # hosts: # - chart-example.local resources: {} # We usually recommend not to specify default resources and to leave this as a conscious # choice for the user. This also increases chances charts run on environments with little # resources, such as Minikube. If you do want to specify resources, uncomment the following # lines, adjust them as necessary, and remove the curly braces after 'resources:'. # limits: # cpu: 100m # memory: 128Mi # requests: # cpu: 100m # memory: 128Mi autoscaling: enabled: false minReplicas: 1 maxReplicas: 100 targetCPUUtilizationPercentage: 80 # targetMemoryUtilizationPercentage: 80 # Additional volumes on the output Deployment definition. volumes: [] # - name: foo # secret: # secretName: mysecret # optional: false # Additional volumeMounts on the output Deployment definition. volumeMounts: [] # - name: foo # mountPath: \"/etc/foo\" # readOnly: true nodeSelector: {} tolerations: [] affinity: {} . templates/_helpers.tpl . user1@user1-500R5K-501R5K-500R5Q:~/helm-test/mychart$ cat templates/_helpers.tpl { {/* Expand the name of the chart. */} } { {- define \"mychart.name\" -} } { {- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" } } { {- end } } { {/* Create a default fully qualified app name. We truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec). If release name contains chart name it will be used as a full name. */} } { {- define \"mychart.fullname\" -} } { {- if .Values.fullnameOverride } } { {- .Values.fullnameOverride | trunc 63 | trimSuffix \"-\" } } { {- else } } { {- $name := default .Chart.Name .Values.nameOverride } } { {- if contains $name .Release.Name } } { {- .Release.Name | trunc 63 | trimSuffix \"-\" } } { {- else } } { {- printf \"%s-%s\" .Release.Name $name | trunc 63 | trimSuffix \"-\" } } { {- end } } { {- end } } { {- end } } { {/* Create chart name and version as used by the chart label. */} } { {- define \"mychart.chart\" -} } { {- printf \"%s-%s\" .Chart.Name .Chart.Version | replace \"+\" \"_\" | trunc 63 | trimSuffix \"-\" } } { {- end } } { {/* Common labels */} } { {- define \"mychart.labels\" -} } helm.sh/chart: { { include \"mychart.chart\" . } } { { include \"mychart.selectorLabels\" . } } { {- if .Chart.AppVersion } } app.kubernetes.io/version: { { .Chart.AppVersion | quote } } { {- end } } app.kubernetes.io/managed-by: { { .Release.Service } } { {- end } } { {/* Selector labels */} } { {- define \"mychart.selectorLabels\" -} } app.kubernetes.io/name: { { include \"mychart.name\" . } } app.kubernetes.io/instance: { { .Release.Name } } { {- end } } { {/* Create the name of the service account to use */} } { {- define \"mychart.serviceAccountName\" -} } { {- if .Values.serviceAccount.create } } { {- default (include \"mychart.fullname\" .) .Values.serviceAccount.name } } { {- else } } { {- default \"default\" .Values.serviceAccount.name } } { {- end } } { {- end } } . templates/serviceaccount.yaml . user1@user1-500R5K-501R5K-500R5Q:~/helm-test/mychart$ cat templates/serviceaccount.yaml { {- if .Values.serviceAccount.create -} } apiVersion: v1 kind: ServiceAccount metadata: name: { { include \"mychart.serviceAccountName\" . } } labels: { {- include \"mychart.labels\" . | nindent 4 } } { {- with .Values.serviceAccount.annotations } } annotations: { {- toYaml . | nindent 4 } } { {- end } } automountServiceAccountToken: { { .Values.serviceAccount.automount } } { {- end } } . templates/deployment.yaml . user1@user1-500R5K-501R5K-500R5Q:~/helm-test/mychart$ cat templates/deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: { { include \"mychart.fullname\" . } } labels: { {- include \"mychart.labels\" . | nindent 4 } } spec: { {- if not .Values.autoscaling.enabled } } replicas: { { .Values.replicaCount } } { {- end } } selector: matchLabels: { {- include \"mychart.selectorLabels\" . | nindent 6 } } template: metadata: { {- with .Values.podAnnotations } } annotations: { {- toYaml . | nindent 8 } } { {- end } } labels: { {- include \"mychart.labels\" . | nindent 8 } } { {- with .Values.podLabels } } { {- toYaml . | nindent 8 } } { {- end } } spec: { {- with .Values.imagePullSecrets } } imagePullSecrets: { {- toYaml . | nindent 8 } } { {- end } } serviceAccountName: { { include \"mychart.serviceAccountName\" . } } securityContext: { {- toYaml .Values.podSecurityContext | nindent 8 } } containers: - name: { { .Chart.Name } } securityContext: { {- toYaml .Values.securityContext | nindent 12 } } image: \"{ { .Values.image.repository } }:{ { .Values.image.tag | default .Chart.AppVersion } }\" imagePullPolicy: { { .Values.image.pullPolicy } } ports: - name: http containerPort: { { .Values.service.port } } protocol: TCP livenessProbe: httpGet: path: / port: http readinessProbe: httpGet: path: / port: http resources: { {- toYaml .Values.resources | nindent 12 } } { {- with .Values.volumeMounts } } volumeMounts: { {- toYaml . | nindent 12 } } { {- end } } { {- with .Values.volumes } } volumes: { {- toYaml . | nindent 8 } } { {- end } } { {- with .Values.nodeSelector } } nodeSelector: { {- toYaml . | nindent 8 } } { {- end } } { {- with .Values.affinity } } affinity: { {- toYaml . | nindent 8 } } { {- end } } { {- with .Values.tolerations } } tolerations: { {- toYaml . | nindent 8 } } { {- end } } . templates/service.yaml . user1@user1-500R5K-501R5K-500R5Q:~/helm-test/mychart$ cat templates/service.yaml apiVersion: v1 kind: Service metadata: name: { { include \"mychart.fullname\" . } } labels: { {- include \"mychart.labels\" . | nindent 4 } } spec: type: { { .Values.service.type } } ports: - port: { { .Values.service.port } } targetPort: http protocol: TCP name: http selector: { {- include \"mychart.selectorLabels\" . | nindent 4 } } . templates/ingress.yaml . user1@user1-500R5K-501R5K-500R5Q:~/helm-test/mychart$ cat templates/ingress.yaml { {- if .Values.ingress.enabled -} } { {- $fullName := include \"mychart.fullname\" . -} } { {- $svcPort := .Values.service.port -} } { {- if and .Values.ingress.className (not (semverCompare \"&gt;=1.18-0\" .Capabilities.KubeVersion.GitVersion)) } } { {- if not (hasKey .Values.ingress.annotations \"kubernetes.io/ingress.class\") } } { {- $_ := set .Values.ingress.annotations \"kubernetes.io/ingress.class\" .Values.ingress.className} } { {- end } } { {- end } } { {- if semverCompare \"&gt;=1.19-0\" .Capabilities.KubeVersion.GitVersion -} } apiVersion: networking.k8s.io/v1 { {- else if semverCompare \"&gt;=1.14-0\" .Capabilities.KubeVersion.GitVersion -} } apiVersion: networking.k8s.io/v1beta1 { {- else -} } apiVersion: extensions/v1beta1 { {- end } } kind: Ingress metadata: name: { { $fullName } } labels: { {- include \"mychart.labels\" . | nindent 4 } } { {- with .Values.ingress.annotations } } annotations: { {- toYaml . | nindent 4 } } { {- end } } spec: { {- if and .Values.ingress.className (semverCompare \"&gt;=1.18-0\" .Capabilities.KubeVersion.GitVersion) } } ingressClassName: { { .Values.ingress.className } } { {- end } } { {- if .Values.ingress.tls } } tls: { {- range .Values.ingress.tls } } - hosts: { {- range .hosts } } - { { . | quote } } { {- end } } secretName: { { .secretName } } { {- end } } { {- end } } rules: { {- range .Values.ingress.hosts } } - host: { { .host | quote } } http: paths: { {- range .paths } } - path: { { .path } } { {- if and .pathType (semverCompare \"&gt;=1.18-0\" $.Capabilities.KubeVersion.GitVersion) } } pathType: { { .pathType } } { {- end } } backend: { {- if semverCompare \"&gt;=1.19-0\" $.Capabilities.KubeVersion.GitVersion } } service: name: { { $fullName } } port: number: { { $svcPort } } { {- else } } serviceName: { { $fullName } } servicePort: { { $svcPort } } { {- end } } { {- end } } { {- end } } { {- end } } . ",
    "url": "/docs/cloud/helmchart-create/#helm-chart-%ED%8C%8C%EC%9D%BC",
    
    "relUrl": "/docs/cloud/helmchart-create/#helm-chart-파일"
  },"190": {
    "doc": "Helm Chart Installation",
    "title": "Helm Chart Installation",
    "content": " ",
    "url": "/docs/cloud/helmchart-install/",
    
    "relUrl": "/docs/cloud/helmchart-install/"
  },"191": {
    "doc": "Helm Chart Installation",
    "title": "Table of contents",
    "content": ". | get_helm.sh 파일 만들기 | sh 파일 실행위한 권한 변경하기 | helm3 설치 | 버전 확인하기 | Helm chart repository 추가 | chart list 출력 | chart update | 설치된 helm 차트 삭제 | . ",
    "url": "/docs/cloud/helmchart-install/#table-of-contents",
    
    "relUrl": "/docs/cloud/helmchart-install/#table-of-contents"
  },"192": {
    "doc": "Helm Chart Installation",
    "title": "get_helm.sh 파일 만들기",
    "content": "https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 링크로부터 sh 파일을 만든다. root@master:~# curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 &gt; get_helm.sh % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 11345 100 11345 0 0 78241 0 --:--:-- --:--:-- --:--:-- 78241 root@master:~# . ",
    "url": "/docs/cloud/helmchart-install/#get_helmsh-%ED%8C%8C%EC%9D%BC-%EB%A7%8C%EB%93%A4%EA%B8%B0",
    
    "relUrl": "/docs/cloud/helmchart-install/#get_helmsh-파일-만들기"
  },"193": {
    "doc": "Helm Chart Installation",
    "title": "sh 파일 실행위한 권한 변경하기",
    "content": "root@master:~# ll | grep helm -rw-r--r-- 1 root root 11345 Jan 16 13:53 get_helm.sh root@master:~# root@master:~# chmod 700 get_helm.sh root@master:~# root@master:~# ll | grep helm -rwx------ 1 root root 11345 Jan 16 13:53 get_helm.sh* root@master:~# . ",
    "url": "/docs/cloud/helmchart-install/#sh-%ED%8C%8C%EC%9D%BC-%EC%8B%A4%ED%96%89%EC%9C%84%ED%95%9C-%EA%B6%8C%ED%95%9C-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/cloud/helmchart-install/#sh-파일-실행위한-권한-변경하기"
  },"194": {
    "doc": "Helm Chart Installation",
    "title": "helm3 설치",
    "content": "root@master:~# ./get_helm.sh Downloading https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz Verifying checksum... Done. Preparing to install helm into /usr/local/bin helm installed into /usr/local/bin/helm . ",
    "url": "/docs/cloud/helmchart-install/#helm3-%EC%84%A4%EC%B9%98",
    
    "relUrl": "/docs/cloud/helmchart-install/#helm3-설치"
  },"195": {
    "doc": "Helm Chart Installation",
    "title": "버전 확인하기",
    "content": "root@master:~# helm version version.BuildInfo{Version:\"v3.10.3\", GitCommit:\"835b7334cfe2e5e27870ab3ed4135f136eecc704\", GitTreeState:\"clean\", GoVersion:\"go1.18.9\"} . ",
    "url": "/docs/cloud/helmchart-install/#%EB%B2%84%EC%A0%84-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/cloud/helmchart-install/#버전-확인하기"
  },"196": {
    "doc": "Helm Chart Installation",
    "title": "Helm chart repository  추가",
    "content": "root@master:~# helm repo add stable https://charts.helm.sh/stable \"stable\" has been added to your repositories root@master:~# . ",
    "url": "/docs/cloud/helmchart-install/#helm-chart-repository--%EC%B6%94%EA%B0%80",
    
    "relUrl": "/docs/cloud/helmchart-install/#helm-chart-repository--추가"
  },"197": {
    "doc": "Helm Chart Installation",
    "title": "chart list 출력",
    "content": "root@master:~# helm search repo stable NAME CHART VERSION APP VERSION DESCRIPTION stable/acs-engine-autoscaler 2.2.2 2.1.1 DEPRECATED Scales worker nodes within agent pools stable/aerospike 0.3.5 v4.5.0.5 DEPRECATED A Helm chart for Aerospike in Kubern... ",
    "url": "/docs/cloud/helmchart-install/#chart-list-%EC%B6%9C%EB%A0%A5",
    
    "relUrl": "/docs/cloud/helmchart-install/#chart-list-출력"
  },"198": {
    "doc": "Helm Chart Installation",
    "title": "chart update",
    "content": "root@master:~# helm repo update Hang tight while we grab the latest from your chart repositories.....Successfully got an update from the \"stable\" chart repository Update Complete. ⎈Happy Helming!⎈ root@master:~# . ",
    "url": "/docs/cloud/helmchart-install/#chart-update",
    
    "relUrl": "/docs/cloud/helmchart-install/#chart-update"
  },"199": {
    "doc": "Helm Chart Installation",
    "title": "설치된 helm 차트 삭제",
    "content": "helm list . release를 삭제하는 방법은 helm delete(또는 uninstall)명령어를 사용하면 됩니다. helm delete &lt;Release 이름&gt; . ",
    "url": "/docs/cloud/helmchart-install/#%EC%84%A4%EC%B9%98%EB%90%9C-helm-%EC%B0%A8%ED%8A%B8-%EC%82%AD%EC%A0%9C",
    
    "relUrl": "/docs/cloud/helmchart-install/#설치된-helm-차트-삭제"
  },"200": {
    "doc": "Helm Chart",
    "title": "Helm Chart",
    "content": " ",
    "url": "/docs/cloud/helmchart/",
    
    "relUrl": "/docs/cloud/helmchart/"
  },"201": {
    "doc": "HTML",
    "title": "HTML",
    "content": " ",
    "url": "/docs/programming-language/html/",
    
    "relUrl": "/docs/programming-language/html/"
  },"202": {
    "doc": "HTML",
    "title": "Table of contents",
    "content": ". | HTML code is a static HTML, not dynamic. | WAMP installation | . Hypertext Markup Language (HTML) is the standard markup language for documents designed to be displayed in a web browser. HTML code is a static HTML, not dynamic. &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;WEB1 - html&lt;/title&gt; &lt;meta charset=\"utf-8\"&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;&lt;a href=\"index.html\"&gt;WdEB&lt;/a&gt;&lt;h1&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=\"1.html\"&gt;HTML&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"2.html\"&gt;CSS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"3.html\"&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;HTML&lt;/h2&gt; &lt;a href=\"https://www.w3.org/auto/\" target=\"_blank\" title=\"tooltip\"&gt;hypertest land langeuse&lt;/a&gt; 1.41.0 Release notes Windows For 64-bit Windows 7 or later Download &lt;Strong&gt;By downloading,&lt;u&gt; you agree to the Terms&lt;/u&gt;and Conditions.&lt;/strong&gt; roposals from outside vendors to redesign the existing W3C website. Our organization, which celebrated its 25th anniversary this year, produces open and royalty-free Web Standards and guidelines that make the Web work, for everyone.&lt;br&gt; &lt;img src=\"img.jpg\" width=\"222\"&gt; &lt;p style=\"margin-top:22px;\"&gt;ther platforms Try Atom Beta Try Atom Nightly&lt;/p&gt; We believe that by implementing current web best practices and technologies, revising the information architecture, creating a content strategy and revamping the visual design, we can provide our audiences with the best information in a more user-friendly fashion, motivate participation in the organization, and communicate the nature and impact of the W3C more effectively. &lt;/body&gt; &lt;/html&gt; . | On Browser is .. | . WAMP installation . | Wamp is a Server for free by Bitnami. A Windows Web development environment for Apache, MySQL, PHP databases. Download and install from https://bitnami.com/stack/wamp/installer. | managed by manager-windows.exe in C:\\Bitnami\\wampstack-7.3.11-0 | HTML file is located at C:\\Bitnami\\wampstack-7.3.11-0\\apache2\\htdocs\\ | . | . ",
    "url": "/docs/programming-language/html/#table-of-contents",
    
    "relUrl": "/docs/programming-language/html/#table-of-contents"
  },"203": {
    "doc": "Home",
    "title": "Welcome to dmjgr5’s Page!",
    "content": ". Hello, I’m a passionate developer with expertise in network engineering, programming, and DevOps. This repository serves as my knowledge hub, where I share insights, techniques, and experiences gained throughout my journey in the tech world. ",
    "url": "/#welcome-to-dmjgr5s-page",
    
    "relUrl": "/#welcome-to-dmjgr5s-page"
  },"204": {
    "doc": "Home",
    "title": "Purpose of This Repository",
    "content": "This repository serves multiple purposes: . | 💡 Knowledge Sharing: I aim to share my experiences and knowledge with the developer community. You’ll find articles, tutorials, and code snippets covering a range of topics. | 📂 Technique Repository: A collection of techniques and best practices that I’ve found useful in my work. Feel free to explore and adapt them to your projects. | 📄 Experience Documentation: I use this space to document my journey, challenges, and successes. It’s a log of my growth as a developer and a resource for others facing similar situations. | . ",
    "url": "/#purpose-of-this-repository",
    
    "relUrl": "/#purpose-of-this-repository"
  },"205": {
    "doc": "Home",
    "title": "My Expertise",
    "content": "🔭 Network . I have a strong background in network engineering, including: . | Network design and architecture | Routing and switching | Network security | . 💻 Programming . I’m proficient in various programming languages, such as: . | Java | Python | JavaScript | Shell scripting and so on | . 🌱 DevOps . As a DevOps enthusiast, I specialize in: . | Continuous Integration and Continuous Deployment (CI/CD) | Infrastructure as Code (IaC) | Containerization with Docker and Kubernetes | . ",
    "url": "/#my-expertise",
    
    "relUrl": "/#my-expertise"
  },"206": {
    "doc": "Home",
    "title": "My Github Status",
    "content": ". Feel free to explore, learn, and contribute! Happy coding! 🚀 . ",
    "url": "/#my-github-status",
    
    "relUrl": "/#my-github-status"
  },"207": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"208": {
    "doc": "Java Script 기본 개념",
    "title": "Java Script 기본 개념",
    "content": " ",
    "url": "/docs/programming-language/js-basic/",
    
    "relUrl": "/docs/programming-language/js-basic/"
  },"209": {
    "doc": "Java Script 기본 개념",
    "title": "Table of contents",
    "content": ". | 자바스크립트 목적 및 주요 기능 . | Variable | Equality | Function | Arrow Function | Object | Array APIs (map, filter, join) | JSON | . | 주요 특징 . | 선언형 var, let, const | 데이터 타입 | 반복문 | . | 전체 실습 코드 | Related Source &amp; Trial | . | JavaScript is the Programming Language for the Web | JavaScript can calculate, manipulate and validate data | JavaScript can update and change both HTML and CSS | . ",
    "url": "/docs/programming-language/js-basic/#table-of-contents",
    
    "relUrl": "/docs/programming-language/js-basic/#table-of-contents"
  },"210": {
    "doc": "Java Script 기본 개념",
    "title": "자바스크립트 목적 및 주요 기능",
    "content": "​ . | input 창에 특정 값을 넣어주는 용도(input 태그) | 특정 element(DOM) 를 보여주고 안보여주는 용도(select 태그) | JavaScript 는 body 제일 밑에 쓴다. css 의 경우는 head 마지막에 쓴다. ​ Variable . ​ . | let (added in ES6) : var 는 사용하지 말것!, 숫자는 number 를 사용할 수 있음. | const | template literals | 숫자 + 문자는 숫자로 된다. ex( '1' + 2 ==&gt; 3) ​ Equality . ​ . | Loose equality : == , != 를 사용하며 타입이 다르더라도 값이 같으면 같다고 본다. | Strict equality : ===, !== 값이 동일해도 타입이 다르면 다른거다. ​ Function . ​ object 타입이기 때문에 파라미터로도 전달될 수 있다. ​ . | defalut parameter : 인자에 값을 넣는다. | function showMessage(message, from = 'defaultname') { ........ } | Rest parameters 점 3개 | function showMessage(...args) { for(let i = 0; i &lt; args.length; i++) { console.log(args[i]; } } ​ // 함수(익명함수)를 선언함과 동시에 변수에 할당이 된다. const print = function [함수이름] () { =&gt; [함수이름] 은 디버깅 용도로 추가할 수도 있다. console.log('print'); } print() ​ // 다른 변수에 할당이 가능하다. const printAgain = print; printAgain(); . ​ . Arrow Function . ​ 항상 이름이 없는 함수이다 ​ . // print 와 printArrow 는 동일하다. const print = function() { console.log('print'); } print(); ​ ​ const printArrow = () =&gt; { console.log('print'); } printArrow(); . ​ . Object . ​ object 는 key 와 value 의 집합체이다. ​ . Array APIs (map, filter, join) . ​ . | . JSON . ​ . | JSON.stringfy : Object to JSON | JSON.parse : JSON to Object | . ​ . ",
    "url": "/docs/programming-language/js-basic/#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A9%EC%A0%81-%EB%B0%8F-%EC%A3%BC%EC%9A%94-%EA%B8%B0%EB%8A%A5",
    
    "relUrl": "/docs/programming-language/js-basic/#자바스크립트-목적-및-주요-기능"
  },"211": {
    "doc": "Java Script 기본 개념",
    "title": "주요 특징",
    "content": "​ . 선언형 var, let, const . ​ 아래 3가지만 기억하자. ​ . | var 중복 선언을 허용한다. | var x = 1; x = x + 2; document.getElementById(\"test\").value = x; //3 ​ var x = 2; document.getElementById(“test”).value = x; //2 ​ | let 중복 선언을 허용하지 않는다. ​ let y = 1; y = y + 2; ​ let y = 2; // 동일 변수는 허용하지 않는다. ​ . | const 재정의 불가하다. ​ 데이터 타입 . ​ 숫자, 소수점 숫자, 문자, 참/거짓, 오브젝트, 배열 등등이 있다. 아래와 같이 선언된다. ​ . ​ let a = 1; a = 1.234; a = \"apple\" a = true; ​ // object ​ let obj ={ name:\"\", ////////////////////// 선언시점에 키를 선언안해도 된다!! city:\"\" ////////////////////// 선언시점에 키를 선언안해도 된다!! }; ​ obj.name = $(\"#name\").val(); obj.city = $(\"#city\").val(); ​ console.log(obj); ​ // 배열 let city = [ {code:\"02\", name:\"서울\"}, {code:\"064\", name:\"제주\"} ]; . ​ 다중 정의가 가능하다. Object 안에 Object 또는 배열을 담을 수 있다. ​ . let city = \\[ {code:\"02\", name:\"서울\"}, {code:\"064\", name:\"제주\"} \\]; . ​ . 반복문 . ​ . ​ for(let i=0; i&lt;city.length; i++){ ////////////////////////// 조건문 if(i==0) { $('#city').append('' + city\\[i\\].name + ''); } else if(1==0) { /// } else { $('#city').append('' + city\\[i\\].name + ''); } } . ​ . ",
    "url": "/docs/programming-language/js-basic/#%EC%A3%BC%EC%9A%94-%ED%8A%B9%EC%A7%95",
    
    "relUrl": "/docs/programming-language/js-basic/#주요-특징"
  },"212": {
    "doc": "Java Script 기본 개념",
    "title": "전체 실습 코드",
    "content": "| . 이름: 지역: ​ 동네: 강남 서초 제주시 서귀포시 ​ test ​ 등록 ​ ​ ​ . ​ . &lt;div class=\"container\"&gt; &lt;div&gt;이름: &lt;input type=\"text\" id=\"name\" /&gt;&lt;/div&gt; &lt;div&gt;지역: &lt;select id=\"city\" onchange=\"changeCity();\"&gt; &lt;!-- &lt;option value=\"02\"&gt;서울&lt;/option&gt; &lt;option value=\"064\"&gt;제주&lt;/option&gt; --&gt; &lt;/select&gt; &lt;/div&gt; ​ &lt;div&gt;동네: &lt;select id=\"region_02\"&gt; &lt;option value=\"\"&gt;강남&lt;/option&gt; &lt;option value=\"\"&gt;서초&lt;/option&gt; &lt;/select&gt; &lt;select id=\"region_064\" style=\"display:none;\"&gt; &lt;option value=\"\"&gt;제주시&lt;/option&gt; &lt;option value=\"\"&gt;서귀포시&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; ​ &lt;div&gt;test &lt;input type=\"text\" id=\"test\" value=\"\" /&gt;&lt;/div&gt; ​ &lt;button type=\"button\" onclick=\"regist();\"&gt;등록&lt;/button&gt; ​ &lt;/div&gt; ​ &lt;script src=\"https://code.jquery.com/jquery-3.6.3.min.js\" integrity=\"sha256-pvPw+upLPUjgMXY0G+8O0xUf+/Im1MZjXxxgOcBQBXU=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js\" integrity=\"sha384-w1Q4orYjBQndcko6MimVbzY0tgp4pWB4lZ7lr30WKz0vr/aWKhXdBNmNb5D92v7s\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; ​ &lt;!-- 스크립트 시작 --&gt; &lt;script&gt; ​ ​ ​ function regist() { ////////////////////////// 본 document 에 있는 element 중에서 id 로 city 인 값을 가져와라. alert(document.getElementById(\"city\").value); ​ //jQuery 예제 ////////////////////////// jQuery 는 $ 를 쓰고, id 는 # 으로 표현한다. alert($(\"#name\").val()) ​ let obj ={ name:\"\", city:\"\" }; // 오브젝트 ​ ​ obj.name = $(\"#name\").val(); obj.city = $(\"#city\").val(); ​ console.log(obj); ​ } ​ function changeCity() { //let city = document.getElementById(\"city\").value; //document.getElementById(\"region_02\").style.display = \"none\"; // \"\" 또는 \"none\" //document.getElementById(\"region_064\").style.display = \"none\"; // \"\" 또는 \"none\" ​ //document.getElementById(\"region_\"+city).style.display = \"\"; // \"\" 또는 \"none\" ​ ////////////////////////// jQuery 라면 let city = $('#city').val(); $('#region_02').hide(); $('#region_064').hide(); $('#region_' + city).show(); ​ } ​ ​ function loadCity() { let city = [ {code:\"02\", name:\"서울\"}, {code:\"064\", name:\"제주\"} ]; ​ ​ //$('#city').append('&lt;option value=\"02\" selected&gt; 서울 &lt;/option&gt;'); // $('#city').append('&lt;option value=\"064\" &gt; 제주 &lt;/option&gt;'); ​ //////////////////////////// 반복문 for(let i=0; i&lt;city.length; i++){ ////////////////////////// 조건문 if(i==0) { $('#city').append('&lt;option value=\"' + city[i].code + '\" selected &gt;' + city[i].name + ' &lt;/option&gt;'); } else if(1==0) { /// } else { $('#city').append('&lt;option value=\"' + city[i].code + '\" &gt;' + city[i].name + ' &lt;/option&gt;'); } } ​ ​ } ​ ​ ​ loadCity();// 강제로 실행 ​ //var var x = 1; x = x + 2; document.getElementById(\"test\").value = x; //3 ​ var x = 2; document.getElementById(\"test\").value = x; //2 ​ ​ ​ ​ ////////////////////////// 형타입은 let 으로 일관된다. let a = 1; a = 1.234; a = \"apple\" a = true; ​ ​ ////////////////////////// 오브젝트 let obj ={ name:\"\", city:\"\" }; &lt;/script&gt; . ",
    "url": "/docs/programming-language/js-basic/#%EC%A0%84%EC%B2%B4-%EC%8B%A4%EC%8A%B5-%EC%BD%94%EB%93%9C",
    
    "relUrl": "/docs/programming-language/js-basic/#전체-실습-코드"
  },"213": {
    "doc": "Java Script 기본 개념",
    "title": "Related Source &amp; Trial",
    "content": "https://www.w3schools.com/whatis/whatis_js.asp . ",
    "url": "/docs/programming-language/js-basic/#related-source--trial",
    
    "relUrl": "/docs/programming-language/js-basic/#related-source--trial"
  },"214": {
    "doc": "Java Script",
    "title": "Java Script",
    "content": " ",
    "url": "/docs/programming-language/javascript/",
    
    "relUrl": "/docs/programming-language/javascript/"
  },"215": {
    "doc": "Jfrog AQL",
    "title": "Jfrog AQL",
    "content": " ",
    "url": "/docs/cicdtools/jfrog-aql/",
    
    "relUrl": "/docs/cicdtools/jfrog-aql/"
  },"216": {
    "doc": "Jfrog AQL",
    "title": "Table of contents",
    "content": ". | Search URL | All Docker Images for All repositories including Tags | Top 10 Largest Artifacts | Package name and Checksum in AQL | stat | never been downloaded but are older than 7 days, or just haven’t been downloaded in the last 30 days: | Sorting | Image name TO SHA256 Digest | SHA256 Digest TO Image name | . Artifactory Query Language 를 이용하여 다양한 조건으로 빠른 검색이 가능하다.  참조 URL : https://jfrog.com/help/r/jfrog-artifactory-documentation/artifactory-query-language . ",
    "url": "/docs/cicdtools/jfrog-aql/#table-of-contents",
    
    "relUrl": "/docs/cicdtools/jfrog-aql/#table-of-contents"
  },"217": {
    "doc": "Jfrog AQL",
    "title": "Search URL",
    "content": "POST /api/search/aql items.find( { \"repo\":{\"$eq\":\"libs-release-local\"} } ) . ",
    "url": "/docs/cicdtools/jfrog-aql/#search-url",
    
    "relUrl": "/docs/cicdtools/jfrog-aql/#search-url"
  },"218": {
    "doc": "Jfrog AQL",
    "title": "All Docker Images for All repositories including Tags",
    "content": "items.find( { \"$and\":[ {\"$or\":[ {\"$and\":[ {\"name\":{\"$eq\":\"manifest.json\"}}, {\"$or\":[ {\"@docker.manifest\":{\"$match\":\"*\"}}, {\"@docker.manifest\":{\"$match\":\"library/*\"}} ]} ]} ]}, {\"$rf\":[ {\"$or\":[ {\"property.key\":{\"$eq\":\"docker.manifest\"}}, {\"property.key\":{\"$eq\":\"sha256\"}}, {\"property.key\":{\"$eq\":\"docker.repoName\"}} ]} ]} ] } ). include(\"updated\",\"type\",\"created\",\"actual_sha1\",\"property.key\",\"id\",\"modified_by\",\"size\",\"actual_md5\",\"depth\",\"original_md5\",\"created_by\",\"modified\",\"sha256\",\"name\",\"repo\",\"property.value\",\"path\",\"original_sha1\"). limit(1500) { \"results\": [ { \"repo\": \"docker-trial\", \"path\": \"exposures/latest\", \"name\": \"manifest.json\", \"type\": \"file\", \"size\": 426, \"created\": \"2023-11-13T15:59:27.568Z\", \"created_by\": \"trialadmin\", \"modified\": \"2023-11-13T15:59:27.494Z\", \"modified_by\": \"trialadmin\", \"updated\": \"2023-11-13T15:59:27.571Z\", \"depth\": 3, \"actual_md5\": \"d8a7ad64eb26f820707e2fedc3915555\", \"actual_sha1\": \"1009c61f824d56ac635650f730257dc487cb9748\", \"properties\": [ { \"key\": \"sha256\", \"value\": \"79c8e8e1199430b17e6d3d2110f93159b0cfb082e6b8fcf6d48edadefd7de799\" }, { \"key\": \"docker.manifest\", \"value\": \"latest\" }, { \"key\": \"docker.repoName\", \"value\": \"exposures\" } ], \"sha256\": \"79c8e8e1199430b17e6d3d2110f93159b0cfb082e6b8fcf6d48edadefd7de799\" }, { . ",
    "url": "/docs/cicdtools/jfrog-aql/#all-docker-images-for-all-repositories-including-tags",
    
    "relUrl": "/docs/cicdtools/jfrog-aql/#all-docker-images-for-all-repositories-including-tags"
  },"219": {
    "doc": "Jfrog AQL",
    "title": "Top 10 Largest Artifacts",
    "content": "items.find({ \"repo\":\"spring-vue-starter-repo\" }).include(\"name\",\"repo\",\"path\",\"size\") .sort({\"$desc\": [\"size\"]}) .limit(10) { \"results\": [ { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/90\", \"name\": \"sha256__a7203ca35e75e068651c9907d659adc721dba823441b78639fde66fc988f042f\", \"size\": 187528104 }, { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/93\", \"name\": \"sha256__a7203ca35e75e068651c9907d659adc721dba823441b78639fde66fc988f042f\", \"size\": 187528104 }, { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/90\", \"name\": \"sha256__38a980f2cc8accf69c23deae6743d42a87eb34a54f02396f3fcfd7c2d06e2c5b\", \"size\": 42114164 }, { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/93\", \"name\": \"sha256__38a980f2cc8accf69c23deae6743d42a87eb34a54f02396f3fcfd7c2d06e2c5b\", \"size\": 42114164 }, { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/90\", \"name\": \"sha256__2bde522f954fe46c4abe389ff03d4f12ef885aa822bf6a9cae730d4f89440d2f\", \"size\": 16423762 }, { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/93\", \"name\": \"sha256__2bde522f954fe46c4abe389ff03d4f12ef885aa822bf6a9cae730d4f89440d2f\", \"size\": 16423762 }, { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/90\", \"name\": \"sha256__de849f1cfbe60b1c06a1db83a3129ab0ea397c4852b98e3e4300b12ee57ba111\", \"size\": 13525123 }, { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/93\", \"name\": \"sha256__de849f1cfbe60b1c06a1db83a3129ab0ea397c4852b98e3e4300b12ee57ba111\", \"size\": 13525123 }, { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/90\", \"name\": \"sha256__53ae2020bd8e6bd80952db2ce7c7ffcf01d56c43bd1fd44c3dd918549d4eca85\", \"size\": 5166 }, { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/93\", \"name\": \"sha256__53ae2020bd8e6bd80952db2ce7c7ffcf01d56c43bd1fd44c3dd918549d4eca85\", \"size\": 5166 } ], \"range\": { \"start_pos\": 0, \"end_pos\": 10, \"total\": 10, \"limit\": 10 } } . ",
    "url": "/docs/cicdtools/jfrog-aql/#top-10-largest-artifacts",
    
    "relUrl": "/docs/cicdtools/jfrog-aql/#top-10-largest-artifacts"
  },"220": {
    "doc": "Jfrog AQL",
    "title": "Package name and Checksum in AQL",
    "content": "items.find().include(\"name\",\"actual_sha1\",\"actual_md5\",\"sha256\") { \"results\": [ { \"name\": \"f3e2e779db6c-metadata-consumption-usage-2023-11-22T16-10-28.615.log.gz\", \"actual_md5\": \"3f5c0f28feb49d5c08dddc46b91a75a4\", \"actual_sha1\": \"5799ce3522cc8e42b64e3fb06cbb7e02c0e0113f\", \"sha256\": \"aef828205839365dd2b99d9367946172a9e91b00677426340f1deee791128dcd\" }, { \"name\": \"e49785788224-xray-analysis-usage-2023-11-22T02-50-05.661.log.gz\", \"actual_md5\": \"f0d79988b7772c003d04a28bd7417a62\", \"actual_sha1\": \"58423a999eec2997bcfffb247e9ecd3dfd0abf44\", \"sha256\": \"30e6fa98fb48c2b132824d1ac5e2243c0be9e9082ff32598d34d7687ca7f6c7f\" }, . items.find({\"repo\": {\"$eq\":\"spring-vue-starter-repo\"}}).include(\"repo\", \"name\", \"property\") { \"results\": [ { \"repo\": \"spring-vue-starter-repo\", \"name\": \"sha256__53ae2020bd8e6bd80952db2ce7c7ffcf01d56c43bd1fd44c3dd918549d4eca85\", \"properties\": [ { \"key\": \"sha256\", \"value\": \"53ae2020bd8e6bd80952db2ce7c7ffcf01d56c43bd1fd44c3dd918549d4eca85\" } ] }, { . ",
    "url": "/docs/cicdtools/jfrog-aql/#package-name-and-checksum-in-aql",
    
    "relUrl": "/docs/cicdtools/jfrog-aql/#package-name-and-checksum-in-aql"
  },"221": {
    "doc": "Jfrog AQL",
    "title": "stat",
    "content": "items.find({\"repo\": {\"$eq\":\"spring-vue-starter-repo\"}}).include(\"stat\") { \"results\": [ { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/90\", \"name\": \"sha256__53ae2020bd8e6bd80952db2ce7c7ffcf01d56c43bd1fd44c3dd918549d4eca85\", \"type\": \"file\", \"size\": 5166, \"created\": \"2023-11-14T12:32:55.010Z\", \"created_by\": \"user1@gmail.com\", \"modified\": \"2023-11-14T12:32:54.939Z\", \"modified_by\": \"user1@gmail.com\", \"updated\": \"2023-11-14T12:32:55.012Z\", \"stats\": [ { \"downloads\": 0, \"remote_downloads\": 0 } ] }, . ",
    "url": "/docs/cicdtools/jfrog-aql/#stat",
    
    "relUrl": "/docs/cicdtools/jfrog-aql/#stat"
  },"222": {
    "doc": "Jfrog AQL",
    "title": "never been downloaded but are older than 7 days, or just haven’t been downloaded in the last 30 days:",
    "content": "items.find({ \"repo\": { \"$eq\": \"spring-vue-starter-repo\" }, \"$or\" :[ { \"$and\": [ { \"stat.downloads\": { \"$eq\":null } }, { \"updated\": { \"$before\": \"7d\" } } ] }, { \"$and\": [ { \"stat.downloads\": { \"$gt\": 0 } }, { \"stat.downloaded\": { \"$before\": \"30d\" } } ] } ] }).include(\"repo\", \"name\", \"path\", \"updated\", \"sha256\", \"stat.downloads\", \"stat.downloaded\") . ",
    "url": "/docs/cicdtools/jfrog-aql/#never-been-downloaded-but-are-older-than-7-days-or-just-havent-been-downloaded-in-the-last-30-days",
    
    "relUrl": "/docs/cicdtools/jfrog-aql/#never-been-downloaded-but-are-older-than-7-days-or-just-havent-been-downloaded-in-the-last-30-days"
  },"223": {
    "doc": "Jfrog AQL",
    "title": "Sorting",
    "content": "items.find( { \"type\":\"file\", \"created_by\":\"user1@gmail.com\", \"size\":{\"$gt\":\"100\"} }) .sort({\"$desc\":[\"size\",\"name\"]}) .limit(50) . ",
    "url": "/docs/cicdtools/jfrog-aql/#sorting",
    
    "relUrl": "/docs/cicdtools/jfrog-aql/#sorting"
  },"224": {
    "doc": "Jfrog AQL",
    "title": "Image name TO SHA256 Digest",
    "content": "items.find({ \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/93\", \"name\":\"manifest.json\"} ) .include(\"repo\",\"path\",\"name\",\"sha256\",\"property.*\") { \"results\": [ { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/93\", \"name\": \"manifest.json\", \"properties\": [ { \"key\": \"docker.manifest\", \"value\": \"93\" }, { \"key\": \"sha256\", \"value\": \"4805b83bcfd574ac0201e62861c7077006286a854ca093a21dc9b35e1bcb10e7\" }, { \"key\": \"oci.artifact.type\", \"value\": \"application/vnd.docker.container.image.v1+json\" }, { \"key\": \"artifactory.content-type\", \"value\": \"application/vnd.docker.distribution.manifest.v2+json\" }, { \"key\": \"docker.repoName\", \"value\": \"spring-vue-image\" }, { \"key\": \"docker.manifest.digest\", \"value\": \"sha256:4805b83bcfd574ac0201e62861c7077006286a854ca093a21dc9b35e1bcb10e7\" }, { \"key\": \"docker.manifest.type\", \"value\": \"application/vnd.docker.distribution.manifest.v2+json\" } ], \"sha256\": \"4805b83bcfd574ac0201e62861c7077006286a854ca093a21dc9b35e1bcb10e7\" } ], \"range\": { \"start_pos\": 0, \"end_pos\": 1, \"total\": 1 } } . ",
    "url": "/docs/cicdtools/jfrog-aql/#image-name-to-sha256-digest",
    
    "relUrl": "/docs/cicdtools/jfrog-aql/#image-name-to-sha256-digest"
  },"225": {
    "doc": "Jfrog AQL",
    "title": "SHA256 Digest TO Image name",
    "content": "items.find({\"type\":\"file\", \"sha256\":\"4805b83bcfd574ac0201e62861c7077006286a854ca093a21dc9b35e1bcb10e7\"}) { \"results\": [ { \"repo\": \"docker-trial\", \"path\": \"testimage/1.123\", \"name\": \"manifest.json\", \"type\": \"file\", \"size\": 1372, \"created\": \"2023-11-14T12:32:58.982Z\", \"created_by\": \"user1@gmail.com\", \"modified\": \"2023-11-14T12:32:58.874Z\", \"modified_by\": \"user1@gmail.com\", \"updated\": \"2023-11-14T12:32:58.984Z\" }, { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/90\", \"name\": \"manifest.json\", \"type\": \"file\", \"size\": 1372, \"created\": \"2023-11-22T13:56:51.849Z\", \"created_by\": \"user1@gmail.com\", \"modified\": \"2023-11-22T13:56:51.743Z\", \"modified_by\": \"user1@gmail.com\", \"updated\": \"2023-11-22T13:56:51.851Z\" }, { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/93\", \"name\": \"manifest.json\", \"type\": \"file\", \"size\": 1372, \"created\": \"2023-11-23T12:27:41.535Z\", \"created_by\": \"user1@gmail.com\", \"modified\": \"2023-11-23T12:27:41.387Z\", \"modified_by\": \"user1@gmail.com\", \"updated\": \"2023-11-23T12:27:41.537Z\" }, { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image/_uploads\", \"name\": \"manifest-sha256__4805b83bcfd574ac0201e62861c7077006286a854ca093a21dc9b35e1bcb10e7.json\", \"type\": \"file\", \"size\": 1372, \"created\": \"2023-11-22T13:56:51.849Z\", \"created_by\": \"user1@gmail.com\", \"modified\": \"2023-11-22T13:56:51.743Z\", \"modified_by\": \"user1@gmail.com\", \"updated\": \"2023-11-22T13:56:51.851Z\" } ], \"range\": { \"start_pos\": 0, \"end_pos\": 4, \"total\": 4 } } . ",
    "url": "/docs/cicdtools/jfrog-aql/#sha256-digest-to-image-name",
    
    "relUrl": "/docs/cicdtools/jfrog-aql/#sha256-digest-to-image-name"
  },"226": {
    "doc": "Docker Layer Analysis 상세 분석",
    "title": "Docker Layer Analysis 상세 분석",
    "content": " ",
    "url": "/docs/cicdtools/jfrog-dockerlayer-example/",
    
    "relUrl": "/docs/cicdtools/jfrog-dockerlayer-example/"
  },"227": {
    "doc": "Docker Layer Analysis 상세 분석",
    "title": "Table of contents",
    "content": ". | Dockerfile 정의 . | Parent Image | 1st Child Image | 2nd Child Image | . | Docker History from Jfrog . | Parent Image | 1st Child Image | 2nd Child Image | . | “Image” 해쉬값 확인 . | Parent Image | 1st Child Image | 2nd Child Image | . | 의문 사항 . | Dockerfile 작성 시 Base image 유무 확인 | 기존 Docker Image 에서의 Base Image 존재 유무 확인 | . | . Base image 를 참조한 Docker image 에 대해 분석해보고자 한다. ",
    "url": "/docs/cicdtools/jfrog-dockerlayer-example/#table-of-contents",
    
    "relUrl": "/docs/cicdtools/jfrog-dockerlayer-example/#table-of-contents"
  },"228": {
    "doc": "Docker Layer Analysis 상세 분석",
    "title": "Dockerfile 정의",
    "content": "먼저 아래와 같이 3개의 dockerfile 이 있다고 가정하자. 각각은 상위 도커 이미지를 참조한다. Parent Image . FROM openjdk:11 WORKDIR /app COPY ./springVueStarter-0.0.1-SNAPSHOT.jar . ENTRYPOINT [\"java\",\"-jar\",\"-Dserver.port=8080\",\"springVueStarter-0.0.1-SNAPSHOT.jar\"] . ImageName - spring-vue-image:131 . 1st Child Image . FROM dmjgr11.jfrog.io/spring-vue-starter-repo/spring-vue-image:131 ENV MY_NAME=\"1st child\" . ImageName - spring-vue-image-child:133 . 2nd Child Image . FROM dmjgr11.jfrog.io/spring-vue-starter-repo/spring-vue-image-child:133 ENV MY_NAME=\"2nd child\" . ImageName - pring-vue-image-child-child:135 . [Each Docker Layers] . ",
    "url": "/docs/cicdtools/jfrog-dockerlayer-example/#dockerfile-%EC%A0%95%EC%9D%98",
    
    "relUrl": "/docs/cicdtools/jfrog-dockerlayer-example/#dockerfile-정의"
  },"229": {
    "doc": "Docker Layer Analysis 상세 분석",
    "title": "Docker History from Jfrog",
    "content": "Parent Image . GET https://dmjgr11.jfrog.io/artifactory/api/docker/spring-vue-starter-repo/v2/spring-vue-image/manifests/131 { \"schemaVersion\" : 1, \"name\" : \"spring-vue-image\", \"tag\" : \"131\", \"architecture\" : \"amd64\", \"fsLayers\" : [ { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a199ac3f84ab266ff997cadbc58b7e213a365ef8fbdf5e18635e974e00af1e10\" }, { \"blobSum\" : \"sha256:b170492a3b5fd338b7dd87b44605150d06889f1e916029a3d499f9ae6dcf631a\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:db38d58ec8ab4111b072f6700f978a51985acd252aabce3be377f25162e68301\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:66223a710990a0ae7162aeed80417d30303afa3f24aafa57aa30348725e2230b\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:d85151f15b6683b98f21c3827ac545188b1849efb14a1049710ebc4692de3dd5\" }, { \"blobSum\" : \"sha256:9daef329d35093868ef75ac8b7c6eb407fa53abbcb3a264c218c2ec7bca716e6\" }, { \"blobSum\" : \"sha256:2068746827ec1b043b571e4788693eab7e9b2a95301176512791f8c317a2816a\" }, { \"blobSum\" : \"sha256:d9d4b9b6e964657da49910b495173d6c4f0d9bc47b3b44273cf82fd32723d165\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:001c52e26ad57e3b25b439ee0052f6692e5c0f2d5d982a00a8819ace5e521452\" } ], \"history\" : [ { \"v1Compatibility\" : \"{\\\"container\\\":\\\"47d70ad47375880b2a3826e42a84b11f3b83b923c452fbd1c3ec3b179196046d\\\",\\\"parent\\\":\\\"f80ece92c78d6dfdb0eb44e1b1276e14097387e082793df3113da76bead22840\\\",\\\"throwaway\\\":true,\\\"os\\\":\\\"linux\\\",\\\"created\\\":\\\"2023-11-26T01:26:52.991452547Z\\\",\\\"container_config\\\":{\\\"Hostname\\\":\\\"47d70ad47375\\\",\\\"Domainname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":false,\\\"AttachStderr\\\":false,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":[\\\"PATH=/usr/local/openjdk-11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\",\\\"JAVA_HOME=/usr/local/openjdk-11\\\",\\\"LANG=C.UTF-8\\\",\\\"JAVA_VERSION=11.0.16\\\"],\\\"Cmd\\\":[\\\"/bin/sh\\\",\\\"-c\\\",\\\"#(nop) \\\",\\\"ENTRYPOINT [\\\\\\\"java\\\\\\\" \\\\\\\"-jar\\\\\\\" \\\\\\\"-Dserver.port=8080\\\\\\\" \\\\\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\\\\\"]\\\"],\\\"Image\\\":\\\"sha256:1062200af8349a3537db4c1c34ff9077952e801c37bdc8f6c376c3f1d5ce5070\\\",\\\"Volumes\\\":null,\\\"WorkingDir\\\":\\\"/app\\\",\\\"Entrypoint\\\":[\\\"java\\\",\\\"-jar\\\",\\\"-Dserver.port=8080\\\",\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\"],\\\"OnBuild\\\":null,\\\"Labels\\\":{}},\\\"id\\\":\\\"d7e3bf73aad4ebc99ea36e2d81edb5c5e4e1886b7a1b6f95ecdd7dbb35d1e8dc\\\",\\\"config\\\":{\\\"Hostname\\\":\\\"\\\",\\\"Domainname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":false,\\\"AttachStderr\\\":false,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":[\\\"PATH=/usr/local/openjdk-11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\",\\\"JAVA_HOME=/usr/local/openjdk-11\\\",\\\"LANG=C.UTF-8\\\",\\\"JAVA_VERSION=11.0.16\\\"],\\\"Cmd\\\":null,\\\"Image\\\":\\\"sha256:1062200af8349a3537db4c1c34ff9077952e801c37bdc8f6c376c3f1d5ce5070\\\",\\\"Volumes\\\":null,\\\"WorkingDir\\\":\\\"/app\\\",\\\"Entrypoint\\\":[\\\"java\\\",\\\"-jar\\\",\\\"-Dserver.port=8080\\\",\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\"],\\\"OnBuild\\\":null,\\\"Labels\\\":null},\\\"docker_version\\\":\\\"24.0.5\\\",\\\"architecture\\\":\\\"amd64\\\"}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"f80ece92c78d6dfdb0eb44e1b1276e14097387e082793df3113da76bead22840\\\",\\\"parent\\\":\\\"2c2f87c4aa2168e88d936b22d2df087b68f3128254ab3116323c16f1c436d47d\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-11-26T01:26:52.305625088Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) COPY file:8bbc62b0cb34d4df4ef293b81a5de6ebd9b1bb544088353398300187f13b041e in . \\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"2c2f87c4aa2168e88d936b22d2df087b68f3128254ab3116323c16f1c436d47d\\\",\\\"parent\\\":\\\"2557f5457bf26fc998dcefe03e58db922c0c7b9ab5c0dd5e4ca5affcce1cc294\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-11-26T01:26:51.923977723Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) WORKDIR /app\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"2557f5457bf26fc998dcefe03e58db922c0c7b9ab5c0dd5e4ca5affcce1cc294\\\",\\\"parent\\\":\\\"d6eed9a77235113bbd26dd9233d8954696372897202a32132ebe135a348666af\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:52:12.355386837Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) CMD [\\\\\\\"jshell\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"d6eed9a77235113bbd26dd9233d8954696372897202a32132ebe135a348666af\\\",\\\"parent\\\":\\\"7bd9969799ce17a0556569dd526d8ab7ad494bdf4217961f231eb2c9850d0b71\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:52:11.750144107Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -eux; \\\\t\\\\tarch=\\\\\\\"$(dpkg --print-architecture)\\\\\\\"; \\\\tcase \\\\\\\"$arch\\\\\\\" in \\\\t\\\\t'amd64') \\\\t\\\\t\\\\tdownloadUrl='https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.16%2B8/OpenJDK11U-jdk_x64_linux_11.0.16_8.tar.gz'; \\\\t\\\\t\\\\t;; \\\\t\\\\t'arm64') \\\\t\\\\t\\\\tdownloadUrl='https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.16%2B8/OpenJDK11U-jdk_aarch64_linux_11.0.16_8.tar.gz'; \\\\t\\\\t\\\\t;; \\\\t\\\\t*) echo &gt;&amp;2 \\\\\\\"error: unsupported architecture: '$arch'\\\\\\\"; exit 1 ;; \\\\tesac; \\\\t\\\\twget --progress=dot:giga -O openjdk.tgz \\\\\\\"$downloadUrl\\\\\\\"; \\\\twget --progress=dot:giga -O openjdk.tgz.asc \\\\\\\"$downloadUrl.sign\\\\\\\"; \\\\t\\\\texport GNUPGHOME=\\\\\\\"$(mktemp -d)\\\\\\\"; \\\\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \\\\tgpg --batch --keyserver keyserver.ubuntu.com --keyserver-options no-self-sigs-only --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \\\\tgpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F \\\\t\\\\t| tee /dev/stderr \\\\t\\\\t| grep '0xA5CD6035332FA671' \\\\t\\\\t| grep 'Andrew Haley'; \\\\tgpg --batch --verify openjdk.tgz.asc openjdk.tgz; \\\\tgpgconf --kill all; \\\\trm -rf \\\\\\\"$GNUPGHOME\\\\\\\"; \\\\t\\\\tmkdir -p \\\\\\\"$JAVA_HOME\\\\\\\"; \\\\ttar --extract \\\\t\\\\t--file openjdk.tgz \\\\t\\\\t--directory \\\\\\\"$JAVA_HOME\\\\\\\" \\\\t\\\\t--strip-components 1 \\\\t\\\\t--no-same-owner \\\\t; \\\\trm openjdk.tgz*; \\\\t\\\\t{ \\\\t\\\\techo '#!/usr/bin/env bash'; \\\\t\\\\techo 'set -Eeuo pipefail'; \\\\t\\\\techo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \\\\\\\"$JAVA_HOME/lib/security/cacerts\\\\\\\"'; \\\\t} &gt; /etc/ca-certificates/update.d/docker-openjdk; \\\\tchmod +x /etc/ca-certificates/update.d/docker-openjdk; \\\\t/etc/ca-certificates/update.d/docker-openjdk; \\\\t\\\\tfind \\\\\\\"$JAVA_HOME/lib\\\\\\\" -name '*.so' -exec dirname '{}' ';' | sort -u &gt; /etc/ld.so.conf.d/docker-openjdk.conf; \\\\tldconfig; \\\\t\\\\tjava -Xshare:dump; \\\\t\\\\tfileEncoding=\\\\\\\"$(echo 'System.out.println(System.getProperty(\\\\\\\"file.encoding\\\\\\\"))' | jshell -s -)\\\\\\\"; [ \\\\\\\"$fileEncoding\\\\\\\" = 'UTF-8' ]; rm -rf ~/.java; \\\\tjavac --version; \\\\tjava --version\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"7bd9969799ce17a0556569dd526d8ab7ad494bdf4217961f231eb2c9850d0b71\\\",\\\"parent\\\":\\\"150bd83bc51ff45895d89bc2a0e22b2b6d2640db9d25e8c8e5e99d5ef0ec7623\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:55.698900058Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV JAVA_VERSION=11.0.16\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"150bd83bc51ff45895d89bc2a0e22b2b6d2640db9d25e8c8e5e99d5ef0ec7623\\\",\\\"parent\\\":\\\"76ae3db4cadf676eda2bac904f9b08c4620c0edc69bada1df7f6395141e133e7\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:55.605571697Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV LANG=C.UTF-8\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"76ae3db4cadf676eda2bac904f9b08c4620c0edc69bada1df7f6395141e133e7\\\",\\\"parent\\\":\\\"4f704e3c8d62be564fab428d5f824d423888d17f29bb1a0495b321e0954792a0\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:55.511643922Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV PATH=/usr/local/openjdk-11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"4f704e3c8d62be564fab428d5f824d423888d17f29bb1a0495b321e0954792a0\\\",\\\"parent\\\":\\\"6ba4d4d4710a6729c268a7ffbac3f8d6e138975207c5dcff733b82797fa2a9fc\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:55.419053573Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c { echo '#/bin/sh'; echo 'echo \\\\\\\"$JAVA_HOME\\\\\\\"'; } &gt; /usr/local/bin/docker-java-home &amp;&amp; chmod +x /usr/local/bin/docker-java-home &amp;&amp; [ \\\\\\\"$JAVA_HOME\\\\\\\" = \\\\\\\"$(docker-java-home)\\\\\\\" ] # backwards compatibility\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"6ba4d4d4710a6729c268a7ffbac3f8d6e138975207c5dcff733b82797fa2a9fc\\\",\\\"parent\\\":\\\"80aae24464862c379e21619d01e692826c9b569555f77d13cdbb817917097635\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:54.830162485Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV JAVA_HOME=/usr/local/openjdk-11\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"80aae24464862c379e21619d01e692826c9b569555f77d13cdbb817917097635\\\",\\\"parent\\\":\\\"16bf8653bb166af978133e007dc3ddedfa0088680a3420bafe56091030653d53\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:54.691790584Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -eux; \\\\tapt-get update; \\\\tapt-get install -y --no-install-recommends \\\\t\\\\tbzip2 \\\\t\\\\tunzip \\\\t\\\\txz-utils \\\\t\\\\t\\\\t\\\\tfontconfig libfreetype6 \\\\t\\\\t\\\\t\\\\tca-certificates p11-kit \\\\t; \\\\trm -rf /var/lib/apt/lists/*\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"16bf8653bb166af978133e007dc3ddedfa0088680a3420bafe56091030653d53\\\",\\\"parent\\\":\\\"76bd2f568bfd26b10c46e1553a12f15fdfd2f79bc650d3d0acee77414d770dc4\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T01:47:17.502915867Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\\t\\\\tgit \\\\t\\\\tmercurial \\\\t\\\\topenssh-client \\\\t\\\\tsubversion \\\\t\\\\t\\\\t\\\\tprocps \\\\t&amp;&amp; rm -rf /var/lib/apt/lists/*\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"76bd2f568bfd26b10c46e1553a12f15fdfd2f79bc650d3d0acee77414d770dc4\\\",\\\"parent\\\":\\\"158fd1860dc8ebca5c9aaf23053db479b21088720e82ad6651aee3448423f68b\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T01:47:01.803843664Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -ex; \\\\tif ! command -v gpg &gt; /dev/null; then \\\\t\\\\tapt-get update; \\\\t\\\\tapt-get install -y --no-install-recommends \\\\t\\\\t\\\\tgnupg \\\\t\\\\t\\\\tdirmngr \\\\t\\\\t; \\\\t\\\\trm -rf /var/lib/apt/lists/*; \\\\tfi\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"158fd1860dc8ebca5c9aaf23053db479b21088720e82ad6651aee3448423f68b\\\",\\\"parent\\\":\\\"85c0165b7b71b79d6ec1dc274c3f97ebf29bcb20a0bf110e4ac049db2a652913\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T01:46:56.05932783Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -eux; \\\\tapt-get update; \\\\tapt-get install -y --no-install-recommends \\\\t\\\\tca-certificates \\\\t\\\\tcurl \\\\t\\\\tnetbase \\\\t\\\\twget \\\\t; \\\\trm -rf /var/lib/apt/lists/*\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"85c0165b7b71b79d6ec1dc274c3f97ebf29bcb20a0bf110e4ac049db2a652913\\\",\\\"parent\\\":\\\"d25d18af6e91fc80186a2cd6a64a2d77a56026d91d18d820965be16be01de88f\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T01:19:54.87196988Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) CMD [\\\\\\\"bash\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"d25d18af6e91fc80186a2cd6a64a2d77a56026d91d18d820965be16be01de88f\\\",\\\"parent\\\":\\\"\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T01:19:54.384822699Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ADD file:d0f758e50c654c225f6c7f03e8a579efc9106437051573bdbae5e63b1c4b2c1f in / \\\"]}}\" } ], \"signatures\" : [ { \"header\" : { \"jwk\" : { \"crv\" : \"P-256\", \"kty\" : \"EC\", \"x\" : \"UUFxY1AB5-UxJXJGCCSfwS4PWAokG0KnKv2lVfPKxtw\", \"y\" : \"teCh4wOjbZmIYNll5rEpZlsfim1rMgwZn0_S4Urm-9A\" }, \"alg\" : \"ES256\" }, \"signature\" : \"E89ziY9PAUxb8QKjfWpt7gKADa9wv_1YRAYy1-xwvfCSxW23Q_zLfnFzlkbXi1BjnOiimSrqcj0yzAJGDKsWbg\", \"protected\" : \"eyJmb3JtYXRMZW5ndGgiOjExOTU0LCJmb3JtYXRUYWlsIjoiQ24wIiwidGltZSI6IjIwMjMtMTEtMjZUMzoxMjowNCswMDAwIn0\" } ] } . 1st Child Image . GET https://dmjgr11.jfrog.io/artifactory/api/docker/spring-vue-starter-repo/v2/spring-vue-image-child/manifests/133 { \"schemaVersion\" : 1, \"name\" : \"spring-vue-image-child\", \"tag\" : \"133\", \"architecture\" : \"amd64\", \"fsLayers\" : [ { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a199ac3f84ab266ff997cadbc58b7e213a365ef8fbdf5e18635e974e00af1e10\" }, { \"blobSum\" : \"sha256:b170492a3b5fd338b7dd87b44605150d06889f1e916029a3d499f9ae6dcf631a\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:db38d58ec8ab4111b072f6700f978a51985acd252aabce3be377f25162e68301\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:66223a710990a0ae7162aeed80417d30303afa3f24aafa57aa30348725e2230b\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:d85151f15b6683b98f21c3827ac545188b1849efb14a1049710ebc4692de3dd5\" }, { \"blobSum\" : \"sha256:9daef329d35093868ef75ac8b7c6eb407fa53abbcb3a264c218c2ec7bca716e6\" }, { \"blobSum\" : \"sha256:2068746827ec1b043b571e4788693eab7e9b2a95301176512791f8c317a2816a\" }, { \"blobSum\" : \"sha256:d9d4b9b6e964657da49910b495173d6c4f0d9bc47b3b44273cf82fd32723d165\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:001c52e26ad57e3b25b439ee0052f6692e5c0f2d5d982a00a8819ace5e521452\" } ], \"history\" : [ { \"v1Compatibility\" : \"{\\\"container\\\":\\\"ee6731091b5195057a476420e76d36ce9c6ed4833a9ee87720108bf5ec57a7e4\\\",\\\"parent\\\":\\\"1e11cd3f23273e0beff6fb679bf83135304a8bea318d756662d822536f0305d5\\\",\\\"throwaway\\\":true,\\\"os\\\":\\\"linux\\\",\\\"created\\\":\\\"2023-11-26T01:32:43.64663755Z\\\",\\\"container_config\\\":{\\\"Hostname\\\":\\\"ee6731091b51\\\",\\\"Domainname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":false,\\\"AttachStderr\\\":false,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":[\\\"PATH=/usr/local/openjdk-11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\",\\\"JAVA_HOME=/usr/local/openjdk-11\\\",\\\"LANG=C.UTF-8\\\",\\\"JAVA_VERSION=11.0.16\\\",\\\"MY_NAME=1st child\\\"],\\\"Cmd\\\":[\\\"/bin/sh\\\",\\\"-c\\\",\\\"#(nop) \\\",\\\"ENV MY_NAME=1st child\\\"],\\\"Image\\\":\\\"sha256:0d46410308777973d51d3ffc0639b7670c04d34968650f56f6ed5304c5359c9d\\\",\\\"Volumes\\\":null,\\\"WorkingDir\\\":\\\"/app\\\",\\\"Entrypoint\\\":[\\\"java\\\",\\\"-jar\\\",\\\"-Dserver.port=8080\\\",\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\"],\\\"OnBuild\\\":null,\\\"Labels\\\":{}},\\\"id\\\":\\\"b1e9523a099d2679871dc64c41bba17c773b3ebaa5e8af1069b65667ad73b0b8\\\",\\\"config\\\":{\\\"Hostname\\\":\\\"\\\",\\\"Domainname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":false,\\\"AttachStderr\\\":false,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":[\\\"PATH=/usr/local/openjdk-11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\",\\\"JAVA_HOME=/usr/local/openjdk-11\\\",\\\"LANG=C.UTF-8\\\",\\\"JAVA_VERSION=11.0.16\\\",\\\"MY_NAME=1st child\\\"],\\\"Cmd\\\":null,\\\"Image\\\":\\\"sha256:0d46410308777973d51d3ffc0639b7670c04d34968650f56f6ed5304c5359c9d\\\",\\\"Volumes\\\":null,\\\"WorkingDir\\\":\\\"/app\\\",\\\"Entrypoint\\\":[\\\"java\\\",\\\"-jar\\\",\\\"-Dserver.port=8080\\\",\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\"],\\\"OnBuild\\\":null,\\\"Labels\\\":null},\\\"docker_version\\\":\\\"24.0.5\\\",\\\"architecture\\\":\\\"amd64\\\"}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"1e11cd3f23273e0beff6fb679bf83135304a8bea318d756662d822536f0305d5\\\",\\\"parent\\\":\\\"f80ece92c78d6dfdb0eb44e1b1276e14097387e082793df3113da76bead22840\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-11-26T01:26:52.991452547Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENTRYPOINT [\\\\\\\"java\\\\\\\" \\\\\\\"-jar\\\\\\\" \\\\\\\"-Dserver.port=8080\\\\\\\" \\\\\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"f80ece92c78d6dfdb0eb44e1b1276e14097387e082793df3113da76bead22840\\\",\\\"parent\\\":\\\"2c2f87c4aa2168e88d936b22d2df087b68f3128254ab3116323c16f1c436d47d\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-11-26T01:26:52.305625088Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) COPY file:8bbc62b0cb34d4df4ef293b81a5de6ebd9b1bb544088353398300187f13b041e in . \\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"2c2f87c4aa2168e88d936b22d2df087b68f3128254ab3116323c16f1c436d47d\\\",\\\"parent\\\":\\\"2557f5457bf26fc998dcefe03e58db922c0c7b9ab5c0dd5e4ca5affcce1cc294\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-11-26T01:26:51.923977723Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) WORKDIR /app\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"2557f5457bf26fc998dcefe03e58db922c0c7b9ab5c0dd5e4ca5affcce1cc294\\\",\\\"parent\\\":\\\"d6eed9a77235113bbd26dd9233d8954696372897202a32132ebe135a348666af\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:52:12.355386837Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) CMD [\\\\\\\"jshell\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"d6eed9a77235113bbd26dd9233d8954696372897202a32132ebe135a348666af\\\",\\\"parent\\\":\\\"7bd9969799ce17a0556569dd526d8ab7ad494bdf4217961f231eb2c9850d0b71\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:52:11.750144107Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -eux; \\\\t\\\\tarch=\\\\\\\"$(dpkg --print-architecture)\\\\\\\"; \\\\tcase \\\\\\\"$arch\\\\\\\" in \\\\t\\\\t'amd64') \\\\t\\\\t\\\\tdownloadUrl='https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.16%2B8/OpenJDK11U-jdk_x64_linux_11.0.16_8.tar.gz'; \\\\t\\\\t\\\\t;; \\\\t\\\\t'arm64') \\\\t\\\\t\\\\tdownloadUrl='https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.16%2B8/OpenJDK11U-jdk_aarch64_linux_11.0.16_8.tar.gz'; \\\\t\\\\t\\\\t;; \\\\t\\\\t*) echo &gt;&amp;2 \\\\\\\"error: unsupported architecture: '$arch'\\\\\\\"; exit 1 ;; \\\\tesac; \\\\t\\\\twget --progress=dot:giga -O openjdk.tgz \\\\\\\"$downloadUrl\\\\\\\"; \\\\twget --progress=dot:giga -O openjdk.tgz.asc \\\\\\\"$downloadUrl.sign\\\\\\\"; \\\\t\\\\texport GNUPGHOME=\\\\\\\"$(mktemp -d)\\\\\\\"; \\\\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \\\\tgpg --batch --keyserver keyserver.ubuntu.com --keyserver-options no-self-sigs-only --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \\\\tgpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F \\\\t\\\\t| tee /dev/stderr \\\\t\\\\t| grep '0xA5CD6035332FA671' \\\\t\\\\t| grep 'Andrew Haley'; \\\\tgpg --batch --verify openjdk.tgz.asc openjdk.tgz; \\\\tgpgconf --kill all; \\\\trm -rf \\\\\\\"$GNUPGHOME\\\\\\\"; \\\\t\\\\tmkdir -p \\\\\\\"$JAVA_HOME\\\\\\\"; \\\\ttar --extract \\\\t\\\\t--file openjdk.tgz \\\\t\\\\t--directory \\\\\\\"$JAVA_HOME\\\\\\\" \\\\t\\\\t--strip-components 1 \\\\t\\\\t--no-same-owner \\\\t; \\\\trm openjdk.tgz*; \\\\t\\\\t{ \\\\t\\\\techo '#!/usr/bin/env bash'; \\\\t\\\\techo 'set -Eeuo pipefail'; \\\\t\\\\techo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \\\\\\\"$JAVA_HOME/lib/security/cacerts\\\\\\\"'; \\\\t} &gt; /etc/ca-certificates/update.d/docker-openjdk; \\\\tchmod +x /etc/ca-certificates/update.d/docker-openjdk; \\\\t/etc/ca-certificates/update.d/docker-openjdk; \\\\t\\\\tfind \\\\\\\"$JAVA_HOME/lib\\\\\\\" -name '*.so' -exec dirname '{}' ';' | sort -u &gt; /etc/ld.so.conf.d/docker-openjdk.conf; \\\\tldconfig; \\\\t\\\\tjava -Xshare:dump; \\\\t\\\\tfileEncoding=\\\\\\\"$(echo 'System.out.println(System.getProperty(\\\\\\\"file.encoding\\\\\\\"))' | jshell -s -)\\\\\\\"; [ \\\\\\\"$fileEncoding\\\\\\\" = 'UTF-8' ]; rm -rf ~/.java; \\\\tjavac --version; \\\\tjava --version\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"7bd9969799ce17a0556569dd526d8ab7ad494bdf4217961f231eb2c9850d0b71\\\",\\\"parent\\\":\\\"150bd83bc51ff45895d89bc2a0e22b2b6d2640db9d25e8c8e5e99d5ef0ec7623\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:55.698900058Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV JAVA_VERSION=11.0.16\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"150bd83bc51ff45895d89bc2a0e22b2b6d2640db9d25e8c8e5e99d5ef0ec7623\\\",\\\"parent\\\":\\\"76ae3db4cadf676eda2bac904f9b08c4620c0edc69bada1df7f6395141e133e7\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:55.605571697Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV LANG=C.UTF-8\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"76ae3db4cadf676eda2bac904f9b08c4620c0edc69bada1df7f6395141e133e7\\\",\\\"parent\\\":\\\"4f704e3c8d62be564fab428d5f824d423888d17f29bb1a0495b321e0954792a0\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:55.511643922Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV PATH=/usr/local/openjdk-11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"4f704e3c8d62be564fab428d5f824d423888d17f29bb1a0495b321e0954792a0\\\",\\\"parent\\\":\\\"6ba4d4d4710a6729c268a7ffbac3f8d6e138975207c5dcff733b82797fa2a9fc\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:55.419053573Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c { echo '#/bin/sh'; echo 'echo \\\\\\\"$JAVA_HOME\\\\\\\"'; } &gt; /usr/local/bin/docker-java-home &amp;&amp; chmod +x /usr/local/bin/docker-java-home &amp;&amp; [ \\\\\\\"$JAVA_HOME\\\\\\\" = \\\\\\\"$(docker-java-home)\\\\\\\" ] # backwards compatibility\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"6ba4d4d4710a6729c268a7ffbac3f8d6e138975207c5dcff733b82797fa2a9fc\\\",\\\"parent\\\":\\\"80aae24464862c379e21619d01e692826c9b569555f77d13cdbb817917097635\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:54.830162485Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV JAVA_HOME=/usr/local/openjdk-11\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"80aae24464862c379e21619d01e692826c9b569555f77d13cdbb817917097635\\\",\\\"parent\\\":\\\"16bf8653bb166af978133e007dc3ddedfa0088680a3420bafe56091030653d53\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:54.691790584Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -eux; \\\\tapt-get update; \\\\tapt-get install -y --no-install-recommends \\\\t\\\\tbzip2 \\\\t\\\\tunzip \\\\t\\\\txz-utils \\\\t\\\\t\\\\t\\\\tfontconfig libfreetype6 \\\\t\\\\t\\\\t\\\\tca-certificates p11-kit \\\\t; \\\\trm -rf /var/lib/apt/lists/*\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"16bf8653bb166af978133e007dc3ddedfa0088680a3420bafe56091030653d53\\\",\\\"parent\\\":\\\"76bd2f568bfd26b10c46e1553a12f15fdfd2f79bc650d3d0acee77414d770dc4\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T01:47:17.502915867Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\\t\\\\tgit \\\\t\\\\tmercurial \\\\t\\\\topenssh-client \\\\t\\\\tsubversion \\\\t\\\\t\\\\t\\\\tprocps \\\\t&amp;&amp; rm -rf /var/lib/apt/lists/*\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"76bd2f568bfd26b10c46e1553a12f15fdfd2f79bc650d3d0acee77414d770dc4\\\",\\\"parent\\\":\\\"158fd1860dc8ebca5c9aaf23053db479b21088720e82ad6651aee3448423f68b\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T01:47:01.803843664Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -ex; \\\\tif ! command -v gpg &gt; /dev/null; then \\\\t\\\\tapt-get update; \\\\t\\\\tapt-get install -y --no-install-recommends \\\\t\\\\t\\\\tgnupg \\\\t\\\\t\\\\tdirmngr \\\\t\\\\t; \\\\t\\\\trm -rf /var/lib/apt/lists/*; \\\\tfi\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"158fd1860dc8ebca5c9aaf23053db479b21088720e82ad6651aee3448423f68b\\\",\\\"parent\\\":\\\"85c0165b7b71b79d6ec1dc274c3f97ebf29bcb20a0bf110e4ac049db2a652913\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T01:46:56.05932783Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -eux; \\\\tapt-get update; \\\\tapt-get install -y --no-install-recommends \\\\t\\\\tca-certificates \\\\t\\\\tcurl \\\\t\\\\tnetbase \\\\t\\\\twget \\\\t; \\\\trm -rf /var/lib/apt/lists/*\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"85c0165b7b71b79d6ec1dc274c3f97ebf29bcb20a0bf110e4ac049db2a652913\\\",\\\"parent\\\":\\\"d25d18af6e91fc80186a2cd6a64a2d77a56026d91d18d820965be16be01de88f\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T01:19:54.87196988Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) CMD [\\\\\\\"bash\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"d25d18af6e91fc80186a2cd6a64a2d77a56026d91d18d820965be16be01de88f\\\",\\\"parent\\\":\\\"\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T01:19:54.384822699Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ADD file:d0f758e50c654c225f6c7f03e8a579efc9106437051573bdbae5e63b1c4b2c1f in / \\\"]}}\" } ], \"signatures\" : [ { \"header\" : { \"jwk\" : { \"crv\" : \"P-256\", \"kty\" : \"EC\", \"x\" : \"_98faizl7eVyI8um62-pHZQil8c-bbSNyXZltly8cBI\", \"y\" : \"YVQARWoIRYO_mLRWg3sGtaUa1i3j5_6ZEiP_ogRozJg\" }, \"alg\" : \"ES256\" }, \"signature\" : \"Ycm9LQgRXLL2IcGrxd8e7kUO7NEqmUgH98PnM6Mf0HLVH2_1RJsspk31ka1r0w6fRMW8iCpRDrhOowyM35l0mg\", \"protected\" : \"eyJmb3JtYXRMZW5ndGgiOjEyNDUyLCJmb3JtYXRUYWlsIjoiQ24wIiwidGltZSI6IjIwMjMtMTEtMjZUMzoxNTowMSswMDAwIn0\" } ] } . 2nd Child Image . GET https://dmjgr11.jfrog.io/artifactory/api/docker/spring-vue-starter-repo/v2/spring-vue-image-child-child/manifests/135 { \"schemaVersion\" : 1, \"name\" : \"spring-vue-image-child-child\", \"tag\" : \"135\", \"architecture\" : \"amd64\", \"fsLayers\" : [ { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a199ac3f84ab266ff997cadbc58b7e213a365ef8fbdf5e18635e974e00af1e10\" }, { \"blobSum\" : \"sha256:b170492a3b5fd338b7dd87b44605150d06889f1e916029a3d499f9ae6dcf631a\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:db38d58ec8ab4111b072f6700f978a51985acd252aabce3be377f25162e68301\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:66223a710990a0ae7162aeed80417d30303afa3f24aafa57aa30348725e2230b\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:d85151f15b6683b98f21c3827ac545188b1849efb14a1049710ebc4692de3dd5\" }, { \"blobSum\" : \"sha256:9daef329d35093868ef75ac8b7c6eb407fa53abbcb3a264c218c2ec7bca716e6\" }, { \"blobSum\" : \"sha256:2068746827ec1b043b571e4788693eab7e9b2a95301176512791f8c317a2816a\" }, { \"blobSum\" : \"sha256:d9d4b9b6e964657da49910b495173d6c4f0d9bc47b3b44273cf82fd32723d165\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:001c52e26ad57e3b25b439ee0052f6692e5c0f2d5d982a00a8819ace5e521452\" } ], \"history\" : [ { \"v1Compatibility\" : \"{\\\"container\\\":\\\"333ce8ff4eb781e93aed598347203bb18f2aca1000eca99dd6515a99e6ac4265\\\",\\\"parent\\\":\\\"fca29ab85ad712b2f811746eaa12b0822eace2b468f9012ff21f415e98b776f2\\\",\\\"throwaway\\\":true,\\\"os\\\":\\\"linux\\\",\\\"created\\\":\\\"2023-11-26T01:36:46.845015764Z\\\",\\\"container_config\\\":{\\\"Hostname\\\":\\\"333ce8ff4eb7\\\",\\\"Domainname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":false,\\\"AttachStderr\\\":false,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":[\\\"PATH=/usr/local/openjdk-11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\",\\\"JAVA_HOME=/usr/local/openjdk-11\\\",\\\"LANG=C.UTF-8\\\",\\\"JAVA_VERSION=11.0.16\\\",\\\"MY_NAME=2nd child\\\"],\\\"Cmd\\\":[\\\"/bin/sh\\\",\\\"-c\\\",\\\"#(nop) \\\",\\\"ENV MY_NAME=2nd child\\\"],\\\"Image\\\":\\\"sha256:0e7358f4ed268aad54bdcd325d877e51c1b40dae9ae84cfc335057a51985b33e\\\",\\\"Volumes\\\":null,\\\"WorkingDir\\\":\\\"/app\\\",\\\"Entrypoint\\\":[\\\"java\\\",\\\"-jar\\\",\\\"-Dserver.port=8080\\\",\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\"],\\\"OnBuild\\\":null,\\\"Labels\\\":{}},\\\"id\\\":\\\"63d9b37bfe94c9a327ad9a32dbcfd3aebf2b56fb9ca74706acbcc08ac1f3a5ca\\\",\\\"config\\\":{\\\"Hostname\\\":\\\"\\\",\\\"Domainname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":false,\\\"AttachStderr\\\":false,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":[\\\"PATH=/usr/local/openjdk-11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\",\\\"JAVA_HOME=/usr/local/openjdk-11\\\",\\\"LANG=C.UTF-8\\\",\\\"JAVA_VERSION=11.0.16\\\",\\\"MY_NAME=2nd child\\\"],\\\"Cmd\\\":null,\\\"Image\\\":\\\"sha256:0e7358f4ed268aad54bdcd325d877e51c1b40dae9ae84cfc335057a51985b33e\\\",\\\"Volumes\\\":null,\\\"WorkingDir\\\":\\\"/app\\\",\\\"Entrypoint\\\":[\\\"java\\\",\\\"-jar\\\",\\\"-Dserver.port=8080\\\",\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\"],\\\"OnBuild\\\":null,\\\"Labels\\\":null},\\\"docker_version\\\":\\\"24.0.5\\\",\\\"architecture\\\":\\\"amd64\\\"}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"fca29ab85ad712b2f811746eaa12b0822eace2b468f9012ff21f415e98b776f2\\\",\\\"parent\\\":\\\"1e11cd3f23273e0beff6fb679bf83135304a8bea318d756662d822536f0305d5\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-11-26T01:32:43.64663755Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV MY_NAME=1st child\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"1e11cd3f23273e0beff6fb679bf83135304a8bea318d756662d822536f0305d5\\\",\\\"parent\\\":\\\"f80ece92c78d6dfdb0eb44e1b1276e14097387e082793df3113da76bead22840\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-11-26T01:26:52.991452547Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENTRYPOINT [\\\\\\\"java\\\\\\\" \\\\\\\"-jar\\\\\\\" \\\\\\\"-Dserver.port=8080\\\\\\\" \\\\\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"f80ece92c78d6dfdb0eb44e1b1276e14097387e082793df3113da76bead22840\\\",\\\"parent\\\":\\\"2c2f87c4aa2168e88d936b22d2df087b68f3128254ab3116323c16f1c436d47d\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-11-26T01:26:52.305625088Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) COPY file:8bbc62b0cb34d4df4ef293b81a5de6ebd9b1bb544088353398300187f13b041e in . \\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"2c2f87c4aa2168e88d936b22d2df087b68f3128254ab3116323c16f1c436d47d\\\",\\\"parent\\\":\\\"2557f5457bf26fc998dcefe03e58db922c0c7b9ab5c0dd5e4ca5affcce1cc294\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-11-26T01:26:51.923977723Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) WORKDIR /app\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"2557f5457bf26fc998dcefe03e58db922c0c7b9ab5c0dd5e4ca5affcce1cc294\\\",\\\"parent\\\":\\\"d6eed9a77235113bbd26dd9233d8954696372897202a32132ebe135a348666af\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:52:12.355386837Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) CMD [\\\\\\\"jshell\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"d6eed9a77235113bbd26dd9233d8954696372897202a32132ebe135a348666af\\\",\\\"parent\\\":\\\"7bd9969799ce17a0556569dd526d8ab7ad494bdf4217961f231eb2c9850d0b71\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:52:11.750144107Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -eux; \\\\t\\\\tarch=\\\\\\\"$(dpkg --print-architecture)\\\\\\\"; \\\\tcase \\\\\\\"$arch\\\\\\\" in \\\\t\\\\t'amd64') \\\\t\\\\t\\\\tdownloadUrl='https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.16%2B8/OpenJDK11U-jdk_x64_linux_11.0.16_8.tar.gz'; \\\\t\\\\t\\\\t;; \\\\t\\\\t'arm64') \\\\t\\\\t\\\\tdownloadUrl='https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.16%2B8/OpenJDK11U-jdk_aarch64_linux_11.0.16_8.tar.gz'; \\\\t\\\\t\\\\t;; \\\\t\\\\t*) echo &gt;&amp;2 \\\\\\\"error: unsupported architecture: '$arch'\\\\\\\"; exit 1 ;; \\\\tesac; \\\\t\\\\twget --progress=dot:giga -O openjdk.tgz \\\\\\\"$downloadUrl\\\\\\\"; \\\\twget --progress=dot:giga -O openjdk.tgz.asc \\\\\\\"$downloadUrl.sign\\\\\\\"; \\\\t\\\\texport GNUPGHOME=\\\\\\\"$(mktemp -d)\\\\\\\"; \\\\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \\\\tgpg --batch --keyserver keyserver.ubuntu.com --keyserver-options no-self-sigs-only --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \\\\tgpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F \\\\t\\\\t| tee /dev/stderr \\\\t\\\\t| grep '0xA5CD6035332FA671' \\\\t\\\\t| grep 'Andrew Haley'; \\\\tgpg --batch --verify openjdk.tgz.asc openjdk.tgz; \\\\tgpgconf --kill all; \\\\trm -rf \\\\\\\"$GNUPGHOME\\\\\\\"; \\\\t\\\\tmkdir -p \\\\\\\"$JAVA_HOME\\\\\\\"; \\\\ttar --extract \\\\t\\\\t--file openjdk.tgz \\\\t\\\\t--directory \\\\\\\"$JAVA_HOME\\\\\\\" \\\\t\\\\t--strip-components 1 \\\\t\\\\t--no-same-owner \\\\t; \\\\trm openjdk.tgz*; \\\\t\\\\t{ \\\\t\\\\techo '#!/usr/bin/env bash'; \\\\t\\\\techo 'set -Eeuo pipefail'; \\\\t\\\\techo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \\\\\\\"$JAVA_HOME/lib/security/cacerts\\\\\\\"'; \\\\t} &gt; /etc/ca-certificates/update.d/docker-openjdk; \\\\tchmod +x /etc/ca-certificates/update.d/docker-openjdk; \\\\t/etc/ca-certificates/update.d/docker-openjdk; \\\\t\\\\tfind \\\\\\\"$JAVA_HOME/lib\\\\\\\" -name '*.so' -exec dirname '{}' ';' | sort -u &gt; /etc/ld.so.conf.d/docker-openjdk.conf; \\\\tldconfig; \\\\t\\\\tjava -Xshare:dump; \\\\t\\\\tfileEncoding=\\\\\\\"$(echo 'System.out.println(System.getProperty(\\\\\\\"file.encoding\\\\\\\"))' | jshell -s -)\\\\\\\"; [ \\\\\\\"$fileEncoding\\\\\\\" = 'UTF-8' ]; rm -rf ~/.java; \\\\tjavac --version; \\\\tjava --version\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"7bd9969799ce17a0556569dd526d8ab7ad494bdf4217961f231eb2c9850d0b71\\\",\\\"parent\\\":\\\"150bd83bc51ff45895d89bc2a0e22b2b6d2640db9d25e8c8e5e99d5ef0ec7623\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:55.698900058Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV JAVA_VERSION=11.0.16\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"150bd83bc51ff45895d89bc2a0e22b2b6d2640db9d25e8c8e5e99d5ef0ec7623\\\",\\\"parent\\\":\\\"76ae3db4cadf676eda2bac904f9b08c4620c0edc69bada1df7f6395141e133e7\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:55.605571697Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV LANG=C.UTF-8\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"76ae3db4cadf676eda2bac904f9b08c4620c0edc69bada1df7f6395141e133e7\\\",\\\"parent\\\":\\\"4f704e3c8d62be564fab428d5f824d423888d17f29bb1a0495b321e0954792a0\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:55.511643922Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV PATH=/usr/local/openjdk-11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"4f704e3c8d62be564fab428d5f824d423888d17f29bb1a0495b321e0954792a0\\\",\\\"parent\\\":\\\"6ba4d4d4710a6729c268a7ffbac3f8d6e138975207c5dcff733b82797fa2a9fc\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:55.419053573Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c { echo '#/bin/sh'; echo 'echo \\\\\\\"$JAVA_HOME\\\\\\\"'; } &gt; /usr/local/bin/docker-java-home &amp;&amp; chmod +x /usr/local/bin/docker-java-home &amp;&amp; [ \\\\\\\"$JAVA_HOME\\\\\\\" = \\\\\\\"$(docker-java-home)\\\\\\\" ] # backwards compatibility\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"6ba4d4d4710a6729c268a7ffbac3f8d6e138975207c5dcff733b82797fa2a9fc\\\",\\\"parent\\\":\\\"80aae24464862c379e21619d01e692826c9b569555f77d13cdbb817917097635\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:54.830162485Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV JAVA_HOME=/usr/local/openjdk-11\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"80aae24464862c379e21619d01e692826c9b569555f77d13cdbb817917097635\\\",\\\"parent\\\":\\\"16bf8653bb166af978133e007dc3ddedfa0088680a3420bafe56091030653d53\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T05:51:54.691790584Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -eux; \\\\tapt-get update; \\\\tapt-get install -y --no-install-recommends \\\\t\\\\tbzip2 \\\\t\\\\tunzip \\\\t\\\\txz-utils \\\\t\\\\t\\\\t\\\\tfontconfig libfreetype6 \\\\t\\\\t\\\\t\\\\tca-certificates p11-kit \\\\t; \\\\trm -rf /var/lib/apt/lists/*\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"16bf8653bb166af978133e007dc3ddedfa0088680a3420bafe56091030653d53\\\",\\\"parent\\\":\\\"76bd2f568bfd26b10c46e1553a12f15fdfd2f79bc650d3d0acee77414d770dc4\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T01:47:17.502915867Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\\t\\\\tgit \\\\t\\\\tmercurial \\\\t\\\\topenssh-client \\\\t\\\\tsubversion \\\\t\\\\t\\\\t\\\\tprocps \\\\t&amp;&amp; rm -rf /var/lib/apt/lists/*\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"76bd2f568bfd26b10c46e1553a12f15fdfd2f79bc650d3d0acee77414d770dc4\\\",\\\"parent\\\":\\\"158fd1860dc8ebca5c9aaf23053db479b21088720e82ad6651aee3448423f68b\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T01:47:01.803843664Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -ex; \\\\tif ! command -v gpg &gt; /dev/null; then \\\\t\\\\tapt-get update; \\\\t\\\\tapt-get install -y --no-install-recommends \\\\t\\\\t\\\\tgnupg \\\\t\\\\t\\\\tdirmngr \\\\t\\\\t; \\\\t\\\\trm -rf /var/lib/apt/lists/*; \\\\tfi\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"158fd1860dc8ebca5c9aaf23053db479b21088720e82ad6651aee3448423f68b\\\",\\\"parent\\\":\\\"85c0165b7b71b79d6ec1dc274c3f97ebf29bcb20a0bf110e4ac049db2a652913\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T01:46:56.05932783Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -eux; \\\\tapt-get update; \\\\tapt-get install -y --no-install-recommends \\\\t\\\\tca-certificates \\\\t\\\\tcurl \\\\t\\\\tnetbase \\\\t\\\\twget \\\\t; \\\\trm -rf /var/lib/apt/lists/*\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"85c0165b7b71b79d6ec1dc274c3f97ebf29bcb20a0bf110e4ac049db2a652913\\\",\\\"parent\\\":\\\"d25d18af6e91fc80186a2cd6a64a2d77a56026d91d18d820965be16be01de88f\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T01:19:54.87196988Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) CMD [\\\\\\\"bash\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"d25d18af6e91fc80186a2cd6a64a2d77a56026d91d18d820965be16be01de88f\\\",\\\"parent\\\":\\\"\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-08-02T01:19:54.384822699Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ADD file:d0f758e50c654c225f6c7f03e8a579efc9106437051573bdbae5e63b1c4b2c1f in / \\\"]}}\" } ], \"signatures\" : [ { \"header\" : { \"jwk\" : { \"crv\" : \"P-256\", \"kty\" : \"EC\", \"x\" : \"ctV8MpzGS9SOX6kVVeBQ4JDdUMoGU1VsP_LBBE0GdmA\", \"y\" : \"sRisGzR3kiqp13dEVqSd3LAIfWqGJYQuOyQpmMfzNNI\" }, \"alg\" : \"ES256\" }, \"signature\" : \"G8Gh_YvTe4HvILpWA2yUkDMkxzQzOPI7JRMh9GgPFHSfl_DjQHzPSfxXRgPkfGxamAb-py36vImHJ7-rGZdQFQ\", \"protected\" : \"eyJmb3JtYXRMZW5ndGgiOjEyOTA3LCJmb3JtYXRUYWlsIjoiQ24wIiwidGltZSI6IjIwMjMtMTEtMjZUMzoxNzozMiswMDAwIn0\" } ] } . ",
    "url": "/docs/cicdtools/jfrog-dockerlayer-example/#docker-history-from-jfrog",
    
    "relUrl": "/docs/cicdtools/jfrog-dockerlayer-example/#docker-history-from-jfrog"
  },"230": {
    "doc": "Docker Layer Analysis 상세 분석",
    "title": "“Image” 해쉬값 확인",
    "content": "Parent Image . =&gt; \\\"Image\\\":\\\"sha256:1062200af8349a3537db4c1c34ff9077952e801c37bdc8f6c376c3f1d5ce5070\\\" GET https://dmjgr11.jfrog.io/artifactory/api/search/checksum?sha256=1062200af8349a3537db4c1c34ff9077952e801c37bdc8f6c376c3f1d5ce5070 { \"results\": [] } . 1st Child Image . =&gt; \\\"Image\\\":\\\"sha256:0d46410308777973d51d3ffc0639b7670c04d34968650f56f6ed5304c5359c9d\\\" GET https://dmjgr11.jfrog.io/artifactory/api/search/checksum?sha256=0d46410308777973d51d3ffc0639b7670c04d34968650f56f6ed5304c5359c9d { \"results\": [ { \"uri\": \"https://dmjgr11.jfrog.io/artifactory/api/storage/spring-vue-starter-repo/spring-vue-image/_uploads/sha256__0d46410308777973d51d3ffc0639b7670c04d34968650f56f6ed5304c5359c9d\" }, { \"uri\": \"https://dmjgr11.jfrog.io/artifactory/api/storage/spring-vue-starter-repo/spring-vue-image/131/sha256__0d46410308777973d51d3ffc0639b7670c04d34968650f56f6ed5304c5359c9d\" } ] } . 2nd Child Image . =&gt; \\\"Image\\\":\\\"sha256:0e7358f4ed268aad54bdcd325d877e51c1b40dae9ae84cfc335057a51985b33e\\\" GET https://dmjgr11.jfrog.io/artifactory/api/search/checksum?sha256=0e7358f4ed268aad54bdcd325d877e51c1b40dae9ae84cfc335057a51985b33e { \"results\": [ { \"uri\": \"https://dmjgr11.jfrog.io/artifactory/api/storage/spring-vue-starter-repo/spring-vue-image-child/_uploads/sha256__0e7358f4ed268aad54bdcd325d877e51c1b40dae9ae84cfc335057a51985b33e\" }, { \"uri\": \"https://dmjgr11.jfrog.io/artifactory/api/storage/spring-vue-starter-repo/spring-vue-image-child/133/sha256__0e7358f4ed268aad54bdcd325d877e51c1b40dae9ae84cfc335057a51985b33e\" } ] } . 아래와 같이 AQL 을 사용하여 상세 정보를 조회할 수 있다. POST https://dmjgr11.jfrog.io/artifactory/api/search/aql items.find({ \"type\": \"file\", \"name\": \"sha256__0e7358f4ed268aad54bdcd325d877e51c1b40dae9ae84cfc335057a51985b33e\" }).include(\"property.*\") { \"results\": [ { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image-child/_uploads\", \"name\": \"sha256__0e7358f4ed268aad54bdcd325d877e51c1b40dae9ae84cfc335057a51985b33e\", \"type\": \"file\", \"size\": 7152, \"created\": \"2023-11-26T01:33:13.571Z\", \"created_by\": \"dmjgr11@gmail.com\", \"modified\": \"2023-11-26T01:33:13.435Z\", \"modified_by\": \"dmjgr11@gmail.com\", \"updated\": \"2023-11-26T01:33:13.573Z\", \"properties\": [ { \"key\": \"sha256\", \"value\": \"0e7358f4ed268aad54bdcd325d877e51c1b40dae9ae84cfc335057a51985b33e\" } ] }, { \"repo\": \"spring-vue-starter-repo\", \"path\": \"spring-vue-image-child/133\", \"name\": \"sha256__0e7358f4ed268aad54bdcd325d877e51c1b40dae9ae84cfc335057a51985b33e\", \"type\": \"file\", \"size\": 7152, \"created\": \"2023-11-26T01:33:13.571Z\", \"created_by\": \"dmjgr11@gmail.com\", \"modified\": \"2023-11-26T01:33:13.435Z\", \"modified_by\": \"dmjgr11@gmail.com\", \"updated\": \"2023-11-26T01:33:13.573Z\", \"properties\": [ { \"key\": \"sha256\", \"value\": \"0e7358f4ed268aad54bdcd325d877e51c1b40dae9ae84cfc335057a51985b33e\" } ] } ], \"range\": { \"start_pos\": 0, \"end_pos\": 2, \"total\": 2 } } . ",
    "url": "/docs/cicdtools/jfrog-dockerlayer-example/#image-%ED%95%B4%EC%89%AC%EA%B0%92-%ED%99%95%EC%9D%B8",
    
    "relUrl": "/docs/cicdtools/jfrog-dockerlayer-example/#image-해쉬값-확인"
  },"231": {
    "doc": "Docker Layer Analysis 상세 분석",
    "title": "의문 사항",
    "content": "Dockerfile 작성 시 Base image 유무 확인 . Image URL 로부터 Repository, Image name, Tag 정보를 확인할 수 있으므로 해당 이미지 존재 확인이 가능하다. 기존 Docker Image 에서의 Base Image 존재 유무 확인 . Dockerfile 에서의 base image 를 삭제하였더라도, 이미 생성된 이미지들은 레이어별로 도커 이미지가 관리되므로 문제가 발생하지 않는다. 단, 해당 Dockerfile 을 재빌드시는 해당 이미지가 존재하지 않으므로 빌드가 되지 않는다. | 이미지 레이어 확인 | . GET https://dmjgr11.jfrog.io/artifactory/api/docker/{repository}/v2/{imagePath}/manifests/{tag} . | history.v1Compatibility 에서 “Image” 의 해쉬값을 조회하여, 해당 Digest 값을 가지는 도커 이미지들을 조회한다. | . GET https://dmjgr11.jfrog.io/artifactory/api/search/checksum?sha256={hash} 또는 POST https://dmjgr11.jfrog.io/artifactory/api/search/aql items.find({ \"type\": \"file\", \"name\": \"{hash}\" }).include(\"property.*\") . 어쨋든 기존 이미지의 Base Image 존재 체크는 이미 자기 이미지의 레이어에 내포되어 있기 때문에 체크할 필요는 없다. [Check Base Images] . ",
    "url": "/docs/cicdtools/jfrog-dockerlayer-example/#%EC%9D%98%EB%AC%B8-%EC%82%AC%ED%95%AD",
    
    "relUrl": "/docs/cicdtools/jfrog-dockerlayer-example/#의문-사항"
  },"232": {
    "doc": "Docker Layer Analysis",
    "title": "Docker Layer Analysis",
    "content": " ",
    "url": "/docs/cicdtools/jfrog-dockerlayer/",
    
    "relUrl": "/docs/cicdtools/jfrog-dockerlayer/"
  },"233": {
    "doc": "Docker Layer Analysis",
    "title": "Table of contents",
    "content": ". | Child of Child Image | Child Image | Public Base Image | 분석 요약 | 분석 결과 | . Docker Image 의 Base Image 를 확인하기 위한 분석 내용으로 정리해보고자 한다. 예시로서 아래와 같은 Docker Image 가 있다는 가정하에 분석한다. ㄴ spring-vue-image:90 : FROM openjdk:17 : ... ㄴ spring-vue-image-child:95 : FROM dmjgr11.jfrog.io/spring-vue-starter-repo/spring-vue-image:90 : ... ㄴ spring-vue-image-child-child:97 : FROM dmjgr11.jfrog.io/spring-vue-starter-repo/spring-vue-image-child:95 : ... Child of Child Image . https://dmjgr11.jfrog.io/artifactory/api/docker/spring-vue-starter-repo/v2/spring-vue-image-child-child/manifests/97 { \"schemaVersion\" : 1, \"name\" : \"spring-vue-image-child-child\", \"tag\" : \"97\", \"architecture\" : \"amd64\", \"fsLayers\" : [ { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { ## 중간 생략 \"blobSum\" : \"sha256:38a980f2cc8accf69c23deae6743d42a87eb34a54f02396f3fcfd7c2d06e2c5b\" } ], \"history\" : [ { \"v1Compatibility\" : \"{\\\"container\\\":\\\"bbbf8f6fbd7fdca14df2542cefd8bd2707fe184821588df701a8289a187c5a07\\\",\\\"parent\\\":\\\"5c9af3c061f590ba4c44c90f1eb10b959c9376fefd3419b1ed87e09ffe962ae8\\\",\\\"throwaway\\\":true,\\\"os\\\":\\\"linux\\\",\\\"created\\\":\\\"2023-11-24T14:35:34.142786732Z\\\",\\\"container_config\\\":{\\\"Hostname\\\":\\\"bbbf8f6fbd7f\\\",\\\"Domainname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":false,\\\"AttachStderr\\\":false,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":[\\\"PATH=/usr/java/openjdk-17/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\",\\\"JAVA_HOME=/usr/java/openjdk-17\\\",\\\"LANG=C.UTF-8\\\",\\\"JAVA_VERSION=17.0.2\\\",\\\"MY_NAME=IAM CHILD OF CHILD\\\"],\\\"Cmd\\\":[\\\"/bin/sh\\\",\\\"-c\\\",\\\"#(nop) \\\",\\\"ENV MY_NAME=IAM CHILD OF CHILD\\\"],\\\"Image\\\":\\\"sha256:d2ee3fab8b7fa900411abee2f27d10d00872fe11d386bac642fd515c91adeedd\\\",\\\"Volumes\\\":null,\\\"WorkingDir\\\":\\\"/app\\\",\\\"Entrypoint\\\":[\\\"java\\\",\\\"-jar\\\",\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\"],\\\"OnBuild\\\":null,\\\"Labels\\\":{}},\\\"id\\\":\\\"16b1dc92aea35373c31ccff66aea179c0436d7fc4e5a630cd0267628fa2d5e8b\\\",\\\"config\\\":{\\\"Hostname\\\":\\\"\\\",\\\"Domainname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":false,\\\"AttachStderr\\\":false,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":[\\\"PATH=/usr/java/openjdk-17/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\",\\\"JAVA_HOME=/usr/java/openjdk-17\\\",\\\"LANG=C.UTF-8\\\",\\\"JAVA_VERSION=17.0.2\\\",\\\"MY_NAME=IAM CHILD OF CHILD\\\"],\\\"Cmd\\\":null,\\\"Image\\\":\\\"sha256:d2ee3fab8b7fa900411abee2f27d10d00872fe11d386bac642fd515c91adeedd\\\",\\\"Volumes\\\":null,\\\"WorkingDir\\\":\\\"/app\\\",\\\"Entrypoint\\\":[\\\"java\\\",\\\"-jar\\\",\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\"],\\\"OnBuild\\\":null,\\\"Labels\\\":null},\\\"docker_version\\\":\\\"24.0.5\\\",\\\"architecture\\\":\\\"amd64\\\"}\" }, { ## 중간 생략 \"v1Compatibility\" : \"{\\\"id\\\":\\\"eff06ff0328aa3b368603706fe11484281cafb352051fc4d247c10f364674c78\\\",\\\"parent\\\":\\\"e9799d31bb42665d55ea83786be278d044bdd77b7045b9e27dd976d80eba1fb0\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:28.871350186Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) CMD [\\\\\\\"jshell\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"e9799d31bb42665d55ea83786be278d044bdd77b7045b9e27dd976d80eba1fb0\\\",\\\"parent\\\":\\\"eb51a7d6c41e9e10355f32f85033e48f4dfeed042f8d793b965eb9de8bc5ba36\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:28.248363534Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -eux; \\\\t\\\\tarch=\\\\\\\"$(objdump=\\\\\\\"$(command -v objdump)\\\\\\\" &amp;&amp; objdump --file-headers \\\\\\\"$objdump\\\\\\\" | awk -F '[:,]+[[:space:]]+' '$1 == \\\\\\\"architecture\\\\\\\" { print $2 }')\\\\\\\"; \\\\tcase \\\\\\\"$arch\\\\\\\" in \\\\t\\\\t'i386:x86-64') \\\\t\\\\t\\\\tdownloadUrl='https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz'; \\\\t\\\\t\\\\tdownloadSha256='0022753d0cceecacdd3a795dd4cea2bd7ffdf9dc06e22ffd1be98411742fbb44'; \\\\t\\\\t\\\\t;; \\\\t\\\\t'aarch64') \\\\t\\\\t\\\\tdownloadUrl='https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-aarch64_bin.tar.gz'; \\\\t\\\\t\\\\tdownloadSha256='13bfd976acf8803f862e82c7113fb0e9311ca5458b1decaef8a09ffd91119fa4'; \\\\t\\\\t\\\\t;; \\\\t\\\\t*) echo &gt;&amp;2 \\\\\\\"error: unsupported architecture: '$arch'\\\\\\\"; exit 1 ;; \\\\tesac; \\\\t\\\\tcurl -fL -o openjdk.tgz \\\\\\\"$downloadUrl\\\\\\\"; \\\\techo \\\\\\\"$downloadSha256 *openjdk.tgz\\\\\\\" | sha256sum --strict --check -; \\\\t\\\\tmkdir -p \\\\\\\"$JAVA_HOME\\\\\\\"; \\\\ttar --extract \\\\t\\\\t--file openjdk.tgz \\\\t\\\\t--directory \\\\\\\"$JAVA_HOME\\\\\\\" \\\\t\\\\t--strip-components 1 \\\\t\\\\t--no-same-owner \\\\t; \\\\trm openjdk.tgz*; \\\\t\\\\trm -rf \\\\\\\"$JAVA_HOME/lib/security/cacerts\\\\\\\"; \\\\tln -sT /etc/pki/ca-trust/extracted/java/cacerts \\\\\\\"$JAVA_HOME/lib/security/cacerts\\\\\\\"; \\\\t\\\\tln -sfT \\\\\\\"$JAVA_HOME\\\\\\\" /usr/java/default; \\\\tln -sfT \\\\\\\"$JAVA_HOME\\\\\\\" /usr/java/latest; \\\\tfor bin in \\\\\\\"$JAVA_HOME/bin/\\\\\\\"*; do \\\\t\\\\tbase=\\\\\\\"$(basename \\\\\\\"$bin\\\\\\\")\\\\\\\"; \\\\t\\\\t[ ! -e \\\\\\\"/usr/bin/$base\\\\\\\" ]; \\\\t\\\\talternatives --install \\\\\\\"/usr/bin/$base\\\\\\\" \\\\\\\"$base\\\\\\\" \\\\\\\"$bin\\\\\\\" 20000; \\\\tdone; \\\\t\\\\tjava -Xshare:dump; \\\\t\\\\tfileEncoding=\\\\\\\"$(echo 'System.out.println(System.getProperty(\\\\\\\"file.encoding\\\\\\\"))' | jshell -s -)\\\\\\\"; [ \\\\\\\"$fileEncoding\\\\\\\" = 'UTF-8' ]; rm -rf ~/.java; \\\\tjavac --version; \\\\tjava --version\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"eb51a7d6c41e9e10355f32f85033e48f4dfeed042f8d793b965eb9de8bc5ba36\\\",\\\"parent\\\":\\\"9f856f090b3536454e5dfb06417462f2b7f391d5dbcc5d4d8ce39eccc26f6528\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:18.81978611Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV JAVA_VERSION=17.0.2\\\"]}}\" }, { # 중간 생략 }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"307d1c5b9e9926994500bc7e8c7be52284699ad8b7bceaed378f6b7cbb328a91\\\",\\\"parent\\\":\\\"\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T20:33:04.547787858Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ADD file:9893213a9ea238f53ac68d87a3cf2f05d86763688392e5ddb6a2c9b60d3550a6 in / \\\"]}}\" } ], \"signatures\" : [ { \"header\" : { \"jwk\" : { \"crv\" : \"P-256\", \"kty\" : \"EC\", \"x\" : \"xcUHWc_FUb-I5ohDPSuFL5LZ2MttJiq50YV6GkdNeWc\", \"y\" : \"aC8lnoi5AviTdmIEXXo9kpnuVITwaGV_FrVLxwzcSAw\" }, \"alg\" : \"ES256\" }, \"signature\" : \"0kZo0XIcVUE4S6qeSB6JcytUe7eKwn1Jh6Ll9GoldpCdv3sWYvrUvXz1JyZX0JhUQ4P8s11_eb-8Pv06z_khSw\", \"protected\" : \"eyJmb3JtYXRMZW5ndGgiOjk5NzIsImZvcm1hdFRhaWwiOiJDbjAiLCJ0aW1lIjoiMjAyMy0xMS0yNFQyOjQ0OjQ2KzAwMDAifQ\" } ] } . 위와 같이 \\\"Image\\\":\\\"sha256: 부분이 존재한다. 이 해쉬넘버가 베이스 이미지 해쉬일 것으로 추측된다. 한번 확인해 보자. GET https://dmjgr11.jfrog.io/artifactory/api/search/checksum?sha256=d2ee3fab8b7fa900411abee2f27d10d00872fe11d386bac642fd515c91adeedd { \"results\": [ { \"uri\": \"https://dmjgr11.jfrog.io/artifactory/api/storage/spring-vue-starter-repo/spring-vue-image-child/95/sha256__d2ee3fab8b7fa900411abee2f27d10d00872fe11d386bac642fd515c91adeedd\" }, { \"uri\": \"https://dmjgr11.jfrog.io/artifactory/api/storage/spring-vue-starter-repo/spring-vue-image-child/_uploads/sha256__d2ee3fab8b7fa900411abee2f27d10d00872fe11d386bac642fd515c91adeedd\" } ] } . 실제로 Base Image 로 활용했던 spring-vue-image-child/95 가 조회된다. ",
    "url": "/docs/cicdtools/jfrog-dockerlayer/#table-of-contents",
    
    "relUrl": "/docs/cicdtools/jfrog-dockerlayer/#table-of-contents"
  },"234": {
    "doc": "Docker Layer Analysis",
    "title": "Child Image",
    "content": "이 케이스는 어떨까? . GET https://dmjgr11.jfrog.io/artifactory/api/docker/spring-vue-starter-repo/v2/spring-vue-image-child/manifests/95 { \"schemaVersion\" : 1, \"name\" : \"spring-vue-image-child\", \"tag\" : \"95\", \"architecture\" : \"amd64\", \"fsLayers\" : [ { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:2bde522f954fe46c4abe389ff03d4f12ef885aa822bf6a9cae730d4f89440d2f\" }, { \"blobSum\" : \"sha256:2678ca58edbecc75c354e98f96efa24be413e49ccc284aa51cb0d6c262738128\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a7203ca35e75e068651c9907d659adc721dba823441b78639fde66fc988f042f\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:de849f1cfbe60b1c06a1db83a3129ab0ea397c4852b98e3e4300b12ee57ba111\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:38a980f2cc8accf69c23deae6743d42a87eb34a54f02396f3fcfd7c2d06e2c5b\" } ], \"history\" : [ { \"v1Compatibility\" : \"{\\\"container\\\":\\\"a2c93c431b6774ee860328409b263c704eff0a7ccb497464befc09cb85faf5b3\\\",\\\"parent\\\":\\\"6284645ce2757b9ac13f4e2f4ae4fd4e0294f8260f99ac0da174c2ba55c61431\\\",\\\"throwaway\\\":true,\\\"os\\\":\\\"linux\\\",\\\"created\\\":\\\"2023-11-24T13:38:34.194337895Z\\\",\\\"container_config\\\":{\\\"Hostname\\\":\\\"a2c93c431b67\\\",\\\"Domainname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":false,\\\"AttachStderr\\\":false,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":[\\\"PATH=/usr/java/openjdk-17/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\",\\\"JAVA_HOME=/usr/java/openjdk-17\\\",\\\"LANG=C.UTF-8\\\",\\\"JAVA_VERSION=17.0.2\\\",\\\"MY_NAME=John Doe\\\"],\\\"Cmd\\\":[\\\"/bin/sh\\\",\\\"-c\\\",\\\"#(nop) \\\",\\\"ENV MY_NAME=John Doe\\\"],\\\"Image\\\":\\\"sha256:53ae2020bd8e6bd80952db2ce7c7ffcf01d56c43bd1fd44c3dd918549d4eca85\\\",\\\"Volumes\\\":null,\\\"WorkingDir\\\":\\\"/app\\\",\\\"Entrypoint\\\":[\\\"java\\\",\\\"-jar\\\",\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\"],\\\"OnBuild\\\":null,\\\"Labels\\\":{}},\\\"id\\\":\\\"d0412b62f2468198f91c92ef5c7f2b4eefdb53eeeb114364e263952da03aaea6\\\",\\\"config\\\":{\\\"Hostname\\\":\\\"\\\",\\\"Domainname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":false,\\\"AttachStderr\\\":false,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":[\\\"PATH=/usr/java/openjdk-17/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\",\\\"JAVA_HOME=/usr/java/openjdk-17\\\",\\\"LANG=C.UTF-8\\\",\\\"JAVA_VERSION=17.0.2\\\",\\\"MY_NAME=John Doe\\\"],\\\"Cmd\\\":null,\\\"Image\\\":\\\"sha256:53ae2020bd8e6bd80952db2ce7c7ffcf01d56c43bd1fd44c3dd918549d4eca85\\\",\\\"Volumes\\\":null,\\\"WorkingDir\\\":\\\"/app\\\",\\\"Entrypoint\\\":[\\\"java\\\",\\\"-jar\\\",\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\"],\\\"OnBuild\\\":null,\\\"Labels\\\":null},\\\"docker_version\\\":\\\"24.0.5\\\",\\\"architecture\\\":\\\"amd64\\\"}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"6284645ce2757b9ac13f4e2f4ae4fd4e0294f8260f99ac0da174c2ba55c61431\\\",\\\"parent\\\":\\\"5c038964690f2eebea3feb8a0eaf48b52de43c5a93ce2ed852dc13b6e58daf92\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-10-27T14:08:59.080963116Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENTRYPOINT [\\\\\\\"java\\\\\\\" \\\\\\\"-jar\\\\\\\" \\\\\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"5c038964690f2eebea3feb8a0eaf48b52de43c5a93ce2ed852dc13b6e58daf92\\\",\\\"parent\\\":\\\"9ce3e6d90a73c949485418a1ffe7958113c2026d1cc722c0ba64a3cd088400b0\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-10-27T14:08:58.554940559Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) COPY file:3708ed22897e6f3364d3a7685bf03434e941c9676059fc904b08fdc1e1c234d7 in . \\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"9ce3e6d90a73c949485418a1ffe7958113c2026d1cc722c0ba64a3cd088400b0\\\",\\\"parent\\\":\\\"eff06ff0328aa3b368603706fe11484281cafb352051fc4d247c10f364674c78\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-10-27T14:08:58.189848571Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) WORKDIR /app\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"eff06ff0328aa3b368603706fe11484281cafb352051fc4d247c10f364674c78\\\",\\\"parent\\\":\\\"e9799d31bb42665d55ea83786be278d044bdd77b7045b9e27dd976d80eba1fb0\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:28.871350186Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) CMD [\\\\\\\"jshell\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"e9799d31bb42665d55ea83786be278d044bdd77b7045b9e27dd976d80eba1fb0\\\",\\\"parent\\\":\\\"eb51a7d6c41e9e10355f32f85033e48f4dfeed042f8d793b965eb9de8bc5ba36\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:28.248363534Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -eux; \\\\t\\\\tarch=\\\\\\\"$(objdump=\\\\\\\"$(command -v objdump)\\\\\\\" &amp;&amp; objdump --file-headers \\\\\\\"$objdump\\\\\\\" | awk -F '[:,]+[[:space:]]+' '$1 == \\\\\\\"architecture\\\\\\\" { print $2 }')\\\\\\\"; \\\\tcase \\\\\\\"$arch\\\\\\\" in \\\\t\\\\t'i386:x86-64') \\\\t\\\\t\\\\tdownloadUrl='https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz'; \\\\t\\\\t\\\\tdownloadSha256='0022753d0cceecacdd3a795dd4cea2bd7ffdf9dc06e22ffd1be98411742fbb44'; \\\\t\\\\t\\\\t;; \\\\t\\\\t'aarch64') \\\\t\\\\t\\\\tdownloadUrl='https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-aarch64_bin.tar.gz'; \\\\t\\\\t\\\\tdownloadSha256='13bfd976acf8803f862e82c7113fb0e9311ca5458b1decaef8a09ffd91119fa4'; \\\\t\\\\t\\\\t;; \\\\t\\\\t*) echo &gt;&amp;2 \\\\\\\"error: unsupported architecture: '$arch'\\\\\\\"; exit 1 ;; \\\\tesac; \\\\t\\\\tcurl -fL -o openjdk.tgz \\\\\\\"$downloadUrl\\\\\\\"; \\\\techo \\\\\\\"$downloadSha256 *openjdk.tgz\\\\\\\" | sha256sum --strict --check -; \\\\t\\\\tmkdir -p \\\\\\\"$JAVA_HOME\\\\\\\"; \\\\ttar --extract \\\\t\\\\t--file openjdk.tgz \\\\t\\\\t--directory \\\\\\\"$JAVA_HOME\\\\\\\" \\\\t\\\\t--strip-components 1 \\\\t\\\\t--no-same-owner \\\\t; \\\\trm openjdk.tgz*; \\\\t\\\\trm -rf \\\\\\\"$JAVA_HOME/lib/security/cacerts\\\\\\\"; \\\\tln -sT /etc/pki/ca-trust/extracted/java/cacerts \\\\\\\"$JAVA_HOME/lib/security/cacerts\\\\\\\"; \\\\t\\\\tln -sfT \\\\\\\"$JAVA_HOME\\\\\\\" /usr/java/default; \\\\tln -sfT \\\\\\\"$JAVA_HOME\\\\\\\" /usr/java/latest; \\\\tfor bin in \\\\\\\"$JAVA_HOME/bin/\\\\\\\"*; do \\\\t\\\\tbase=\\\\\\\"$(basename \\\\\\\"$bin\\\\\\\")\\\\\\\"; \\\\t\\\\t[ ! -e \\\\\\\"/usr/bin/$base\\\\\\\" ]; \\\\t\\\\talternatives --install \\\\\\\"/usr/bin/$base\\\\\\\" \\\\\\\"$base\\\\\\\" \\\\\\\"$bin\\\\\\\" 20000; \\\\tdone; \\\\t\\\\tjava -Xshare:dump; \\\\t\\\\tfileEncoding=\\\\\\\"$(echo 'System.out.println(System.getProperty(\\\\\\\"file.encoding\\\\\\\"))' | jshell -s -)\\\\\\\"; [ \\\\\\\"$fileEncoding\\\\\\\" = 'UTF-8' ]; rm -rf ~/.java; \\\\tjavac --version; \\\\tjava --version\\\"]}}\" }, { ### 중간 생략 . \\\"Image\\\":\\\"sha256:53ae2020bd8e6bd80952db2ce7c7ffcf01d56c43bd1fd44c3dd918549d4eca85\\\", 이 부분을 조회해 보면 아래와 같다. GET https://dmjgr11.jfrog.io/artifactory/api/search/checksum?sha256=53ae2020bd8e6bd80952db2ce7c7ffcf01d56c43bd1fd44c3dd918549d4eca85 { \"results\": [ { \"uri\": \"https://dmjgr11.jfrog.io/artifactory/api/storage/docker-trial/testimage/1.123/sha256__53ae2020bd8e6bd80952db2ce7c7ffcf01d56c43bd1fd44c3dd918549d4eca85\" }, { \"uri\": \"https://dmjgr11.jfrog.io/artifactory/api/storage/spring-vue-starter-repo/spring-vue-image/93/sha256__53ae2020bd8e6bd80952db2ce7c7ffcf01d56c43bd1fd44c3dd918549d4eca85\" }, { \"uri\": \"https://dmjgr11.jfrog.io/artifactory/api/storage/spring-vue-starter-repo/spring-vue-image/90/sha256__53ae2020bd8e6bd80952db2ce7c7ffcf01d56c43bd1fd44c3dd918549d4eca85\" } ] } . 이미지로 사용된 spring-vue-starter-repo/spring-vue-image/90 를 찾아볼 수 있다. ",
    "url": "/docs/cicdtools/jfrog-dockerlayer/#child-image",
    
    "relUrl": "/docs/cicdtools/jfrog-dockerlayer/#child-image"
  },"235": {
    "doc": "Docker Layer Analysis",
    "title": "Public Base Image",
    "content": "Public Base Image 로 구성된 이미지는 어떨까? . GET https://dmjgr11.jfrog.io/artifactory/api/docker/spring-vue-starter-repo/v2/spring-vue-image/manifests/90 { \"schemaVersion\" : 1, \"name\" : \"spring-vue-image\", \"tag\" : \"90\", \"architecture\" : \"amd64\", \"fsLayers\" : [ { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:2bde522f954fe46c4abe389ff03d4f12ef885aa822bf6a9cae730d4f89440d2f\" }, { \"blobSum\" : \"sha256:2678ca58edbecc75c354e98f96efa24be413e49ccc284aa51cb0d6c262738128\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a7203ca35e75e068651c9907d659adc721dba823441b78639fde66fc988f042f\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:de849f1cfbe60b1c06a1db83a3129ab0ea397c4852b98e3e4300b12ee57ba111\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:38a980f2cc8accf69c23deae6743d42a87eb34a54f02396f3fcfd7c2d06e2c5b\" } ], \"history\" : [ { \"v1Compatibility\" : \"{\\\"container\\\":\\\"7dc99e0582f8a72cf69609281a1a2c0c3a7819b514007d40d34c1a2790f73014\\\",\\\"parent\\\":\\\"5c038964690f2eebea3feb8a0eaf48b52de43c5a93ce2ed852dc13b6e58daf92\\\",\\\"throwaway\\\":true,\\\"os\\\":\\\"linux\\\",\\\"created\\\":\\\"2023-10-27T14:08:59.080963116Z\\\",\\\"container_config\\\":{\\\"Hostname\\\":\\\"7dc99e0582f8\\\",\\\"Domainname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":false,\\\"AttachStderr\\\":false,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":[\\\"PATH=/usr/java/openjdk-17/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\",\\\"JAVA_HOME=/usr/java/openjdk-17\\\",\\\"LANG=C.UTF-8\\\",\\\"JAVA_VERSION=17.0.2\\\"],\\\"Cmd\\\":[\\\"/bin/sh\\\",\\\"-c\\\",\\\"#(nop) \\\",\\\"ENTRYPOINT [\\\\\\\"java\\\\\\\" \\\\\\\"-jar\\\\\\\" \\\\\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\\\\\"]\\\"],\\\"Image\\\":\\\"sha256:925cc8c298f96a1e65fb921a97d2070f07d0ee5d8fc2bf51a4eefa21f3d5801c\\\",\\\"Volumes\\\":null,\\\"WorkingDir\\\":\\\"/app\\\",\\\"Entrypoint\\\":[\\\"java\\\",\\\"-jar\\\",\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\"],\\\"OnBuild\\\":null,\\\"Labels\\\":{}},\\\"id\\\":\\\"bb29b57540358b046517e807f0161de09794647b0bdcc8e3baad2f10270e25e6\\\",\\\"config\\\":{\\\"Hostname\\\":\\\"\\\",\\\"Domainname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":false,\\\"AttachStderr\\\":false,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":[\\\"PATH=/usr/java/openjdk-17/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\",\\\"JAVA_HOME=/usr/java/openjdk-17\\\",\\\"LANG=C.UTF-8\\\",\\\"JAVA_VERSION=17.0.2\\\"],\\\"Cmd\\\":null,\\\"Image\\\":\\\"sha256:925cc8c298f96a1e65fb921a97d2070f07d0ee5d8fc2bf51a4eefa21f3d5801c\\\",\\\"Volumes\\\":null,\\\"WorkingDir\\\":\\\"/app\\\",\\\"Entrypoint\\\":[\\\"java\\\",\\\"-jar\\\",\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\"],\\\"OnBuild\\\":null,\\\"Labels\\\":null},\\\"docker_version\\\":\\\"24.0.5\\\",\\\"architecture\\\":\\\"amd64\\\"}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"5c038964690f2eebea3feb8a0eaf48b52de43c5a93ce2ed852dc13b6e58daf92\\\",\\\"parent\\\":\\\"9ce3e6d90a73c949485418a1ffe7958113c2026d1cc722c0ba64a3cd088400b0\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-10-27T14:08:58.554940559Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) COPY file:3708ed22897e6f3364d3a7685bf03434e941c9676059fc904b08fdc1e1c234d7 in . \\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"9ce3e6d90a73c949485418a1ffe7958113c2026d1cc722c0ba64a3cd088400b0\\\",\\\"parent\\\":\\\"eff06ff0328aa3b368603706fe11484281cafb352051fc4d247c10f364674c78\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-10-27T14:08:58.189848571Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) WORKDIR /app\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"eff06ff0328aa3b368603706fe11484281cafb352051fc4d247c10f364674c78\\\",\\\"parent\\\":\\\"e9799d31bb42665d55ea83786be278d044bdd77b7045b9e27dd976d80eba1fb0\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:28.871350186Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) CMD [\\\\\\\"jshell\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"e9799d31bb42665d55ea83786be278d044bdd77b7045b9e27dd976d80eba1fb0\\\",\\\"parent\\\":\\\"eb51a7d6c41e9e10355f32f85033e48f4dfeed042f8d793b965eb9de8bc5ba36\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:28.248363534Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -eux; \\\\t\\\\tarch=\\\\\\\"$(objdump=\\\\\\\"$(command -v objdump)\\\\\\\" &amp;&amp; objdump --file-headers \\\\\\\"$objdump\\\\\\\" | awk -F '[:,]+[[:space:]]+' '$1 == \\\\\\\"architecture\\\\\\\" { print $2 }')\\\\\\\"; \\\\tcase \\\\\\\"$arch\\\\\\\" in \\\\t\\\\t'i386:x86-64') \\\\t\\\\t\\\\tdownloadUrl='https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz'; \\\\t\\\\t\\\\tdownloadSha256='0022753d0cceecacdd3a795dd4cea2bd7ffdf9dc06e22ffd1be98411742fbb44'; \\\\t\\\\t\\\\t;; \\\\t\\\\t'aarch64') \\\\t\\\\t\\\\tdownloadUrl='https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-aarch64_bin.tar.gz'; \\\\t\\\\t\\\\tdownloadSha256='13bfd976acf8803f862e82c7113fb0e9311ca5458b1decaef8a09ffd91119fa4'; \\\\t\\\\t\\\\t;; \\\\t\\\\t*) echo &gt;&amp;2 \\\\\\\"error: unsupported architecture: '$arch'\\\\\\\"; exit 1 ;; \\\\tesac; \\\\t\\\\tcurl -fL -o openjdk.tgz \\\\\\\"$downloadUrl\\\\\\\"; \\\\techo \\\\\\\"$downloadSha256 *openjdk.tgz\\\\\\\" | sha256sum --strict --check -; \\\\t\\\\tmkdir -p \\\\\\\"$JAVA_HOME\\\\\\\"; \\\\ttar --extract \\\\t\\\\t--file openjdk.tgz \\\\t\\\\t--directory \\\\\\\"$JAVA_HOME\\\\\\\" \\\\t\\\\t--strip-components 1 \\\\t\\\\t--no-same-owner \\\\t; \\\\trm openjdk.tgz*; \\\\t\\\\trm -rf \\\\\\\"$JAVA_HOME/lib/security/cacerts\\\\\\\"; \\\\tln -sT /etc/pki/ca-trust/extracted/java/cacerts \\\\\\\"$JAVA_HOME/lib/security/cacerts\\\\\\\"; \\\\t\\\\tln -sfT \\\\\\\"$JAVA_HOME\\\\\\\" /usr/java/default; \\\\tln -sfT \\\\\\\"$JAVA_HOME\\\\\\\" /usr/java/latest; \\\\tfor bin in \\\\\\\"$JAVA_HOME/bin/\\\\\\\"*; do \\\\t\\\\tbase=\\\\\\\"$(basename \\\\\\\"$bin\\\\\\\")\\\\\\\"; \\\\t\\\\t[ ! -e \\\\\\\"/usr/bin/$base\\\\\\\" ]; \\\\t\\\\talternatives --install \\\\\\\"/usr/bin/$base\\\\\\\" \\\\\\\"$base\\\\\\\" \\\\\\\"$bin\\\\\\\" 20000; \\\\tdone; \\\\t\\\\tjava -Xshare:dump; \\\\t\\\\tfileEncoding=\\\\\\\"$(echo 'System.out.println(System.getProperty(\\\\\\\"file.encoding\\\\\\\"))' | jshell -s -)\\\\\\\"; [ \\\\\\\"$fileEncoding\\\\\\\" = 'UTF-8' ]; rm -rf ~/.java; \\\\tjavac --version; \\\\tjava --version\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"eb51a7d6c41e9e10355f32f85033e48f4dfeed042f8d793b965eb9de8bc5ba36\\\",\\\"parent\\\":\\\"9f856f090b3536454e5dfb06417462f2b7f391d5dbcc5d4d8ce39eccc26f6528\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:18.81978611Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV JAVA_VERSION=17.0.2\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"9f856f090b3536454e5dfb06417462f2b7f391d5dbcc5d4d8ce39eccc26f6528\\\",\\\"parent\\\":\\\"8ac2449f7c71a09ae2fcf0253d007f54855bd2b51e6e7a524c12d80e81da75c0\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:18.72299961Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV LANG=C.UTF-8\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"8ac2449f7c71a09ae2fcf0253d007f54855bd2b51e6e7a524c12d80e81da75c0\\\",\\\"parent\\\":\\\"9e159ca1a23d7dd7f70a80b77a2009aab1043a985bee651535e1b4ac538cf83a\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:18.615815298Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV PATH=/usr/java/openjdk-17/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"9e159ca1a23d7dd7f70a80b77a2009aab1043a985bee651535e1b4ac538cf83a\\\",\\\"parent\\\":\\\"9ff05dccb75eb8b47fd096d2bbe95a98475434351cc3161faeda4b20474d1f27\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:18.51503692Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV JAVA_HOME=/usr/java/openjdk-17\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"9ff05dccb75eb8b47fd096d2bbe95a98475434351cc3161faeda4b20474d1f27\\\",\\\"parent\\\":\\\"819efa67053eb6082ff11632303f437a4ac4304b8c6bc179045a1a4943bb607b\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:53:12.339171869Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -eux; \\\\tmicrodnf install \\\\t\\\\tgzip \\\\t\\\\ttar \\\\t\\\\t\\\\t\\\\tbinutils \\\\t\\\\tfreetype fontconfig \\\\t; \\\\tmicrodnf clean all\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"819efa67053eb6082ff11632303f437a4ac4304b8c6bc179045a1a4943bb607b\\\",\\\"parent\\\":\\\"307d1c5b9e9926994500bc7e8c7be52284699ad8b7bceaed378f6b7cbb328a91\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T20:33:05.045198088Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) CMD [\\\\\\\"/bin/bash\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"307d1c5b9e9926994500bc7e8c7be52284699ad8b7bceaed378f6b7cbb328a91\\\",\\\"parent\\\":\\\"\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T20:33:04.547787858Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ADD file:9893213a9ea238f53ac68d87a3cf2f05d86763688392e5ddb6a2c9b60d3550a6 in / \\\"]}}\" } ], \"signatures\" : [ { \"header\" : { \"jwk\" : { \"crv\" : \"P-256\", \"kty\" : \"EC\", \"x\" : \"dGRDKBAV4COsK_f_Ll4k7QePfLE5-0DqZV9i5dLAJDw\", \"y\" : \"mES9BDi2ZjAyGsoGpa89i9r1akgvyJVIEekqrmrPiAM\" }, \"alg\" : \"ES256\" }, \"signature\" : \"KPe3Q2CF_H2i9PHl6utoMnqXZ95NstYGSHhx1rY2vk_WFkt1z7IiIlEJ_h2pQAlGSbgasGUB_TEJ6drbfzwq-g\", \"protected\" : \"eyJmb3JtYXRMZW5ndGgiOjg5OTIsImZvcm1hdFRhaWwiOiJDbjAiLCJ0aW1lIjoiMjAyMy0xMS0yNFQzOjU6MjcrMDAwMCJ9\" } ] } . \\\"Image\\\":\\\"sha256:925cc8c298f96a1e65fb921a97d2070f07d0ee5d8fc2bf51a4eefa21f3d5801c\\ 를 찾아보자. GET https://dmjgr11.jfrog.io/artifactory/api/search/checksum?sha256=925cc8c298f96a1e65fb921a97d2070f07d0ee5d8fc2bf51a4eefa21f3d5801c { \"results\": [] } . 조회되지 않는다. 이것은 없다는 것은 베이스 이미지가 로컬에서 관리되지 않는 Public 이라는 것을 추즉할 수 있다. ",
    "url": "/docs/cicdtools/jfrog-dockerlayer/#public-base-image",
    
    "relUrl": "/docs/cicdtools/jfrog-dockerlayer/#public-base-image"
  },"236": {
    "doc": "Docker Layer Analysis",
    "title": "분석 요약",
    "content": " ",
    "url": "/docs/cicdtools/jfrog-dockerlayer/#%EB%B6%84%EC%84%9D-%EC%9A%94%EC%95%BD",
    
    "relUrl": "/docs/cicdtools/jfrog-dockerlayer/#분석-요약"
  },"237": {
    "doc": "Docker Layer Analysis",
    "title": "분석 결과",
    "content": ". | 최상위 레이어 즉, Container Layer 에서 “Image” 키값을 이용하여 base image layer 에 해당되는 해쉬값을 추출 및 해당 layer 가 참조되는 Image Name 들을 확인할 수 있다. | “tdownloadUrl” 정보는 Origin Layer 라는 것을 확인할 수 있다. | base image 삭제 후에도 빌드는 된다. 구글링을 해보니 cache 에 이미지가 남아 있어서 그렇다고 한다. | 그렇다고 해도 base image 의 해쉬 즉, 이미지 레이어가 있고 없고는 어떻게 알 수 있을까? | . 다음 장인 [Docker Layer Analysis 상세 분석] 에서 좀 더 알아보자. ",
    "url": "/docs/cicdtools/jfrog-dockerlayer/#%EB%B6%84%EC%84%9D-%EA%B2%B0%EA%B3%BC",
    
    "relUrl": "/docs/cicdtools/jfrog-dockerlayer/#분석-결과"
  },"238": {
    "doc": "Jfrog Document",
    "title": "Jfrog Document",
    "content": ". This post lists the document for Jfrog Platform to understand the concept and fuctions of Artifactory and Xray. ",
    "url": "/docs/cicdtools/jfrog-document/",
    
    "relUrl": "/docs/cicdtools/jfrog-document/"
  },"239": {
    "doc": "Jfrog Document",
    "title": "JFrog Artifactory Documentation",
    "content": ". | 2023-11-14 : from first page to https://jfrog.com/help/r/jfrog-artifactory-documentation/trash-can-settings . | 2023-11-15 : to Import and Export https://jfrog.com/help/r/jfrog-artifactory-documentation/system-import-and-export-for-an-ha-cluster . | 2023-11-16 : to Backups https://jfrog.com/help/r/jfrog-artifactory-documentation/restoring-a-system-backup . | 2023-11-17 : to Backups https://jfrog.com/help/r/jfrog-artifactory-documentation/jfrog-release-lifecycle-management-solution . | . ",
    "url": "/docs/cicdtools/jfrog-document/#jfrog-artifactory-documentation",
    
    "relUrl": "/docs/cicdtools/jfrog-document/#jfrog-artifactory-documentation"
  },"240": {
    "doc": "Repository with Project",
    "title": "Repository with Project",
    "content": ". We can assign new repository with a project when the repository created. This Rest API can be deployed the combination with project-key and repository-key  . PUT http://127.0.0.1:8082/artifactory/api/repositories/artifacthu-pg01 { \"projectKey\": \"artifacthu\", \"rclass\" : \"local\", \"packageType\": \"alpine\" } . The results shown as below. [Repository information] . [Repository on Project information] . ",
    "url": "/docs/cicdtools/jfrog-repowithprj/",
    
    "relUrl": "/docs/cicdtools/jfrog-repowithprj/"
  },"241": {
    "doc": "Jfrog Rest API",
    "title": "Jfrog Rest API",
    "content": " ",
    "url": "/docs/cicdtools/jfrog-restapi/",
    
    "relUrl": "/docs/cicdtools/jfrog-restapi/"
  },"242": {
    "doc": "Jfrog Rest API",
    "title": "Table of contents",
    "content": ". | Repositories . | Get Repositories | Create Repositories | . | Local 저장소 생성 . | Repository 생성 | Project 생성 | Project 에 role 생성 | user 추가(role 부여) | 서브 폴더 생성 | 서브폴더를 Project 에 추가 | 서브폴더를 Project 에 제거 | . | Storage . | storage | . | Access . | ping request | get tokens by Token ID | get tokens by Username | project list | . | Router . | router health check | . | Event . | webhook list | . | Ignore Rule . | create ignore rule | get ignore rule | delete ignore rules | . | Scan . | scan | . | Watches . | get watches | . | Docker Layer . | Layers Visualization | Checksum Search | . | Configuration . | TLS Certificate for RABBIT MQ | . | . Jfrog 공식 웹사이트 Help Center 외에 정리된 자료를 찾기 어려워 Artifactory, Xray 와 관련된 Rest API 를 정리하였으며, 버전정보는 Artifactory 7.27.3, Xray 3.27.4 를 기준으로 작성하였습니다.  . ",
    "url": "/docs/cicdtools/jfrog-restapi/#table-of-contents",
    
    "relUrl": "/docs/cicdtools/jfrog-restapi/#table-of-contents"
  },"243": {
    "doc": "Jfrog Rest API",
    "title": "Repositories",
    "content": "Get Repositories . GET {jfrog-url}/artifactory/api/repositories GET {jfrog-url}/artifactory/api/repositories/7test2 . Create Repositories . PUT {jfrog-url}/artifactory/api/repositories/aaa-release-local { \"key\": \"aaa-release-local\", \"environments\":[\"DEV\", \"PROD\"], \"rclass\" : \"local\", \"packageType\": \"docker\", \"description\": \"testtest n\" } . ",
    "url": "/docs/cicdtools/jfrog-restapi/#repositories",
    
    "relUrl": "/docs/cicdtools/jfrog-restapi/#repositories"
  },"244": {
    "doc": "Jfrog Rest API",
    "title": "Local 저장소 생성",
    "content": "Repository 생성 . PUT {jfrog-url}/artifactory/api/repositories/pg01 { \"key\": \"pg01\", \"rclass\": \"local\", \"packageType\": \"generic\", \"description\": \"My local repository\", \"notes\": \"Optional notes about the repository\" } . Project 생성 . POST {jfrog-url}//access/api/v1/projects { \"display_name\": \"pg01-project\", \"description\": \"The binary repository manager\", \"admin_privileges\": { \"manage_members\": true, \"manage_resources\": true, \"manage_security_assets\": true, \"index_resources\": true, \"allow_ignore_rules\": true }, \"storage_quota_bytes\": 10737418240, \"project_key\": \"pg01-project\" } . Project 에 role 생성 . POST {jfrog-url}/access/api/v1/projects/pg01-project/roles/ { \"name\": \"testrole2\", \"description\": \"\", \"type\": \"CUSTOM\", \"environments\": [ \"PROD\", \"DEV\" ], \"actions\": [ \"READ_REPOSITORY\", \"ANNOTATE_REPOSITORY\", \"DEPLOY_CACHE_REPOSITORY\", \"DELETE_OVERWRITE_REPOSITORY\", \"MANAGE_XRAY_MD_REPOSITORY\", \"READ_RELEASE_BUNDLE\", \"ANNOTATE_RELEASE_BUNDLE\", \"CREATE_RELEASE_BUNDLE\", \"DISTRIBUTE_RELEASE_BUNDLE\", \"DELETE_RELEASE_BUNDLE\", \"MANAGE_XRAY_MD_RELEASE_BUNDLE\", \"READ_BUILD\", \"ANNOTATE_BUILD\", \"DEPLOY_BUILD\", \"DELETE_BUILD\", \"MANAGE_XRAY_MD_BUILD\", \"READ_SOURCES_PIPELINE\", \"TRIGGER_PIPELINE\", \"READ_INTEGRATIONS_PIPELINE\", \"READ_POOLS_PIPELINE\", \"REPORTS_SECURITY\", \"WATCHES_SECURITY\", \"POLICIES_SECURITY\", \"RULES_SECURITY\", \"READ_POLICIES_SECURITY\" ] } . user 추가(role 부여) . PUT {jfrog-url}/access/api/v1/projects/pg01-project/users/hotmira { \"name\": \"hotmira\", \"roles\": [ \"testrole\" ] } . 서브 폴더 생성 . # 빈 디렉토리일 경우 뒤에 / 까지 붙인다.(5분 초과시 삭제됨,별도 설정필요): PUT PUT {jfrog-url}/artifactory/pg01/p03/ PUT {jfrog-url}/artifactory/pg01/p01/docker1.png . 서브폴더를 Project 에 추가 . PUT {jfrog-url}/access/api/v1/projects/_/share/repositories/pg01/pg01-project . 서브폴더를 Project 에 제거 . DELETE {jfrog-url}/access/api/v1/projects/_/share/repositories/docker-demo-local/pg01-project . ",
    "url": "/docs/cicdtools/jfrog-restapi/#local-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%83%9D%EC%84%B1",
    
    "relUrl": "/docs/cicdtools/jfrog-restapi/#local-저장소-생성"
  },"245": {
    "doc": "Jfrog Rest API",
    "title": "Storage",
    "content": "storage . {jfrog-url}/artifactory/api/storage/dctest . ",
    "url": "/docs/cicdtools/jfrog-restapi/#storage",
    
    "relUrl": "/docs/cicdtools/jfrog-restapi/#storage"
  },"246": {
    "doc": "Jfrog Rest API",
    "title": "Access",
    "content": "ping request . {jfrog-url}/access/api/v1/system/ping . get tokens by Token ID . {jfrog-url}/access/api/v1/tokens {jfrog-url}/access/api/v1/tokens/07e245ce-10ce-4b73-8fff-df873e4f3682 . get tokens by Username . POST {jfrog-url}/access/api/v1/tokens/ { \"username\" : \"jwpark\" } . project list . {jfrog-url}/access/api/v1/projects . ",
    "url": "/docs/cicdtools/jfrog-restapi/#access",
    
    "relUrl": "/docs/cicdtools/jfrog-restapi/#access"
  },"247": {
    "doc": "Jfrog Rest API",
    "title": "Router",
    "content": "router health check . {jfrog-url}/router/api/v1/system/health . ",
    "url": "/docs/cicdtools/jfrog-restapi/#router",
    
    "relUrl": "/docs/cicdtools/jfrog-restapi/#router"
  },"248": {
    "doc": "Jfrog Rest API",
    "title": "Event",
    "content": "webhook list . GET {jfrog-url}/event/api/v1/subscriptions . ",
    "url": "/docs/cicdtools/jfrog-restapi/#event",
    
    "relUrl": "/docs/cicdtools/jfrog-restapi/#event"
  },"249": {
    "doc": "Jfrog Rest API",
    "title": "Ignore Rule",
    "content": "create ignore rule . POST {jfrog-url}/xray/api/v1/ignore_rules . get ignore rule . GET {jfrog-url}/xray/api/v1/ignore_rules GET {jfrog-url}/xray/api/v1/ignore_rules/ee1e24ba-523f-4206-7f45-88ab211fe712 . delete ignore rules . DELETE {jfrog-url}/xray/api/v1/ignore_rules/ee1e24ba-523f-4206-7f45-88ab211fe712 . ",
    "url": "/docs/cicdtools/jfrog-restapi/#ignore-rule",
    
    "relUrl": "/docs/cicdtools/jfrog-restapi/#ignore-rule"
  },"250": {
    "doc": "Jfrog Rest API",
    "title": "Scan",
    "content": "scan . GET {jfrog-url}/xray/api/v1/scanArtifact . ",
    "url": "/docs/cicdtools/jfrog-restapi/#scan",
    
    "relUrl": "/docs/cicdtools/jfrog-restapi/#scan"
  },"251": {
    "doc": "Jfrog Rest API",
    "title": "Watches",
    "content": "get watches . GET {jfrog-url}/xray/api/v2/watches . ",
    "url": "/docs/cicdtools/jfrog-restapi/#watches",
    
    "relUrl": "/docs/cicdtools/jfrog-restapi/#watches"
  },"252": {
    "doc": "Jfrog Rest API",
    "title": "Docker Layer",
    "content": "Layers Visualization . GET https://dmjgr.jfrog.io/artifactory/api/docker/spring-vue-starter-repo/v2/spring-vue-image-child/manifests/95 { \"schemaVersion\" : 1, \"name\" : \"spring-vue-image-child\", \"tag\" : \"95\", \"architecture\" : \"amd64\", \"fsLayers\" : [ { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:2bde522f954fe46c4abe389ff03d4f12ef885aa822bf6a9cae730d4f89440d2f\" }, { \"blobSum\" : \"sha256:2678ca58edbecc75c354e98f96efa24be413e49ccc284aa51cb0d6c262738128\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a7203ca35e75e068651c9907d659adc721dba823441b78639fde66fc988f042f\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:de849f1cfbe60b1c06a1db83a3129ab0ea397c4852b98e3e4300b12ee57ba111\" }, { \"blobSum\" : \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\" : \"sha256:38a980f2cc8accf69c23deae6743d42a87eb34a54f02396f3fcfd7c2d06e2c5b\" } ], \"history\" : [ { \"v1Compatibility\" : \"{\\\"container\\\":\\\"a2c93c431b6774ee860328409b263c704eff0a7ccb497464befc09cb85faf5b3\\\",\\\"parent\\\":\\\"6284645ce2757b9ac13f4e2f4ae4fd4e0294f8260f99ac0da174c2ba55c61431\\\",\\\"throwaway\\\":true,\\\"os\\\":\\\"linux\\\",\\\"created\\\":\\\"2023-11-24T13:38:34.194337895Z\\\",\\\"container_config\\\":{\\\"Hostname\\\":\\\"a2c93c431b67\\\",\\\"Domainname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":false,\\\"AttachStderr\\\":false,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":[\\\"PATH=/usr/java/openjdk-17/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\",\\\"JAVA_HOME=/usr/java/openjdk-17\\\",\\\"LANG=C.UTF-8\\\",\\\"JAVA_VERSION=17.0.2\\\",\\\"MY_NAME=John Doe\\\"],\\\"Cmd\\\":[\\\"/bin/sh\\\",\\\"-c\\\",\\\"#(nop) \\\",\\\"ENV MY_NAME=John Doe\\\"],\\\"Image\\\":\\\"sha256:53ae2020bd8e6bd80952db2ce7c7ffcf01d56c43bd1fd44c3dd918549d4eca85\\\",\\\"Volumes\\\":null,\\\"WorkingDir\\\":\\\"/app\\\",\\\"Entrypoint\\\":[\\\"java\\\",\\\"-jar\\\",\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\"],\\\"OnBuild\\\":null,\\\"Labels\\\":{}},\\\"id\\\":\\\"d0412b62f2468198f91c92ef5c7f2b4eefdb53eeeb114364e263952da03aaea6\\\",\\\"config\\\":{\\\"Hostname\\\":\\\"\\\",\\\"Domainname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":false,\\\"AttachStderr\\\":false,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":[\\\"PATH=/usr/java/openjdk-17/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\",\\\"JAVA_HOME=/usr/java/openjdk-17\\\",\\\"LANG=C.UTF-8\\\",\\\"JAVA_VERSION=17.0.2\\\",\\\"MY_NAME=John Doe\\\"],\\\"Cmd\\\":null,\\\"Image\\\":\\\"sha256:53ae2020bd8e6bd80952db2ce7c7ffcf01d56c43bd1fd44c3dd918549d4eca85\\\",\\\"Volumes\\\":null,\\\"WorkingDir\\\":\\\"/app\\\",\\\"Entrypoint\\\":[\\\"java\\\",\\\"-jar\\\",\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\"],\\\"OnBuild\\\":null,\\\"Labels\\\":null},\\\"docker_version\\\":\\\"24.0.5\\\",\\\"architecture\\\":\\\"amd64\\\"}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"6284645ce2757b9ac13f4e2f4ae4fd4e0294f8260f99ac0da174c2ba55c61431\\\",\\\"parent\\\":\\\"5c038964690f2eebea3feb8a0eaf48b52de43c5a93ce2ed852dc13b6e58daf92\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-10-27T14:08:59.080963116Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENTRYPOINT [\\\\\\\"java\\\\\\\" \\\\\\\"-jar\\\\\\\" \\\\\\\"springVueStarter-0.0.1-SNAPSHOT.jar\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"5c038964690f2eebea3feb8a0eaf48b52de43c5a93ce2ed852dc13b6e58daf92\\\",\\\"parent\\\":\\\"9ce3e6d90a73c949485418a1ffe7958113c2026d1cc722c0ba64a3cd088400b0\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-10-27T14:08:58.554940559Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) COPY file:3708ed22897e6f3364d3a7685bf03434e941c9676059fc904b08fdc1e1c234d7 in . \\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"9ce3e6d90a73c949485418a1ffe7958113c2026d1cc722c0ba64a3cd088400b0\\\",\\\"parent\\\":\\\"eff06ff0328aa3b368603706fe11484281cafb352051fc4d247c10f364674c78\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2023-10-27T14:08:58.189848571Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) WORKDIR /app\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"eff06ff0328aa3b368603706fe11484281cafb352051fc4d247c10f364674c78\\\",\\\"parent\\\":\\\"e9799d31bb42665d55ea83786be278d044bdd77b7045b9e27dd976d80eba1fb0\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:28.871350186Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) CMD [\\\\\\\"jshell\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"e9799d31bb42665d55ea83786be278d044bdd77b7045b9e27dd976d80eba1fb0\\\",\\\"parent\\\":\\\"eb51a7d6c41e9e10355f32f85033e48f4dfeed042f8d793b965eb9de8bc5ba36\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:28.248363534Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -eux; \\\\t\\\\tarch=\\\\\\\"$(objdump=\\\\\\\"$(command -v objdump)\\\\\\\" &amp;&amp; objdump --file-headers \\\\\\\"$objdump\\\\\\\" | awk -F '[:,]+[[:space:]]+' '$1 == \\\\\\\"architecture\\\\\\\" { print $2 }')\\\\\\\"; \\\\tcase \\\\\\\"$arch\\\\\\\" in \\\\t\\\\t'i386:x86-64') \\\\t\\\\t\\\\tdownloadUrl='https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz'; \\\\t\\\\t\\\\tdownloadSha256='0022753d0cceecacdd3a795dd4cea2bd7ffdf9dc06e22ffd1be98411742fbb44'; \\\\t\\\\t\\\\t;; \\\\t\\\\t'aarch64') \\\\t\\\\t\\\\tdownloadUrl='https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-aarch64_bin.tar.gz'; \\\\t\\\\t\\\\tdownloadSha256='13bfd976acf8803f862e82c7113fb0e9311ca5458b1decaef8a09ffd91119fa4'; \\\\t\\\\t\\\\t;; \\\\t\\\\t*) echo &gt;&amp;2 \\\\\\\"error: unsupported architecture: '$arch'\\\\\\\"; exit 1 ;; \\\\tesac; \\\\t\\\\tcurl -fL -o openjdk.tgz \\\\\\\"$downloadUrl\\\\\\\"; \\\\techo \\\\\\\"$downloadSha256 *openjdk.tgz\\\\\\\" | sha256sum --strict --check -; \\\\t\\\\tmkdir -p \\\\\\\"$JAVA_HOME\\\\\\\"; \\\\ttar --extract \\\\t\\\\t--file openjdk.tgz \\\\t\\\\t--directory \\\\\\\"$JAVA_HOME\\\\\\\" \\\\t\\\\t--strip-components 1 \\\\t\\\\t--no-same-owner \\\\t; \\\\trm openjdk.tgz*; \\\\t\\\\trm -rf \\\\\\\"$JAVA_HOME/lib/security/cacerts\\\\\\\"; \\\\tln -sT /etc/pki/ca-trust/extracted/java/cacerts \\\\\\\"$JAVA_HOME/lib/security/cacerts\\\\\\\"; \\\\t\\\\tln -sfT \\\\\\\"$JAVA_HOME\\\\\\\" /usr/java/default; \\\\tln -sfT \\\\\\\"$JAVA_HOME\\\\\\\" /usr/java/latest; \\\\tfor bin in \\\\\\\"$JAVA_HOME/bin/\\\\\\\"*; do \\\\t\\\\tbase=\\\\\\\"$(basename \\\\\\\"$bin\\\\\\\")\\\\\\\"; \\\\t\\\\t[ ! -e \\\\\\\"/usr/bin/$base\\\\\\\" ]; \\\\t\\\\talternatives --install \\\\\\\"/usr/bin/$base\\\\\\\" \\\\\\\"$base\\\\\\\" \\\\\\\"$bin\\\\\\\" 20000; \\\\tdone; \\\\t\\\\tjava -Xshare:dump; \\\\t\\\\tfileEncoding=\\\\\\\"$(echo 'System.out.println(System.getProperty(\\\\\\\"file.encoding\\\\\\\"))' | jshell -s -)\\\\\\\"; [ \\\\\\\"$fileEncoding\\\\\\\" = 'UTF-8' ]; rm -rf ~/.java; \\\\tjavac --version; \\\\tjava --version\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"eb51a7d6c41e9e10355f32f85033e48f4dfeed042f8d793b965eb9de8bc5ba36\\\",\\\"parent\\\":\\\"9f856f090b3536454e5dfb06417462f2b7f391d5dbcc5d4d8ce39eccc26f6528\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:18.81978611Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV JAVA_VERSION=17.0.2\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"9f856f090b3536454e5dfb06417462f2b7f391d5dbcc5d4d8ce39eccc26f6528\\\",\\\"parent\\\":\\\"8ac2449f7c71a09ae2fcf0253d007f54855bd2b51e6e7a524c12d80e81da75c0\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:18.72299961Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV LANG=C.UTF-8\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"8ac2449f7c71a09ae2fcf0253d007f54855bd2b51e6e7a524c12d80e81da75c0\\\",\\\"parent\\\":\\\"9e159ca1a23d7dd7f70a80b77a2009aab1043a985bee651535e1b4ac538cf83a\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:18.615815298Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV PATH=/usr/java/openjdk-17/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"9e159ca1a23d7dd7f70a80b77a2009aab1043a985bee651535e1b4ac538cf83a\\\",\\\"parent\\\":\\\"9ff05dccb75eb8b47fd096d2bbe95a98475434351cc3161faeda4b20474d1f27\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:54:18.51503692Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ENV JAVA_HOME=/usr/java/openjdk-17\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"9ff05dccb75eb8b47fd096d2bbe95a98475434351cc3161faeda4b20474d1f27\\\",\\\"parent\\\":\\\"819efa67053eb6082ff11632303f437a4ac4304b8c6bc179045a1a4943bb607b\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T21:53:12.339171869Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c set -eux; \\\\tmicrodnf install \\\\t\\\\tgzip \\\\t\\\\ttar \\\\t\\\\t\\\\t\\\\tbinutils \\\\t\\\\tfreetype fontconfig \\\\t; \\\\tmicrodnf clean all\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"819efa67053eb6082ff11632303f437a4ac4304b8c6bc179045a1a4943bb607b\\\",\\\"parent\\\":\\\"307d1c5b9e9926994500bc7e8c7be52284699ad8b7bceaed378f6b7cbb328a91\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T20:33:05.045198088Z\\\",\\\"throwaway\\\":true,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) CMD [\\\\\\\"/bin/bash\\\\\\\"]\\\"]}}\" }, { \"v1Compatibility\" : \"{\\\"id\\\":\\\"307d1c5b9e9926994500bc7e8c7be52284699ad8b7bceaed378f6b7cbb328a91\\\",\\\"parent\\\":\\\"\\\",\\\"comment\\\":null,\\\"created\\\":\\\"2022-04-27T20:33:04.547787858Z\\\",\\\"throwaway\\\":false,\\\"container_config\\\":{\\\"Cmd\\\":[\\\"/bin/sh -c #(nop) ADD file:9893213a9ea238f53ac68d87a3cf2f05d86763688392e5ddb6a2c9b60d3550a6 in / \\\"]}}\" } ], \"signatures\" : [ { \"header\" : { \"jwk\" : { \"crv\" : \"P-256\", \"kty\" : \"EC\", \"x\" : \"mUxMr2CKQa1X5BvRbNdXTgixkhgtzg2f-U8tHk1hkDU\", \"y\" : \"J7xFw_viP6wa3oVqtuva90aRv1twOO2_hzlvaBtBvJc\" }, \"alg\" : \"ES256\" }, \"signature\" : \"0vF2zxKBSGXAuhHUiQuIZddIO_wevu-fU08dnPAWeQAB7ZGgpI53ouZTwXqdcjKFMZX2_dAHnXx_jUS0LjTArA\", \"protected\" : \"eyJmb3JtYXRMZW5ndGgiOjk0ODgsImZvcm1hdFRhaWwiOiJDbjAiLCJ0aW1lIjoiMjAyMy0xMS0yNFQxOjQ3OjM0KzAwMDAifQ\" } ] } . Checksum Search . GET https://dmjgr.jfrog.io/artifactory/api/search/checksum?sha256=2bde522f954fe46c4abe389ff03d4f12ef885aa822bf6a9cae730d4f89440d2f \"results\": [ { \"uri\": \"https://dmjgr.jfrog.io/artifactory/api/storage/spring-vue-starter-repo/spring-vue-image/94/sha256__2bde522f954fe46c4abe389ff03d4f12ef885aa822bf6a9cae730d4f89440d2f\" }, { \"uri\": \"https://dmjgr.jfrog.io/artifactory/api/storage/spring-vue-starter-repo/spring-vue-image/93/sha256__2bde522f954fe46c4abe389ff03d4f12ef885aa822bf6a9cae730d4f89440d2f\" }, { \"uri\": \"https://dmjgr.jfrog.io/artifactory/api/storage/spring-vue-starter-repo/spring-vue-image-child/95/sha256__2bde522f954fe46c4abe389ff03d4f12ef885aa822bf6a9cae730d4f89440d2f\" }, { \"uri\": \"https://dmjgr.jfrog.io/artifactory/api/storage/spring-vue-starter-repo/spring-vue-image/90/sha256__2bde522f954fe46c4abe389ff03d4f12ef885aa822bf6a9cae730d4f89440d2f\" }, { \"uri\": \"https://dmjgr.jfrog.io/artifactory/api/storage/docker-trial/testimage/1.123/sha256__2bde522f954fe46c4abe389ff03d4f12ef885aa822bf6a9cae730d4f89440d2f\" } ] } . ",
    "url": "/docs/cicdtools/jfrog-restapi/#docker-layer",
    
    "relUrl": "/docs/cicdtools/jfrog-restapi/#docker-layer"
  },"253": {
    "doc": "Jfrog Rest API",
    "title": "Configuration",
    "content": "TLS Certificate for RABBIT MQ . GET {jfrog-url}/xray/api/v1/configuration/systemParameters . ",
    "url": "/docs/cicdtools/jfrog-restapi/#configuration",
    
    "relUrl": "/docs/cicdtools/jfrog-restapi/#configuration"
  },"254": {
    "doc": "Set Me Up for Remote Repository",
    "title": "Set Me Up for Remote Repository",
    "content": " ",
    "url": "/docs/cicdtools/jfrog-setmeuprepo/",
    
    "relUrl": "/docs/cicdtools/jfrog-setmeuprepo/"
  },"255": {
    "doc": "Set Me Up for Remote Repository",
    "title": "Table of contents",
    "content": ". | Docker . | PULL from Remote Docker Hub to Remote Repository | PUSH Image from Local to Local Repository | . | Maven . | settings.xml in .m2 folder | pom.xml 디펜던시 리스트 | 07-02-03 Build and Deploy Artifacts to Jfrog 자료 참조 | . | npm . | 사전준비 | PULL from remote NPM repository | . | Pypi . | 사전준비 | INSTALL from Remote Repository | . | . Jfrog 에서의 package 관리를 위한 생성 및 각각의 특징에 대해 설명한다. ",
    "url": "/docs/cicdtools/jfrog-setmeuprepo/#table-of-contents",
    
    "relUrl": "/docs/cicdtools/jfrog-setmeuprepo/#table-of-contents"
  },"256": {
    "doc": "Set Me Up for Remote Repository",
    "title": "Docker",
    "content": "PULL from Remote Docker Hub to Remote Repository . ## login root@jfrog-ubuntu-18-04:~# docker login -utestuser@naver.com testuser.jfrog.io Password: WARNING! Your password will be stored unencrypted in /root/.docker/config.json. Configure a credential helper to remove this warning. See Login Succeeded root@jfrog-ubuntu-18-04:~# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE ## pull : docker pull testuser.jfrog.io/docker-demo-remote/&lt;DOCKER_IMAGE&gt;:&lt;DOCKER_TAG&gt; root@jfrog-ubuntu-18-04:~# docker pull testuser.jfrog.io/docker-demo-remote/nginx:1.9.5 root@jfrog-ubuntu-18-04:~# docker pull testuser.jfrog.io/docker-demo-remote/nginx:latest latest: Pulling from docker-demo-remote/nginx f03b40093957: Pull complete eed12bbd6494: Pull complete fa7eb8c8eee8: Pull complete 7ff3b2b12318: Pull complete 0f67c7de5f2c: Pull complete 831f51541d38: Pull complete Digest: sha256:af296b188c7b7df99ba960ca614439c99cb7cf252ed7bbc23e90cfda59092305 Status: Downloaded newer image for testuser.jfrog.io/docker-demo-remote/nginx:latest testuser.jfrog.io/docker-demo-remote/nginx:latest . PUSH Image from Local to Local Repository . ## login root@jfrog-ubuntu-18-04:~# docker login -utestuser@naver.com testuser.jfrog.io Password: WARNING! Your password will be stored unencrypted in /root/.docker/config.json. Configure a credential helper to remove this warning. See https://docs.docker.com/engine/reference/commandline/login/#credentials-store Login Succeeded root@jfrog-ubuntu-18-04:~# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE alpine-test 1.0 5fd6cce2f848 26 minutes ago 5.58MB ## TAGGING root@jfrog-ubuntu-18-04:~# root@jfrog-ubuntu-18-04:~# root@jfrog-ubuntu-18-04:~# docker tag alpine-test:1.0 testuser.jfrog.io/docker-demo-local/alpine-test:1.2 root@jfrog-ubuntu-18-04:~# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE testuser.jfrog.io/docker-demo-remote/alpine-test 1.1 5fd6cce2f848 27 minutes ago 5.58MB alpine-test 1.0 5fd6cce2f848 27 minutes ago 5.58MB ## push root@jfrog-ubuntu-18-04:~# root@jfrog-ubuntu-18-04:~# docker push testuser.jfrog.io/docker-demo-local/alpine-test:1.2 The push refers to repository [testuser.jfrog.io/docker-demo-local/alpine-test] 9fb3aa2f8b80: Pushed 1.2: digest: sha256:5748740b6920bdcf312855a936d9984acf7c0ff38a62a43a3cbd30275a30fca6 size: 528 root@jfrog-ubuntu-18-04:~# . ",
    "url": "/docs/cicdtools/jfrog-setmeuprepo/#docker",
    
    "relUrl": "/docs/cicdtools/jfrog-setmeuprepo/#docker"
  },"257": {
    "doc": "Set Me Up for Remote Repository",
    "title": "Maven",
    "content": "settings.xml in .m2 folder . pom.xml 디펜던시 리스트 . 07-02-03 Build and Deploy Artifacts to Jfrog 자료 참조 . ",
    "url": "/docs/cicdtools/jfrog-setmeuprepo/#maven",
    
    "relUrl": "/docs/cicdtools/jfrog-setmeuprepo/#maven"
  },"258": {
    "doc": "Set Me Up for Remote Repository",
    "title": "npm",
    "content": "사전준비 .npmrc 에 아래 추가 . email=testuser@naver.com always-auth=true registry=https://testuser.jfrog.io/artifactory/api/npm/default-demo-npm/ //testuser.jfrog.io/artifactory/api/npm/default-demo-npm/:_auth=\"ZGNwYXJrODBAbmF2ZXIuY29tOkFQNmpHS2dTaTdrYmtlOVRBcGlLU25UaTFaTA==\" . PULL from remote NPM repository . npm install mathjs@^9.4.4 . ",
    "url": "/docs/cicdtools/jfrog-setmeuprepo/#npm",
    
    "relUrl": "/docs/cicdtools/jfrog-setmeuprepo/#npm"
  },"259": {
    "doc": "Set Me Up for Remote Repository",
    "title": "Pypi",
    "content": "사전준비 . | pip.ini 파일 global 로딩 위치 확인하기 | . C:\\&gt; pip config -v list For variant 'global', will try loading 'C:\\ProgramData\\pip\\pip.ini' For variant 'user', will try loading 'C:\\Users\\**\\pip\\pip.ini' For variant 'user', will try loading 'C:\\Users\\**\\AppData\\Roaming\\pip\\pip.ini' For variant 'site', will try loading 'c:\\python39\\pip.ini' . | pip.ini 파일 만들기 | . C:\\&gt;mkdir C:\\ProgramData\\pip C:\\&gt;cd C:\\ProgramData\\pip C:\\ProgramData\\pip&gt; code pip.ini . | pip.ini 파일 작성 | . [global] index-url = https://testuser@naver.com:cmVmdGtuOjAxOjE3MTY1NTgzMDA6bkVKcEZ0ZVJJSTRPZ1JHdkxiN1FwMFNnWnlB@testuser.jfrog.io/artifactory/api/pypi/default-demo-pypi-remote/simple . INSTALL from Remote Repository . C:\\Users\\dcjam\\AppData\\Local\\Programs\\Python\\Python311&gt;pip install tensorflow C:\\Users\\dcjam\\AppData\\Local\\Programs\\Python\\Python311&gt;pip install requests==2.24.0 C:\\Users\\dcjam\\AppData\\Local\\Programs\\Python\\Python311&gt;pip install nltk==3.6.7 . ",
    "url": "/docs/cicdtools/jfrog-setmeuprepo/#pypi",
    
    "relUrl": "/docs/cicdtools/jfrog-setmeuprepo/#pypi"
  },"260": {
    "doc": "Jfrog Trial - Cloud",
    "title": "Jfrog Trial - Cloud",
    "content": ". 유료 플랫폼인 Jfrog 의 Trial 버전을 활용할 수 있는 정보가 있어 아래와 같이 공유합니다. Jfrog 사에서 제공하는 https://jfrog.com/start-free 웹사이트에 방문하여 아래 정보를 입력합니다. Google 또는 Github 계정으로 SSO 가능하며 다른 이메일 계정으로도 메일주소, 이름 정보를 입력합니다. ​ . ​ 위의 Proceed 를 클릭하면 아래의 간단한 입력창에 관련 정보를 기입합니다. domain 이름을 입력하고 Cloud Region 을 입력하면 해당 URL 로 접속하여 jfrog 플랫폼을 경험할 수 있습니다. 여기서는 상단의 Cloud 탭에서 진행해야 합니다. ​ . ​ 이후 등록한 이메일로 관련 정보에 대해 확인할 수 있으며 URL 로 접속하면 아래와 같이 Jfrog 에 접속할 수 있습니다. ​ . ",
    "url": "/docs/cicdtools/jfrog-trial/",
    
    "relUrl": "/docs/cicdtools/jfrog-trial/"
  },"261": {
    "doc": "Jfrog Trial - Local",
    "title": "Jfrog Trial - Local",
    "content": ". Jfrog Artifactory, Xray 의 Trial 버전(30일간) 을 로컬에 설치해 보겠습니다. 여기서는 리눅스 Ubuntu 를 기준으로 설명하겠습니다. 사전에 jdk, dpkg, net-tools 을 사전 설치합니다.  . root@myubuntu18: sudo apt-get install openjdk-11-jdk dpkg net-tools . 다음으로 Trial 버전의 라이선스를 받기 위해 아래 링크를 통해 정보를 입력하면 해당 이메일로 license key 를 받을 수 있습니다. jfrog 설치 후 라이선스를 입력할 수 있습니다.  . https://jfrog.com/start-free/ . 위 그림의 정보 입력후 아래 창으로 넘어가면 관련 정보 또한 입력합니다. 중요한 점은 탭 중 Self-Hosted 를 선택하여야 합니다.  . 정상적으로 마쳤다면 아래와 같이 설치 정보 링크와 Artifactory/Xray 의 라이선스를 등록한 이메일을 통해 받을 수 있습니다. 자, 이제 설치를 해봅시다.  아래 순으로 진행합니다. root@myutuntu18:~# apt-get update // 다운로드 root@myutuntu18:~# wget -O jfrog-deb-installer.tar.gz \"https://releases.jfrog.io/artifactory/jfrog-prox/org/artifactory/pro/deb/jfrog-platform-trial-prox/7.27.3/jfrog-platform-trial-prox-7.27.3-deb.tar.gz\" // 압축 해제 root@myutuntu18:~# tar -xvzf jfrog-deb-installer.tar.gz root@myutuntu18:~# cd jfrog-platform-trial-pro* // 설치 root@myutuntu18:~/jfrog-platform-trial-prox-7.27.3-deb# sudo ./install.sh Beginning JFrog Platform Trial Pro X setup This script will install JFrog Platform Trial Pro X and its dependencies. After installation, logs can be found at /root/jfrog-platform-trial-prox-7.27.3-deb/install.log Installing/Verifying RabbitMQ dependencies (this may take several minutes)... //중략 NOTE: It is highly recommended to use Artifactory with an external database (MySQL, Oracle, Microsoft SQL Server, PostgreSQL, MariaDB). For details about how to configure the database, refer to https://service.jfrog.org/installer/Configuring+the+Database Start Artifactory with: &gt; systemctl start artifactory.service Check Artifactory status with: &gt; systemctl status artifactory.service Installation directory was set to /opt/jfrog/artifactory You can find more information in the log directory /opt/jfrog/artifactory/var/log System configuration templates can be found under /opt/jfrog/artifactory/var/etc Copy any configuration you want to modify from the template to /opt/jfrog/artifactory/var/etc/system.yaml Triggering migration script, this will migrate if needed ... Processing triggers for man-db (2.8.3-2ubuntu0.1) ... root@myutuntu18:~/jfrog-platform-trial-prox-7.27.3-deb# // 서비스 시작 root@myutuntu18:~/jfrog-platform-trial-prox-7.27.3-deb# systemctl status artifactory.service ● artifactory.service - Artifactory service Loaded: loaded (/lib/systemd/system/artifactory.service; enabled; vendor pres Active: active (running) since Thu 2023-06-08 20:47:43 KST; 10s ago Process: 12568 ExecStart=/opt/jfrog/artifactory/app/bin/artifactoryManage.sh s Main PID: 15341 (java) Tasks: 0 (limit: 4915) CGroup: /system.slice/artifactory.service ‣ 15341 /opt/jfrog/artifactory/app/third-party/java/bin/java -Djava.u 6월 08 20:47:42 myutuntu18 artifactoryManage.sh[12568]: frontend not running. P 6월 08 20:47:42 myutuntu18 artifactoryManage.sh[12568]: frontend started. PID: 6월 08 20:47:42 myutuntu18 su[16247]: Successful su for artifactory by root 6월 08 20:47:42 myutuntu18 su[16247]: + ??? root:artifactory 6월 08 20:47:42 myutuntu18 su[16247]: pam_unix(su:session): session opened for 6월 08 20:47:43 myutuntu18 artifactoryManage.sh[12568]: Starting observability. 6월 08 20:47:43 myutuntu18 artifactoryManage.sh[12568]: observability not runni 6월 08 20:47:43 myutuntu18 artifactoryManage.sh[12568]: observability started. 6월 08 20:47:43 myutuntu18 su[16247]: pam_unix(su:session): session closed for 6월 08 20:47:43 myutuntu18 systemd[1]: Started Artifactory service. lines 1-19/19 (END) . 이후 locahost:8082 로 접속하면 아래 화면으로 이동할 수 있습니다. 조금 기다리면 로그인 창으로 이동하고 이메일에서 받았던 admin / password 를 입력합니다. 패스워드를 재지정합니다.  . 이후 라이선스를 입력합니다. 아래와 같이 Jfrog Platform 에 접속하였습니다.  . ",
    "url": "/docs/cicdtools/jfrog-triallocal/",
    
    "relUrl": "/docs/cicdtools/jfrog-triallocal/"
  },"262": {
    "doc": "Jfrog",
    "title": "Jfrog",
    "content": " ",
    "url": "/docs/cicdtools/jfrog/",
    
    "relUrl": "/docs/cicdtools/jfrog/"
  },"263": {
    "doc": "Kubernetes Architecture",
    "title": "Kubernetes Architectur",
    "content": " ",
    "url": "/docs/cloud/k8s-archi/#kubernetes-architectur",
    
    "relUrl": "/docs/cloud/k8s-archi/#kubernetes-architectur"
  },"264": {
    "doc": "Kubernetes Architecture",
    "title": "Table of contents",
    "content": ". | Understanding of Kubernetes | Kubernethes Structure | Kubernethes Resource | Kubernethes Architecture | . Operating management in a few host of distributed computing environment is not too difficult even by hand. However in case of large distributed computing environment, it is very hard to do management such as start/stop containers, storage management, health checking and so on. ",
    "url": "/docs/cloud/k8s-archi/#table-of-contents",
    
    "relUrl": "/docs/cloud/k8s-archi/#table-of-contents"
  },"265": {
    "doc": "Kubernetes Architecture",
    "title": "Understanding of Kubernetes",
    "content": "Kubernetes can be a solution to overcome the problem. The followings are the summary of Kubernetes. Container Orchestration . | Large containers are controlled under the distributed computing environment. | Distribute the containers to lots of servers. | Connet the services with service discovery. | Increase the number of server under overload. | Create new containers in case of failure. | . Also large distributed environment can be handled by a few of engineers. It is also referred to K8s since Kubernetes has long characters to speak. | Three philosophy of Kubernetes | Immutable Infrastructure | Declarative Configuration | Self Healing | . ",
    "url": "/docs/cloud/k8s-archi/#understanding-of-kubernetes",
    
    "relUrl": "/docs/cloud/k8s-archi/#understanding-of-kubernetes"
  },"266": {
    "doc": "Kubernetes Architecture",
    "title": "Kubernethes Structure",
    "content": "It is communicated with API server and repository (etcd) in Maser, and agent(kubelet) of each node. Master . | Manage K8s cluster | Trace node status | Select which node the container allocated | Save cluster information on etcd repository | . API server . | Handle all requests | Communicate all components through API server | Authentication and Permission | . Scheduler . | Define which node the container created and run in | Node selection by understanding status of nodes | Controller Manager | Check cluster status | Real time check if any difference between current and requested information | . etcd . | Distributed key-value repository | Manage all setting value and status data | Inquiry and update by scheduler and controller manager | . Node . | Server which runs containers | Configures an cluster with multiple nodes | In case of cloud, the node is virtual machine like ec2. | kubelet | Create containers requested by master | Send status of containers | . kube proxy . | Network proxy executed by each node | . ",
    "url": "/docs/cloud/k8s-archi/#kubernethes-structure",
    
    "relUrl": "/docs/cloud/k8s-archi/#kubernethes-structure"
  },"267": {
    "doc": "Kubernetes Architecture",
    "title": "Kubernethes Resource",
    "content": "K8s has abstracted some element such as container, application and network as following. | Application and Distribution - Pod, ReplicaSet, Deployment, DaemonSet, StatefulSet | Network - Service, Ingress | Setting management - ConfigMap, Secrets | . ",
    "url": "/docs/cloud/k8s-archi/#kubernethes-resource",
    
    "relUrl": "/docs/cloud/k8s-archi/#kubernethes-resource"
  },"268": {
    "doc": "Kubernetes Architecture",
    "title": "Kubernethes Architecture",
    "content": "This is Kubernethes architecture, it is helpful to understand overall structure of K8s. [Kubernetes Architecture] . ",
    "url": "/docs/cloud/k8s-archi/#kubernethes-architecture",
    
    "relUrl": "/docs/cloud/k8s-archi/#kubernethes-architecture"
  },"269": {
    "doc": "Kubernetes Architecture",
    "title": "Kubernetes Architecture",
    "content": " ",
    "url": "/docs/cloud/k8s-archi/",
    
    "relUrl": "/docs/cloud/k8s-archi/"
  },"270": {
    "doc": "Kubernetes 실습 환경",
    "title": "Kubernetes 실습 환경",
    "content": " ",
    "url": "/docs/cloud/k8s-install-lab/",
    
    "relUrl": "/docs/cloud/k8s-install-lab/"
  },"271": {
    "doc": "Kubernetes 실습 환경",
    "title": "Table of contents",
    "content": ". | 도커 실습에 사용되었던 컨테이너, 이미지 모두 삭제하기 | 쿠버네티스 클러스터를 구성하기전 요구사항 확인 . | A compatible Linux host | 2 GB or more of RAM per machine | 2 CPUs or more | Full network connectivity between all machines in the cluster | Unique hostname, MAC address, and product_uuid for every node | . | kubelet 의 적절한 동작을 위해서 swap을 사용하지 않는다. | SELinux 와 방화벽을 해제한다. | br_netfilter 모듈을 load하고 관련된 네트워크 파라미터를 설정 | . | kubeadm, kubelet and kubectl 패키지 설치하기 . | Update the apt package index and install packages needed to use the Kubernetes apt repository: | Download the Google Cloud public signing key: | Add the Kubernetes apt repository: | Update apt package index, install kubelet, kubeadm and kubectl, and pin their version: | . | Configuring the kubelet &amp; cgroup | 시스템 구성 | worker1, worker2 가상 머신 추가 . | 생성을 위해서 master 가상 머신 종료 | 가상 머신 CPU 수 수정 | worker1 가상 머신 복제 | worker2 가상 머신 복제 | master 가상 머신 구동 | . | NatNetwork port-forwarding 설정 | putty 연결 설정 . | worker1 putty 연결 설정 | worker2 putty 연결 설정 | . | (마스터 노드에서만 실행 )kubeadm init 명령을 통해서 클러스터를 생성한다. | kubeadm init 명령어로 마스터 서버를 만든다. | . | 쿠버네티스 클러스터에 조인하기 위한 명령어 구문을 저장 | kubeconfig 파일의 위치를 KUBECONFIG 쉘 변수에 설정 . | Pod 네트워크 추가 기능 구성 | . | [마스터 노드에서만 실행] 클러스터 구성 상태 확인 | [마스터 노드에서만 실행] 생성한 # kubeadm join 구문이 든 쉘 스크립트를 워커 노드로 복사 | [워커 노드에서만 실행] 복사된 스크립트를 실행하여 클러스터에 조인 | [마스터 노드에서만 실행] 클러스터 조인 상태 확인 | . Kubernetes 실습 환경을 위해 아래와 같이 구성한다. | master 에 kubeadm, kubelet and kubectl 패키지 설치 | master 로부터 worker1, worker2 복제하기 | master 에서 kubectl init 하여 조인구문 생성 및 worker1,2 로 복제 | worker1,2 에서 조인구문 실행 | . ",
    "url": "/docs/cloud/k8s-install-lab/#table-of-contents",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#table-of-contents"
  },"272": {
    "doc": "Kubernetes 실습 환경",
    "title": "도커 실습에 사용되었던 컨테이너, 이미지 모두 삭제하기",
    "content": "root@docker1:~# docker container rm -f $(docker container ps -aq) root@docker1:~# docker image prune -a . ",
    "url": "/docs/cloud/k8s-install-lab/#%EB%8F%84%EC%BB%A4-%EC%8B%A4%EC%8A%B5%EC%97%90-%EC%82%AC%EC%9A%A9%EB%90%98%EC%97%88%EB%8D%98-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%AA%A8%EB%91%90-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#도커-실습에-사용되었던-컨테이너-이미지-모두-삭제하기"
  },"273": {
    "doc": "Kubernetes 실습 환경",
    "title": "쿠버네티스 클러스터를 구성하기전 요구사항 확인",
    "content": "A compatible Linux host . The Kubernetes project provides generic instructions for Linux distributions based on Debian and Red Hat, and those distributions without a package manager. 2 GB or more of RAM per machine . Any less will leave little room for your apps. root@docker1:~# free total used free shared buff/cache available Mem: 4039328 1140088 1636088 34088 1263152 2608324 Swap: 2017276 0 2017276 root@docker1:~# . 2 CPUs or more . root@docker1:~# lscpu Architecture: x86_64 CPU op-mode(s): 32-bit, 64-bit Byte Order: Little Endian CPU(s): 1 On-line CPU(s) list: 0 Thread(s) per core: 1 Core(s) per socket: 1 Socket(s): 1 NUMA node(s): 1 Vendor ID: GenuineIntel CPU family: 6 Model: 140 Model name: 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz Stepping: 1 CPU MHz: 2803.200 BogoMIPS: 5606.40 Hypervisor vendor: KVM Virtualization type: full L1d cache: 48K L1i cache: 32K L2 cache: 1280K L3 cache: 12288K NUMA node0 CPU(s): 0 Flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq monitor ssse3 cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single fsgsbase avx2 invpcid rdseed clflushopt md_clear flush_l1d arch_capabilities root@docker1:~# . Full network connectivity between all machines in the cluster . Public or private network is fine. Unique hostname, MAC address, and product_uuid for every node . - hostname : # hostname # hostnamectl set-hostname master # nano /etc/hosts .... (맨 아래에 다음 내용 추가 ) 192.168.137.101 master 192.168.137.102 worker1 192.168.137.103 worker2 ctrl+o (저장) --&gt; enter --&gt; ctrl+x (종료) # cat /etc/hosts 192.168.137.101 master 192.168.137.102 worker1 192.168.137.103 worker2 - MAC address : # ip addr , # ifconfig - product_uuid : # cat /sys/class/dmi/id/product_uuid . ",
    "url": "/docs/cloud/k8s-install-lab/#%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A5%BC-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0%EC%A0%84-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%ED%99%95%EC%9D%B8",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#쿠버네티스-클러스터를-구성하기전-요구사항-확인"
  },"274": {
    "doc": "Kubernetes 실습 환경",
    "title": "kubelet 의 적절한 동작을 위해서 swap을 사용하지 않는다.",
    "content": "# swapon &amp;&amp; cat /etc/fstab # swapoff -a &amp;&amp; sed -i '/swap/s/^/#/' /etc/fstab (stream editor: 일괄 문서 편집기) . SELinux 와 방화벽을 해제한다. # setenforce 0 // redhat 계열 # ufw disable // ubuntu 계열 . br_netfilter 모듈을 load하고 관련된 네트워크 파라미터를 설정 . Linux 노드의 iptables가 bridged traffic을 정확하게 확인하고 제어 할 수 있도록한다. # cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf br_netfilter EOF -------------------------------------------------------- # cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF -------------------------------------------------------- # sysctl --system . ",
    "url": "/docs/cloud/k8s-install-lab/#kubelet-%EC%9D%98-%EC%A0%81%EC%A0%88%ED%95%9C-%EB%8F%99%EC%9E%91%EC%9D%84-%EC%9C%84%ED%95%B4%EC%84%9C-swap%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#kubelet-의-적절한-동작을-위해서-swap을-사용하지-않는다"
  },"275": {
    "doc": "Kubernetes 실습 환경",
    "title": "kubeadm, kubelet and kubectl 패키지 설치하기",
    "content": "Update the apt package index and install packages needed to use the Kubernetes apt repository: . # apt-get update # apt-get install -y apt-transport-https ca-certificates curl . Download the Google Cloud public signing key: . root@docker1:~# curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg . Add the Kubernetes apt repository: . root@docker1:~# echo \"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main . Update apt package index, install kubelet, kubeadm and kubectl, and pin their version: . # apt-get update # apt-get install -y kubelet=1.21.0-00 kubeadm=1.21.0-00 kubectl=1.21.0-00 # apt-mark hold kubelet kubeadm kubectl . ",
    "url": "/docs/cloud/k8s-install-lab/#kubeadm-kubelet-and-kubectl-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#kubeadm-kubelet-and-kubectl-패키지-설치하기"
  },"276": {
    "doc": "Kubernetes 실습 환경",
    "title": "Configuring the kubelet &amp; cgroup",
    "content": "cgroupfs를 컨테이너 런타임과 kubelet 에 의해서 제어할 수 있도록 구성 . root@docker1:~# cat &lt;&lt;EOF | sudo tee /etc/docker/daemon.json &gt; { &gt; \"exec-opts\": [\"native.cgroupdriver=systemd\"], &gt; \"log-driver\": \"json-file\", &gt; \"log-opts\": { &gt; \"max-size\": \"100m\" &gt; }, &gt; \"storage-driver\": \"overlay2\" &gt; } &gt; EOF { \"exec-opts\": [\"native.cgroupdriver=systemd\"], \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"100m\" }, \"storage-driver\": \"overlay2\" } root@docker1:~# cat /etc/docker/daemon.json { \"exec-opts\": [\"native.cgroupdriver=systemd\"], \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"100m\" }, \"storage-driver\": \"overlay2\" } . ",
    "url": "/docs/cloud/k8s-install-lab/#configuring-the-kubelet--cgroup",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#configuring-the-kubelet--cgroup"
  },"277": {
    "doc": "Kubernetes 실습 환경",
    "title": "시스템 구성",
    "content": "# systemctl enable docker (부팅시 자동으로 docker 시작) # systemctl daemon-reload # systemctl restart docker # docker info . ",
    "url": "/docs/cloud/k8s-install-lab/#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%84%B1",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#시스템-구성"
  },"278": {
    "doc": "Kubernetes 실습 환경",
    "title": "worker1, worker2 가상 머신 추가",
    "content": "생성을 위해서 master 가상 머신 종료 . root@docker1:~# poweroff . 가상 머신 CPU 수 수정 . Oracle VM VirtualBox 관리자 master 가상 머신 선택 --&gt; \"시스템\" 글자를 클릭 --&gt; 마더보드/프로세서/가속 중 프로세서 선택 --&gt; 프로세서(탭) --&gt; 프로세서 개수 2개로 수정 --&gt; 확인 . worker1 가상 머신 복제 . Oracle VM VirtualBox 관리자 master 가상 머신 선택 --&gt; 우클릭 --&gt; 복제 이름 : worker1 MAC 주소 정책 : 모든 네트워크 어댑터의 새 MAC 주소 생성 --&gt; 다음 --&gt; 복제 방식 --&gt; 완전한 복제 --&gt; 복제 worker1 가상 머신 선택 --&gt; 시작 --&gt; 로그인 --&gt; worker1 / ubuntu --&gt; 바탕화면 --&gt; 우클릭 --&gt; Open Teminal $ su - root &lt;-- 관리자 root 로 전환 Password : ubuntu # hostnamectl set-hostname worker1 # hostname worker1 # ip addr # nano /etc/netplan/00-installer-config.yaml addresses: [192.168.137.101/24] --&gt; 192.168.137.102/24 ctrl+o (저장) --&gt; enter --&gt; ctrl+x (종료 ) # netplan apply # ip addr enp0s3 inet 192.168.137.102/24 . worker2 가상 머신 복제 . Oracle VM VirtualBox 관리자 master 가상 머신 선택 --&gt; 우클릭 --&gt; 복제 이름 : worker2 MAC 주소 정책 : 모든 네트워크 어댑터의 새 MAC 주소 생성 --&gt; 다음 --&gt; 복제 방식 --&gt; 완전한 복제 --&gt; 복제 worker2 가상 머신 선택 --&gt; 시작 --&gt; 로그인 --&gt; worker1 / ubuntu --&gt; 바탕화면 --&gt; 우클릭 --&gt; Open Teminal $ su - root Password : ubuntu # hostnamectl set-hostname worker2 # hostname worker2 # ip addr # nano /etc/netplan/00-installer-config.yaml addresses: [192.168.137.101/24] --&gt; 192.168.137.103/24 ctrl+o (저장) ---&gt; enter ---&gt; ctrl+x (종료) # netplan apply # ip addr enp0s3 inet 192.168.137.103/24 . master 가상 머신 구동 . Oracle VM VirtualBox 관리자 master 가상 머신 선택 --&gt; 시작 . ",
    "url": "/docs/cloud/k8s-install-lab/#worker1-worker2-%EA%B0%80%EC%83%81-%EB%A8%B8%EC%8B%A0-%EC%B6%94%EA%B0%80",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#worker1-worker2-가상-머신-추가"
  },"279": {
    "doc": "Kubernetes 실습 환경",
    "title": "NatNetwork port-forwarding 설정",
    "content": "Oracle VM VirtualBox 관리자 파일 --&gt; 환경설정 --&gt; 네트워크 --&gt; NatNetwork --&gt; 톱니바퀴 (설정) --&gt; 포트포워딩 --&gt; [+] 이름 프로토콜 호스트IP 호스트 포트 게스트IP 게스트포트 worker1 TCP 192.168.56.1 102 192.168.137.102 22 worker2 TCP 192.168.56.1 103 192.168.137.103 22 . ",
    "url": "/docs/cloud/k8s-install-lab/#natnetwork-port-forwarding-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#natnetwork-port-forwarding-설정"
  },"280": {
    "doc": "Kubernetes 실습 환경",
    "title": "putty 연결 설정",
    "content": "worker1 putty 연결 설정 . putty.exe 실행 --&gt; master 선택 --&gt; Load Host Name : 192.168.56.1 Port:102 Window --&gt; Colours --&gt; Default Foreground(글자색) ,Default Background(배경색) Session --&gt; Saved Sessions : worker1 --&gt; Save worker1 연결 Accept login as : root Password : [ubuntu] . worker2 putty 연결 설정 . putty.exe 실행 --&gt; master 선택 --&gt; Load Host Name : 192.168.56.1 Port:103 Window --&gt; Colours --&gt; Default Foreground(글자색) Session --&gt; Saved Sessions : worker2 --&gt; Save worker2 연결 Accept login as : root Password : [ubuntu] . ",
    "url": "/docs/cloud/k8s-install-lab/#putty-%EC%97%B0%EA%B2%B0-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#putty-연결-설정"
  },"281": {
    "doc": "Kubernetes 실습 환경",
    "title": "(마스터 노드에서만 실행 )kubeadm init 명령을 통해서 클러스터를 생성한다.",
    "content": "kubeadm init 명령어로 마스터 서버를 만든다. root@master:~# kubeadm init I0112 13:27:59.287535 4305 version.go:254] remote version is much newer: v1.2 6.0; falling back to: stable-1.21 [init] Using Kubernetes version: v1.21.14 [preflight] Running pre-flight checks [preflight] Pulling images required for setting up a Kubernetes cluster ... 중략 Then you can join any number of worker nodes by running the following on each as root: kubeadm join 192.168.137.101:6443 --token d77u1g.yknmv3qjjf6knxf1 \\ --discovery-token-ca-cert-hash sha256:c78641cda30821182794b94198cf0a17144cebbb4b1ae54daff71f9fd48f91d0 . ",
    "url": "/docs/cloud/k8s-install-lab/#%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%85%B8%EB%93%9C%EC%97%90%EC%84%9C%EB%A7%8C-%EC%8B%A4%ED%96%89-kubeadm-init-%EB%AA%85%EB%A0%B9%EC%9D%84-%ED%86%B5%ED%95%B4%EC%84%9C-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%9C%EB%8B%A4",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#마스터-노드에서만-실행-kubeadm-init-명령을-통해서-클러스터를-생성한다"
  },"282": {
    "doc": "Kubernetes 실습 환경",
    "title": "쿠버네티스 클러스터에 조인하기 위한 명령어 구문을 저장",
    "content": "root@master:~# cat &gt; token.sh kubeadm join 192.168.137.101:6443 --token d77u1g.yknmv3qjjf6knxf1 \\ --discovery-token-ca-cert-hash sha256:c78641cda30821182794b94198cf0a17144cebbb4b1ae54daff71f9fd48f91d0 root@master:~# root@master:~# root@master:~# cat token.sh kubeadm join 192.168.137.101:6443 --token d77u1g.yknmv3qjjf6knxf1 \\ --discovery-token-ca-cert-hash sha256:c78641cda30821182794b94198cf0a17144cebbb4b1ae54daff71f9fd48f91d0 . ",
    "url": "/docs/cloud/k8s-install-lab/#%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EC%97%90-%EC%A1%B0%EC%9D%B8%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EB%AA%85%EB%A0%B9%EC%96%B4-%EA%B5%AC%EB%AC%B8%EC%9D%84-%EC%A0%80%EC%9E%A5",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#쿠버네티스-클러스터에-조인하기-위한-명령어-구문을-저장"
  },"283": {
    "doc": "Kubernetes 실습 환경",
    "title": "kubeconfig 파일의 위치를 KUBECONFIG 쉘 변수에 설정",
    "content": "root 사용자가 쿠버네티스 클러스터의 API에 접근할 수 있도록 인증하기 위함이다. # nano ~/.bashrc export KUBECONFIG=/etc/kubernetes/admin.conf &lt;---- 파일 맨 아래 줄에 추가한다. ctrl+o (저장) --&gt; enter --&gt; ctrl+x (종료) # source ~/.bashrc # echo $KUBECONFIG /etc/kubernetes/admin.conf . Pod 네트워크 추가 기능 구성 . Pod가 서로 통신 할 수 있도록 CNI (Container Network Interface) 기반 Pod 네트워크 추가 기능 구성한다. 네트워크가 설치되기 전에 클러스터 DNS (CoreDNS)가 시작되지 않는다. calico (https://docs.projectcalico.org/getting-started/kubernetes/self-managed-onprem/onpremises) # wget https://docs.projectcalico.org/manifests/calico.yaml # kubectl apply -f calico.yaml . 안될땐 아래 kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml . ",
    "url": "/docs/cloud/k8s-install-lab/#kubeconfig-%ED%8C%8C%EC%9D%BC%EC%9D%98-%EC%9C%84%EC%B9%98%EB%A5%BC-kubeconfig-%EC%89%98-%EB%B3%80%EC%88%98%EC%97%90-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#kubeconfig-파일의-위치를-kubeconfig-쉘-변수에-설정"
  },"284": {
    "doc": "Kubernetes 실습 환경",
    "title": "[마스터 노드에서만 실행] 클러스터 구성 상태 확인",
    "content": "root@master:~# kubectl get nodes NAME STATUS ROLES AGE VERSION master Ready control-plane,master 10m v1.21.0 root@master:~# kubectl get pods --all-namespaces NAMESPACE NAME READY STATUS RESTARTS AGE kube-system calico-kube-controllers-846d7f49d8-hmc2h 1/1 Running 0 4m47s kube-system calico-node-2tvpz 1/1 Running 0 4m47s kube-system coredns-558bd4d5db-cnnwp 1/1 Running 0 9m52s kube-system coredns-558bd4d5db-skncw 1/1 Running 0 9m52s kube-system etcd-master 1/1 Running 0 10m kube-system kube-apiserver-master 1/1 Running 0 10m kube-system kube-controller-manager-master 1/1 Running 0 10m kube-system kube-proxy-ln6sg 1/1 Running 0 9m52s kube-system kube-scheduler-master 1/1 Running 0 10m root@master:~# . ",
    "url": "/docs/cloud/k8s-install-lab/#%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%85%B8%EB%93%9C%EC%97%90%EC%84%9C%EB%A7%8C-%EC%8B%A4%ED%96%89-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EA%B5%AC%EC%84%B1-%EC%83%81%ED%83%9C-%ED%99%95%EC%9D%B8",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#마스터-노드에서만-실행-클러스터-구성-상태-확인"
  },"285": {
    "doc": "Kubernetes 실습 환경",
    "title": "[마스터 노드에서만 실행] 생성한 # kubeadm join 구문이 든 쉘 스크립트를 워커 노드로 복사",
    "content": "root@master:~# scp token.sh worker1:/root/token.sh The authenticity of host 'worker1 (192.168.137.102)' can't be established. ECDSA key fingerprint is SHA256:BYy8+Ddey03hnid+vAJg4KqojvmM1PMVQK0zZReh71s. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'worker1,192.168.137.102' (ECDSA) to the list of known hosts. root@worker1's password: Permission denied, please try again. root@worker1's password: token.sh 100% 179 130.5KB/s 00:00 root@master:~# scp token.sh worker2:/root/token.sh The authenticity of host 'worker2 (192.168.137.103)' can't be established. ECDSA key fingerprint is SHA256:BYy8+Ddey03hnid+vAJg4KqojvmM1PMVQK0zZReh71s. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'worker2,192.168.137.103' (ECDSA) to the list of known hosts. root@worker2's password: token.sh 100% 179 102.4KB/s 00:00 . ",
    "url": "/docs/cloud/k8s-install-lab/#%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%85%B8%EB%93%9C%EC%97%90%EC%84%9C%EB%A7%8C-%EC%8B%A4%ED%96%89-%EC%83%9D%EC%84%B1%ED%95%9C--kubeadm-join-%EA%B5%AC%EB%AC%B8%EC%9D%B4-%EB%93%A0-%EC%89%98-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EC%9B%8C%EC%BB%A4-%EB%85%B8%EB%93%9C%EB%A1%9C-%EB%B3%B5%EC%82%AC",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#마스터-노드에서만-실행-생성한--kubeadm-join-구문이-든-쉘-스크립트를-워커-노드로-복사"
  },"286": {
    "doc": "Kubernetes 실습 환경",
    "title": "[워커 노드에서만 실행] 복사된 스크립트를 실행하여 클러스터에 조인",
    "content": "worker1, worker2 # chmod +x token.sh worker1, worker2 # ./token.sh . root@worker1:~# chmod +x token.sh root@worker1:~# ./token.sh [preflight] Running pre-flight checks [preflight] Reading configuration from the cluster... [preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -o yaml' [kubelet-start] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\" [kubelet-start] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\" [kubelet-start] Starting the kubelet [kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap... This node has joined the cluster: * Certificate signing request was sent to apiserver and a response was received. * The Kubelet was informed of the new secure connection details. Run 'kubectl get nodes' on the control-plane to see this node join the cluster. ",
    "url": "/docs/cloud/k8s-install-lab/#%EC%9B%8C%EC%BB%A4-%EB%85%B8%EB%93%9C%EC%97%90%EC%84%9C%EB%A7%8C-%EC%8B%A4%ED%96%89-%EB%B3%B5%EC%82%AC%EB%90%9C-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EC%8B%A4%ED%96%89%ED%95%98%EC%97%AC-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EC%97%90-%EC%A1%B0%EC%9D%B8",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#워커-노드에서만-실행-복사된-스크립트를-실행하여-클러스터에-조인"
  },"287": {
    "doc": "Kubernetes 실습 환경",
    "title": "[마스터 노드에서만 실행] 클러스터 조인 상태 확인",
    "content": "root@master:~# kubectl cluster-info Kubernetes control plane is running at https://192.168.137.101:6443 CoreDNS is running at https://192.168.137.101:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy . root@master:~# kubectl get nodes NAME STATUS ROLES AGE VERSION master Ready control-plane,master 13m v1.21.0 worker1 NotReady &lt;none&gt; 62s v1.21.0 worker2 NotReady &lt;none&gt; 59s v1.21.0 . root@master:~# kubectl get pods --all-namespaces NAMESPACE NAME READY STATUS RESTARTS AGE kube-system calico-kube-controllers-846d7f49d8-hmc2h 1/1 Running 0 8m7s kube-system calico-node-2tvpz 1/1 Running 0 8m7s kube-system calico-node-ndnrd 0/1 Init:0/3 0 78s kube-system calico-node-s99pf 0/1 Init:1/3 0 75s kube-system coredns-558bd4d5db-cnnwp 1/1 Running 0 13m kube-system coredns-558bd4d5db-skncw 1/1 Running 0 13m kube-system etcd-master 1/1 Running 0 13m kube-system kube-apiserver-master 1/1 Running 0 13m kube-system kube-controller-manager-master 1/1 Running 0 13m kube-system kube-proxy-cbkjv 1/1 Running 0 75s kube-system kube-proxy-ln6sg 1/1 Running 0 13m kube-system kube-proxy-rvdnm 1/1 Running 0 78s kube-system kube-scheduler-master 1/1 Running 0 13m . 아래 그림을 보며 이해해 보자. [쿠버네티스 아키텍쳐 (https://kubernetes.io/docs/concepts/architecture/)] . ",
    "url": "/docs/cloud/k8s-install-lab/#%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%85%B8%EB%93%9C%EC%97%90%EC%84%9C%EB%A7%8C-%EC%8B%A4%ED%96%89-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EC%A1%B0%EC%9D%B8-%EC%83%81%ED%83%9C-%ED%99%95%EC%9D%B8",
    
    "relUrl": "/docs/cloud/k8s-install-lab/#마스터-노드에서만-실행-클러스터-조인-상태-확인"
  },"288": {
    "doc": "Label & Selector",
    "title": "Label &amp; Selector",
    "content": " ",
    "url": "/docs/cloud/k8s-labelselector/#label--selector",
    
    "relUrl": "/docs/cloud/k8s-labelselector/#label--selector"
  },"289": {
    "doc": "Label & Selector",
    "title": "Table of contents",
    "content": ". | Labels | NodeSelector | . Label &amp; Selector 에 관해 설명한다. ",
    "url": "/docs/cloud/k8s-labelselector/#table-of-contents",
    
    "relUrl": "/docs/cloud/k8s-labelselector/#table-of-contents"
  },"290": {
    "doc": "Label & Selector",
    "title": "Labels",
    "content": "클러스트 내 오브젝트 생성 시의 메타 데이터로 설정한다. 키-값으로 구성되어 있으며 컨트롤러들이 관리할 파드를 선택하고 구분하기 위해 사용된다. 라벨이 서로 다른 yaml 4개를 준비한다. root@master:~/labfile/label# ls annotation.yaml label02.yaml label04.yaml label01.yaml label03.yaml nodeselector.yaml root@master:~/labfile/label# cat label01.yaml apiVersion: v1 kind: Pod metadata: name: label-app01 labels: app: nodejs environment: develop release: beta spec: containers: - name: nodejs image: takytaky/app:v1 ports: - containerPort: 80 root@master:~/labfile/label# root@master:~/labfile/label# cat label02.yaml apiVersion: v1 kind: Pod metadata: name: label-app02 labels: app: nodejs environment: production release: beta spec: containers: - name: nodejs image: takytaky/app:v1 ports: - containerPort: 80 root@master:~/labfile/label# root@master:~/labfile/label# cat label03.yaml apiVersion: v1 kind: Pod metadata: name: label-app03 labels: app: nodejs environment: develop release: stable spec: containers: - name: nodejs image: takytaky/app:v1 ports: - containerPort: 80 root@master:~/labfile/label# root@master:~/labfile/label# cat label04.yaml apiVersion: v1 kind: Pod metadata: name: label-app04 labels: app: nodejs environment: production release: stable spec: containers: - name: nodejs image: takytaky/app:v1 ports: - containerPort: 80 root@master:~/labfile/label# . | 4개의 컨테이너를 생성한다. | . kubectl apply -f label01.yaml -f label02.yaml -f label03.yaml -f label04.yaml . | pod 조회 | . kubectl get pods --show-labels . root@master:~/labfile/label# kubectl get pods --show-labels NAME READY STATUS RESTARTS AGE LABELS init-demo 1/1 Running 0 14h &lt;none&gt; root@master:~/labfile/label# root@master:~/labfile/label# kubectl apply -f label01.yaml -f label02.yaml -f la bel03.yaml -f label04.yaml pod/label-app01 created pod/label-app02 created pod/label-app03 created pod/label-app04 created root@master:~/labfile/label# // labels 조회 root@master:~/labfile/label# kubectl get pods --show-labels NAME READY STATUS RESTARTS AGE LABELS init-demo 1/1 Running 0 14h &lt;none&gt; label-app01 1/1 Running 0 22s app=nodejs,environment=develop,release=beta label-app02 1/1 Running 0 22s app=nodejs,environment=production,release=beta label-app03 1/1 Running 0 21s app=nodejs,environment=develop,release=stable label-app04 1/1 Running 0 21s app=nodejs,environment=production,release=stable root@master:~/labfile/label# . // -l 옵션을 사용한 조회 . root@master:~/labfile/label# kubectl get pods -l environment=production,release=stable --show-labels NAME READY STATUS RESTARTS AGE LABELS label-app04 1/1 Running 0 2m48s app=nodejs,environment=production,release=stable root@master:~/labfile/label# kubectl get pods -l \"app=nodejs,environment notin (develop)\" NAME READY STATUS RESTARTS AGE label-app02 1/1 Running 0 3m label-app04 1/1 Running 0 2m59s root@master:~/labfile/label# kubectl get pods -l \"release\" --show-labels NAME READY STATUS RESTARTS AGE LABELS label-app01 1/1 Running 0 3m13s app=nodejs,environment=develop,release=beta label-app02 1/1 Running 0 3m13s app=nodejs,environment=production,release=beta label-app03 1/1 Running 0 3m12s app=nodejs,environment=develop,release=stable label-app04 1/1 Running 0 3m12s app=nodejs,environment=production,release=stable root@master:~/labfile/label# . ",
    "url": "/docs/cloud/k8s-labelselector/#labels",
    
    "relUrl": "/docs/cloud/k8s-labelselector/#labels"
  },"291": {
    "doc": "Label & Selector",
    "title": "NodeSelector",
    "content": "Label 을 통해서 노드를 선택할 수 있다. | spec &gt; nodeSelector 정의 in YAML | . apiVersion: v1 kind: Pod metadata: name: nodeselector-pod spec: nodeSelector: disk: ssd . | 라벨과 함께 노드 정보를 보여준다. | . kubectl get nodes --show-labels . | worker1 노드에 disk=ssd 라벨를 추가한다. | . kubectl label nodes worker1 disk=ssd . // worker1 에 disk=ssd 라벨 정의 root@master:~/labfile/label# kubectl label nodes worker1 disk=ssd node/worker1 labeled // 확인 root@master:~/labfile/label# kubectl get nodes --show-labels NAME STATUS ROLES AGE VERSION LABELS master Ready control-plane,master 2d10h v1.21.0 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=master,kubernetes.io/os=linux,node-role.kubernetes.io/control-plane=,node-role.kubernetes.io/master=,node.kubernetes.io/exclude-from-external-load-balancers= worker1 Ready &lt;none&gt; 2d10h v1.21.0 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,disk=ssd,kubernetes.io/arch=amd64,kubernetes.io/hostname=worker1,kubernetes.io/os=linux worker2 Ready &lt;none&gt; 2d10h v1.21.0 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=worker2,kubernetes.io/os=linux root@master:~/labfile/label# root@master:~/labfile/label# cat nodeselector.yaml apiVersion: v1 kind: Pod metadata: name: nodeselector-pod spec: nodeSelector: disk: ssd containers: - name: nodeselector-pod image: takytaky/app:v1 ports: - containerPort: 80 root@master:~/labfile/label# // 생성 root@master:~/labfile/label# kubectl apply -f nodeselector.yaml pod/nodeselector-pod created root@master:~/labfile/label# kubectl get pods NAME READY STATUS RESTARTS AGE nodeselector-pod 1/1 Running 0 24s // disk=ssd 로 지정된 worker1 에서 생성됨 확인 root@master:~/labfile/label# kubectl get pods -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES nodeselector-pod 1/1 Running 0 44s 172.16.235.136 worker1 &lt;none&gt; &lt;none&gt; root@master:~/labfile/label# . | annotation : 사용자가 오브젝트를 구분하고 필터링 하기 위한 용도이다. | 파드 상세 조회 kubectl describe pod annotation-nodejs . | -o json 의미는 output 을 json 포맷으로 한다. | . kubectl get pod annotation-nodejs -o json . | metadata.annotations 부분만 보여줄것 | . kubectl get pod annotation-nodejs -o jsonpath='{.metadata.annotations}' . root@master:~/labfile/label# cat annotation.yaml apiVersion: v1 kind: Pod metadata: name: annotation-nodejs labels: app: nodejs annotations: manufacturer: \"takytaky\" e-mail: \"takytaky@example.com\" release-version: \"v1\" spec: containers: - name: nodejs image: takytaky/app:v1 ports: - containerPort: 80 root@master:~/labfile/label# root@master:~/labfile/label# kubectl apply -f annotation.yaml pod/annotation-nodejs created root@master:~/labfile/label# // 파드 상세 조회 root@master:~/labfile/label# kubectl describe pod annotation-nodejs Name: annotation-nodejs Namespace: default Priority: 0 Node: worker1/192.168.137.102 Start Time: Sun, 15 Jan 2023 00:10:46 +0000 Labels: app=nodejs Annotations: cni.projectcalico.org/containerID: 3ab7969b5b88a8fc45a563d107daeb401ab1b6ddc0618ab3e04d3036ea8f9e7e cni.projectcalico.org/podIP: 172.16.235.137/32 cni.projectcalico.org/podIPs: 172.16.235.137/32 e-mail: takytaky@example.com manufacturer: takytaky release-version: v1 Status: Running IP: 172.16.235.137... 중략 Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Scheduled 27s default-scheduler Successfully assigned default/annotation-nodejs to worker1 Normal Pulled 26s kubelet Container image \"takytaky/app:v1\" already present on machine Normal Created 26s kubelet Created container nodejs Normal Started 26s kubelet Started container nodejs root@master:~/labfile/label# root@master:~/labfile/label# ^C root@master:~/labfile/label# kubectl get pod annotation-nodejs -o json { \"apiVersion\": \"v1\", \"kind\": \"Pod\", \"metadata\": { \"annotations\": { \"cni.projectcalico.org/containerID\": \"3ab7969b5b88a8fc45a563d107daeb401ab1b6ddc0618ab3e04d3036ea8f9e7e\", \"cni.projectcalico.org/podIP\": \"172.16.235.137/32\", \"cni.projectcalico.org/podIPs\": \"172.16.235.137/32\", \"e-mail\": \"takytaky@example.com\", \"kubectl.kubernetes.io/last-applied-configuration\": \"{\\\"apiVersion\\\":\\\"v1\\\",\\\"kind\\\":\\\"Pod\\\",\\\"metadata\\\":{\\\"annotations\\\":{\\\"e-mail\\\":\\\"takytaky@example.com\\\",\\\"manufacturer\\\":\\\"takytaky\\\",\\\"release-version\\\":\\\"v1\\\"},\\\"labels\\\":{\\\"app\\\":\\\"nodejs\\\"},\\\"name\\\":\\\"annotation-nodejs\\\",\\\"namespace\\\":\\\"default\\\"},\\\"spec\\\":{\\\"containers\\\":[{\\\"image\\\":\\\"takytaky/app:v1\\\",\\\"name\\\":\\\"nodejs\\\",\\\"ports\\\":[{\\\"containerPort\\\":80}]}]}}\\n\", \"manufacturer\": \"takytaky\", \"release-version\": \"v1\" }, \"creationTimestamp\": \"2023-01-15T00:10:46Z\", \"labels\": { \"app\": \"nodejs\" }, \"name\": \"annotation-nodejs\", \"namespace\": \"default\", \"resourceVersion\": \"24929\", \"uid\": \"9283cd0a-907c-4e57-bb06-c5f01934d36e\" }, \"spec\": { \"containers\": [ { \"image\": \"takytaky/app:v1\", \"imagePullPolicy\": \"IfNotPresent\", \"name\": \"nodejs\", \"ports\": [ { \"containerPort\": 80, \"protocol\": \"TCP\" } ], \"resources\": {}, \"terminationMessagePath\": \"/dev/termination-log\", \"terminationMessagePolicy\": \"File\", \"volumeMounts\": [ { \"mountPath\": \"/var/run/secrets/kubernetes.io/serviceaccount\", \"name\": \"kube-api-access-n2bwn\", \"readOnly\": true } ] } ], \"dnsPolicy\": \"ClusterFirst\", \"enableServiceLinks\": true, \"nodeName\": \"worker1\", \"preemptionPolicy\": \"PreemptLowerPriority\", \"priority\": 0, \"restartPolicy\": \"Always\", \"schedulerName\": \"default-scheduler\", \"securityContext\": {}, \"serviceAccount\": \"default\", \"serviceAccountName\": \"default\", \"terminationGracePeriodSeconds\": 30, \"tolerations\": [ { \"effect\": \"NoExecute\", \"key\": \"node.kubernetes.io/not-ready\", \"operator\": \"Exists\", \"tolerationSeconds\": 300 }, { \"effect\": \"NoExecute\", \"key\": \"node.kubernetes.io/unreachable\", \"operator\": \"Exists\", \"tolerationSeconds\": 300 } ], \"volumes\": [ { \"name\": \"kube-api-access-n2bwn\", \"projected\": { \"defaultMode\": 420, \"sources\": [ { \"serviceAccountToken\": { \"expirationSeconds\": 3607, \"path\": \"token\" } }, { \"configMap\": { \"items\": [ { \"key\": \"ca.crt\", \"path\": \"ca.crt\" } ], \"name\": \"kube-root-ca.crt\" } }, { \"downwardAPI\": { \"items\": [ { \"fieldRef\": { \"apiVersion\": \"v1\", \"fieldPath\": \"metadata.namespace\" }, \"path\": \"namespace\" } ] } } ] } } ] }, \"status\": { \"conditions\": [ { \"lastProbeTime\": null, \"lastTransitionTime\": \"2023-01-15T00:10:46Z\", \"status\": \"True\", \"type\": \"Initialized\" }, { \"lastProbeTime\": null, \"lastTransitionTime\": \"2023-01-15T00:10:48Z\", \"status\": \"True\", \"type\": \"Ready\" }, { \"lastProbeTime\": null, \"lastTransitionTime\": \"2023-01-15T00:10:48Z\", \"status\": \"True\", \"type\": \"ContainersReady\" }, { \"lastProbeTime\": null, \"lastTransitionTime\": \"2023-01-15T00:10:46Z\", \"status\": \"True\", \"type\": \"PodScheduled\" } ], \"containerStatuses\": [ { \"containerID\": \"docker://ff1ca04c7800af5f0c600aeff6d6a8131761cf826ea9e5a1e82c673011c82372\", \"image\": \"takytaky/app:v1\", \"imageID\": \"docker-pullable://takytaky/app@sha256:a0893a44ecbc0c74e022175caa64748077ed8a6502c4e35516df2797fc530804\", \"lastState\": {}, \"name\": \"nodejs\", \"ready\": true, \"restartCount\": 0, \"started\": true, \"state\": { \"running\": { \"startedAt\": \"2023-01-15T00:10:48Z\" } } } ], \"hostIP\": \"192.168.137.102\", \"phase\": \"Running\", \"podIP\": \"172.16.235.137\", \"podIPs\": [ { \"ip\": \"172.16.235.137\" } ], \"qosClass\": \"BestEffort\", \"startTime\": \"2023-01-15T00:10:46Z\" } } root@master:~/labfile/label# ^C // metadata.annotations 부분만 보여줄것 root@master:~/labfile/label# kubectl get pod annotation-nodejs -o jsonpath='{.metadata.annotations}' {\"cni.projectcalico.org/containerID\":\"3ab7969b5b88a8fc45a563d107daeb401ab1b6ddc0618ab3e04d3036ea8f9e7e\",\"cni.projectcalico.org/podIP\":\"172.16.235.137/32\",\"cni.projectcalico.org/podIPs\":\"172.16.235.137/32\",\"e-mail\":\"takytaky@example.com\",\"kubectl.kubernetes.io/last-applied-configuration\":\"{\\\"apiVersion\\\":\\\"v1\\\",\\\"kind\\\":\\\"Pod\\\",\\\"metadata\\\":{\\\"annotations\\\":{\\\"e-mail\\\":\\\"takytaky@example.com\\\",\\\"manufacturer\\\":\\\"takytaky\\\",\\\"release-version\\\":\\\"v1\\\"},\\\"labels\\\":{\\\"app\\\":\\\"nodejs\\\"},\\\"name\\\":\\\"annotation-nodejs\\\",\\\"namespace\\\":\\\"default\\\"},\\\"spec\\\":{\\\"containers\\\":[{\\\"image\\\":\\\"takytaky/app:v1\\\",\\\"name\\\":\\\"nodejs\\\",\\\"ports\\\":[{\\\"containerPort\\\":80}]}]}}\\n\",\"manufacturer\":\"takytaky\",\"release-version\":\"v1\"}root@master:~/labfile/label# root@master:~/labfile/label# ^C root@master:~/labfile/label# root@master:~/labfile/label# apt install -y jq Reading package lists... Done Building dependency tree Reading state information... Done The following additional packages will be installed: libjq1 libonig4 The following NEW packages will be installed: jq libjq1 libonig4 0 upgraded, 3 newly installed, 0 to remove and 87 not upgraded. Need to get 276 kB of archives. After this operation, 930 kB of additional disk space will be used. Get:1 http://kr.archive.ubuntu.com/ubuntu bionic/universe amd64 libonig4 amd64 6.7.0-1 [119 kB] Get:2 http://kr.archive.ubuntu.com/ubuntu bionic/universe amd64 libjq1 amd64 1.5+dfsg-2 [111 kB] Get:3 http://kr.archive.ubuntu.com/ubuntu bionic/universe amd64 jq amd64 1.5+dfsg-2 [45.6 kB] Fetched 276 kB in 2s (139 kB/s) Selecting previously unselected package libonig4:amd64. (Reading database ... 173940 files and directories currently installed.) Preparing to unpack .../libonig4_6.7.0-1_amd64.deb ... Unpacking libonig4:amd64 (6.7.0-1) ... Selecting previously unselected package libjq1:amd64. Preparing to unpack .../libjq1_1.5+dfsg-2_amd64.deb ... Unpacking libjq1:amd64 (1.5+dfsg-2) ... Selecting previously unselected package jq. Preparing to unpack .../jq_1.5+dfsg-2_amd64.deb ... Unpacking jq (1.5+dfsg-2) ... Setting up libonig4:amd64 (6.7.0-1) ... Setting up libjq1:amd64 (1.5+dfsg-2) ... Setting up jq (1.5+dfsg-2) ... Processing triggers for man-db (2.8.3-2ubuntu0.1) ... Processing triggers for libc-bin (2.27-3ubuntu1.5) ... root@master:~/labfile/label# kubectl get pod annotation-nodejs -o jsonpath='{.metadata.annotations}' | jq { \"cni.projectcalico.org/containerID\": \"3ab7969b5b88a8fc45a563d107daeb401ab1b6ddc0618ab3e04d3036ea8f9e7e\", \"cni.projectcalico.org/podIP\": \"172.16.235.137/32\", \"cni.projectcalico.org/podIPs\": \"172.16.235.137/32\", \"e-mail\": \"takytaky@example.com\", \"kubectl.kubernetes.io/last-applied-configuration\": \"{\\\"apiVersion\\\":\\\"v1\\\",\\\"kind\\\":\\\"Pod\\\",\\\"metadata\\\":{\\\"annotations\\\":{\\\"e-mail\\\":\\\"takytaky@example.com\\\",\\\"manufacturer\\\":\\\"takytaky\\\",\\\"release-version\\\":\\\"v1\\\"},\\\"labels\\\":{\\\"app\\\":\\\"nodejs\\\"},\\\"name\\\":\\\"annotation-nodejs\\\",\\\"namespace\\\":\\\"default\\\"},\\\"spec\\\":{\\\"containers\\\":[{\\\"image\\\":\\\"takytaky/app:v1\\\",\\\"name\\\":\\\"nodejs\\\",\\\"ports\\\":[{\\\"containerPort\\\":80}]}]}}\\n\", \"manufacturer\": \"takytaky\", \"release-version\": \"v1\" } . jq 사용법 . json 포맷에서의 색깔을 구분하여 보여준다. # apt install -y jq 설치 후 아래와 같이 jq 옵션을 추가한다. # kubectl get pod annotation-nodejs -o jsonpath='{.metadata.annotations}' | jq . ",
    "url": "/docs/cloud/k8s-labelselector/#nodeselector",
    
    "relUrl": "/docs/cloud/k8s-labelselector/#nodeselector"
  },"292": {
    "doc": "Label & Selector",
    "title": "Label & Selector",
    "content": " ",
    "url": "/docs/cloud/k8s-labelselector/",
    
    "relUrl": "/docs/cloud/k8s-labelselector/"
  },"293": {
    "doc": "Object & Controller",
    "title": "Object &amp; Controller",
    "content": " ",
    "url": "/docs/cloud/k8s-object-controller/#object--controller",
    
    "relUrl": "/docs/cloud/k8s-object-controller/#object--controller"
  },"294": {
    "doc": "Object & Controller",
    "title": "Table of contents",
    "content": ". | Object . | Pod | Service | Volume | NameSpace | . | Controller . | ReplicaSet | Deployment | StatefulSet | DaemonSet | Job | CronJob | . | . 컨네이너는 크게 오브젝트(Object) 와 오브젝트를 관리하는 Controller 로 나뉜다. ",
    "url": "/docs/cloud/k8s-object-controller/#table-of-contents",
    
    "relUrl": "/docs/cloud/k8s-object-controller/#table-of-contents"
  },"295": {
    "doc": "Object & Controller",
    "title": "Object",
    "content": "관리 대상이다. Pod . Pod 란 콩깍지라는 어원으로 어플리케이션 기본 실행 단위(컨테이너) 를 배포할 수 있는 가장 작은 단위를 말한다. 즉, 하나의 컨테이너 또는 그를 보조하는 컨테이너까지 포함하여 이를 Pod 라고 일컫는다. Service . 파드는 일회성으로 제거 후 다시 생성되는데 이때 노드가 바뀔 경우 IP 도 달라지게 된다. 서비스로 인해 노드 외부에서는 고정 IP 주소 로 파드에 접근할 수 있다. Volume . 컨테이너가 삭제되더라고 데이터는 유지되어야 하므로 볼륩 을 통해 데이터를 관리한다. 도커의 볼륨과 의미는 동일하다. | PV (PersistantVolume) | PVC (PersistantVolumeClame) | . NameSpace . 동일 물리 클러스터에서 논리적으로 구분된 가상 클러스터를 일컫는다. 여러 팀이나 많은 사용자가 있을 경우 클러스터 내에서 여러 어플리케이션을 실행할 경우 사용한다. default 가 기본값이다. root@master:~# kubectl get namespace NAME STATUS AGE default Active 41h // 기본 네임스페이스 kube-node-lease Active 41h // 스케일링 관련 네임스페이스 kube-public Active 41h // 모든 사용자가 읽기 가능한 네임스페이스 kube-system Active 41h // 쿠버네티스 시스템에서 생성한 네임스페이스 . 추가/삭제 테스트 . root@master:~# kubectl get ns NAME STATUS AGE default Active 41h kube-node-lease Active 41h kube-public Active 41h kube-system Active 41h root@master:~# root@master:~# kubectl create ns test-system namespace/test-system created root@master:~# root@master:~# kubectl get ns NAME STATUS AGE default Active 42h kube-node-lease Active 42h kube-public Active 42h kube-system Active 42h test-system Active 4s root@master:~# root@master:~# kubectl delete ns test-system namespace \"test-system\" deleted root@master:~# kubectl get ns \\NAME STATUS AGE default Active 42h kube-node-lease Active 42h kube-public Active 42h kube-system Active 42h root@master:~# \\ . root@master:~# kubectl config current-context kubernetes-admin@kubernetes root@master:~# root@master:~# kubectl config get-contexts kubernetes-admin@kubernetes CURRENT NAME CLUSTER AUTHINFO NAMESPACE * kubernetes-admin@kubernetes kubernetes kubernetes-admin // namespace 수정 root@master:~# kubectl config set-context kubernetes-admin@kubernetes --namespace=kube-system Context \"kubernetes-admin@kubernetes\" modified. root@master:~# root@master:~# kubectl config get-contexts kubernetes-admin@kubernetes CURRENT NAME CLUSTER AUTHINFO NAMESPACE * kubernetes-admin@kubernetes kubernetes kubernetes-admin kube-system root@master:~# kubectl get pods NAME READY STATUS RESTARTS AGE calico-kube-controllers-846d7f49d8-hmc2h 1/1 Running 1 41h calico-node-2tvpz 1/1 Running 2 41h calico-node-ndnrd 1/1 Running 2 41h calico-node-s99pf 1/1 Running 1 41h coredns-558bd4d5db-cnnwp 1/1 Running 1 42h coredns-558bd4d5db-skncw 1/1 Running 1 42h etcd-master 1/1 Running 2 42h kube-apiserver-master 1/1 Running 2 42h kube-controller-manager-master 1/1 Running 2 42h kube-proxy-cbkjv 1/1 Running 2 41h kube-proxy-ln6sg 1/1 Running 2 42h kube-proxy-rvdnm 1/1 Running 2 41h kube-scheduler-master 1/1 Running 2 42h root@master:~# root@master:~# kubectl config set-context kubernetes-admin@kubernetes --namespace=default Context \"kubernetes-admin@kubernetes\" modified. root@master:~# kubectl get pods No resources found in default namespace. ",
    "url": "/docs/cloud/k8s-object-controller/#object",
    
    "relUrl": "/docs/cloud/k8s-object-controller/#object"
  },"296": {
    "doc": "Object & Controller",
    "title": "Controller",
    "content": "Object 를 관리하는 얘들이다. 파드가 원하는 수만큼 배포/유지되도록 한다. ReplicaSet . 지정한 수만큼의 파드가 항상 실행되도록 관리한다. Deployment . 일정수의 파드 수 유지, 롤아웃/롤백, 배포 중 일시정지 등의 기능이 있다. 기존에는 Replicaset 을 사용했지만 현재는 Deployment 를 가장 많이 사용한다. StatefulSet . DaemonSet . Job . CronJob . ",
    "url": "/docs/cloud/k8s-object-controller/#controller",
    
    "relUrl": "/docs/cloud/k8s-object-controller/#controller"
  },"297": {
    "doc": "Object & Controller",
    "title": "Object & Controller",
    "content": " ",
    "url": "/docs/cloud/k8s-object-controller/",
    
    "relUrl": "/docs/cloud/k8s-object-controller/"
  },"298": {
    "doc": "Pod",
    "title": "Pod",
    "content": " ",
    "url": "/docs/cloud/k8s-pod/",
    
    "relUrl": "/docs/cloud/k8s-pod/"
  },"299": {
    "doc": "Pod",
    "title": "Table of contents",
    "content": ". | Pod 생명 주기 | Pod 생성하기 . | Pod 관련 조회 . | kubectl get pods | kubectl describe pod [app] | kubectl delete pod --all | . | 명령으로 Pod 생성 . | kubectl run app --image takytaky/app:v1 | kubectl delete pod app | . | YAML 파일 사용하여 Pod 생성 . | kubectl apply -f app.yaml | kubectl delete -f app.yaml | . | . | Pod 리소스 할당 . | CPU | Memory | . | initContainer (초기화 컨테이너) | Static Pod (스태틱 파드) | . Pod 에 관해 설명한다. ",
    "url": "/docs/cloud/k8s-pod/#table-of-contents",
    
    "relUrl": "/docs/cloud/k8s-pod/#table-of-contents"
  },"300": {
    "doc": "Pod",
    "title": "Pod 생명 주기",
    "content": ". [Pod 및 컨테이너 ] . Pod 란 콩깍지라는 어원으로 어플리케이션 기본 실행 단위(컨테이너) 를 배포할 수 있는 가장 작은 단위를 말한다. 즉, 하나의 컨테이너 또는 그를 보조하는 컨테이너까지 포함하여 이를 Pod 라고 일컫는다. | Pending | Running | Succeeded | Failed | Unknown | . ",
    "url": "/docs/cloud/k8s-pod/#pod-%EC%83%9D%EB%AA%85-%EC%A3%BC%EA%B8%B0",
    
    "relUrl": "/docs/cloud/k8s-pod/#pod-생명-주기"
  },"301": {
    "doc": "Pod",
    "title": "Pod 생성하기",
    "content": "Pod 관련 조회 . kubectl get pods . pod 조회한다. kubectl describe pod [app] . 상세 조회 . kubectl delete pod --all . 모든 파드를 삭제 . 명령으로 Pod 생성 . kubectl run app --image takytaky/app:v1 . kubectl delete pod app . root@master:~# kubectl delete pod app ^[[A^[[5~pod \"app\" deleted root@master:~# kubectl run app --image takytaky/app:v1 pod/app created root@master:~# kubectl describe pod app . YAML 파일 사용하여 Pod 생성 . yaml 파일 설정은 아래와 같은 때를 예로 한다. root@master:~/labfile/pod# cat app.yaml apiVersion: v1 kind: Pod metadata: name: app // 파드의 이름(Namespace 에서 유일한 식별정보) labels: app: webapp // 오브젝트를 식별하는 라벨(유일 X) spec: containers: - image: takytaky/app:v1 // 컨테이너에 사용할 이미지 name: app-container ports: - containerPort: 80 // 컨테이너에 접속할 포트 번호 protocol: TCP root@master:~/labfile/pod# . kubectl apply -f app.yaml . Pod 생성 명령어를 입력한다. root@master:~/labfile/pod# kubectl apply -f app.yaml pod/app created root@master:~/labfile/pod# // 확인 root@master:~/labfile/pod# kubectl get pods NAME READY STATUS RESTARTS AGE app 1/1 Running 0 17s root@master:~/labfile/pod# . kubectl delete -f app.yaml . root@master:~/labfile/pod# kubectl delete -f app.yaml pod “app” deleted . ",
    "url": "/docs/cloud/k8s-pod/#pod-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/cloud/k8s-pod/#pod-생성하기"
  },"302": {
    "doc": "Pod",
    "title": "Pod 리소스 할당",
    "content": "CPU . root@master:~/labfile/pod/pod-resources# cat cpu-request-limit.yaml apiVersion: v1 kind: Pod metadata: name: cpu-demo namespace: cpu-example spec: containers: - name: cpu-demo-ctr image: vish/stress resources: limits: cpu: \"1\" requests: cpu: \"0.5\" args: - -cpus - \"2\" root@master:~/labfile/pod/pod-resources# root@master:~/labfile/pod/pod-resources# kubectl create namespace cpu-example namespace/cpu-example created root@master:~/labfile/pod/pod-resources# kubectl get ns NAME STATUS AGE cpu-example Active 5s default Active 43h kube-node-lease Active 43h kube-public Active 43h kube-system Active 43h root@master:~/labfile/pod/pod-resources# kubectl apply -f cpu-request-limit.yaml pod/cpu-demo created . worker1 에 생성됨 . Every 1.0s: kubectl get pods -o wide -n cpu-example master: Sat Jan 14 08:33:37 2023 NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES cpu-demo 1/1 Running 0 2m46s 172.16.235.131 worker1 &lt;none&gt; &lt;none&gt; . worker1 에서 docker stats 실시간 자원 사용량 조회 . CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS f82cf3210728 k8s_cpu-demo-ctr_cpu-demo_cpu-example_01bcc06c-4fb9-4d41-9ec0-8ed06f9a8f45_0 97.67% 1.191MiB / 3.852GiB 0.03% 0B / 0B 0B / 0B 5 7c06002bc43e k8s_POD_cpu-demo_cpu-example_01bcc06c-4fb9-4d41-9ec0-8ed06f9a8f45_0 0.00% 564KiB / 3.852GiB 0.01% 0B / 0B 0B / 0B 1 b2938116ec2a k8s_calico-node_calico-node-ndnrd_kube-system_8f163faa-d00f-4ed4-8a43-70239433078b_2 2.20% 93.87MiB / 3.852GiB 2.38% 0B / 0B 30.5MB / 233kB 64 db016fb7b959 k8s_kube-proxy_kube-proxy-rvdnm_kube-system_b0fd824c-953a-4014-8397-419a58d57d6c_2 0.00% 16.69MiB / 3.852GiB 0.42% 0B / 0B 44MB / 12.3kB 7 2d58d5594367 k8s_POD_calico-node-ndnrd_kube-system_8f163faa-d00f-4ed4-8a43-70239433078b_2 0.00% 1.312MiB / 3.852GiB 0.03% 0B / 0B 627kB / 0B 1 6b4b7d59384d k8s_POD_kube-proxy-rvdnm_kube-system_b0fd824c-953a-4014-8397-419a58d57d6c_2 0.00% 740KiB / 3.852GiB 0.02% 0B / 0B 0B / 0B 1 . Memory . root@master:~/labfile/pod/pod-resources# cat memory-request-limit.yaml apiVersion: v1 kind: Pod metadata: name: memory-demo namespace: mem-example spec: containers: - name: memory-demo-ctr image: polinux/stress resources: limits: memory: \"200Mi\" requests: memory: \"100Mi\" command: [\"stress\"] args: [\"--vm\", \"1\", \"--vm-bytes\", \"150M\", \"--vm-hang\", \"1\"] root@master:~/labfile/pod/pod-resources# // NS 생성 root@master:~/labfile/pod/pod-resources# kubectl create ns mem-example namespace/mem-example created root@master:~/labfile/pod/pod-resources# kubectl get ns NAME STATUS AGE default Active 43h kube-node-lease Active 43h kube-public Active 43h kube-system Active 43h mem-example Active 4s // 컨테이너 생성 root@master:~/labfile/pod/pod-resources# kubectl apply -f memory-request-limit.yaml pod/memory-demo created root@master:~/labfile/pod/pod-resources# root@master:~/labfile/pod/pod-resources# . 컨테이너 생성 확인한다. Every 1.0s: kubectl get pods -o wide -n mem-example master: Sat Jan 14 08:39:18 2023 NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES memory-demo 1/1 Running 0 2m43s 172.16.189.69 worker2 &lt;none&gt; &lt;none&gt; . worker2 에서 메모리 사용량 확인한다. root@worker2:~# docker stats --no-stream CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS 373dff622661 k8s_memory-demo-ctr_memory-demo_mem-example_4a24635a-760d-4e8b-93f1-db0d45f4f7a8_0 15.75% 151.1MiB / 200MiB 75.54% 0B / 0B 0B / 0B 2 38ce1f8aecee k8s_POD_memory-demo_mem-example_4a24635a-760d-4e8b-93f1-db0d45f4f7a8_0 0.00% 628KiB / 3.852GiB 0.02% 0B / 0B 0B / 0B 1 8479dcbb9470 k8s_calico-node_calico-node-s99pf_kube-system_640bad34-5dc5-4c64-91cb-5b21aeee4dce_1 2.07% 91.51MiB / 3.852GiB 2.32% 0B / 0B 29.2MB / 233kB 63 ee914529a024 k8s_kube-proxy_kube-proxy-cbkjv_kube-system_ad42f097-9ee0-4659-b46f-d01757439edd_2 0.00% 16.6MiB / 3.852GiB 0.42% 0B / 0B 44MB / 12.3kB 7 db632c6cc766 k8s_POD_calico-node-s99pf_kube-system_640bad34-5dc5-4c64-91cb-5b21aeee4dce_2 0.00% 760KiB / 3.852GiB 0.02% 0B / 0B 0B / 0B 1 47f87181b42e k8s_POD_kube-proxy-cbkjv_kube-system_ad42f097-9ee0-4659-b46f-d01757439edd_2 0.00% 1.305MiB / 3.852GiB 0.03% 0B / 0B 627kB / 0B 1 root@worker2:~# . ",
    "url": "/docs/cloud/k8s-pod/#pod-%EB%A6%AC%EC%86%8C%EC%8A%A4-%ED%95%A0%EB%8B%B9",
    
    "relUrl": "/docs/cloud/k8s-pod/#pod-리소스-할당"
  },"303": {
    "doc": "Pod",
    "title": "initContainer (초기화 컨테이너)",
    "content": "컨테이너가 실행되기 전에 파드를 초기화 할 목적으로 사용된다. [초기화 컨테이너 예시] . root@master:~/labfile/pod# cat init-containers.yaml apiVersion: v1 kind: Pod metadata: name: init-demo spec: containers: - name: nginx image: nginx ports: - containerPort: 80 volumeMounts: - name: workdir mountPath: /usr/share/nginx/html # These containers are run during pod initialization initContainers: - name: install image: busybox command: - wget - \"-O\" - \"/work-dir/index.html\" - http://info.cern.ch volumeMounts: - name: workdir mountPath: \"/work-dir\" dnsPolicy: Default volumes: - name: workdir emptyDir: {} root@master:~/labfile/pod# kubectl apply -f init-containers.yaml pod/init-demo created root@master:~/labfile/pod# root@master:~/labfile/pod# curl -sf http://172.16.235.132 &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;header&gt; &lt;title&gt;http://info.cern.ch&lt;/title&gt; &lt;/header&gt; &lt;h1&gt;http://info.cern.ch - home of the first website&lt;/h1&gt; &lt;p&gt;From here you can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"http://info.cern.ch/hypertext/WWW/TheProject.html\"&gt;Browse the first website&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"http://line-mode.cern.ch/www/hypertext/WWW/TheProject.html\"&gt;Browse the first website using the line-mode browser simulator&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"http://home.web.cern.ch/topics/birth-web\"&gt;Learn about the birth of the web&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"http://home.web.cern.ch/about\"&gt;Learn about CERN, the physics laboratory where the web was born&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;&lt;/html&gt; . ",
    "url": "/docs/cloud/k8s-pod/#initcontainer-%EC%B4%88%EA%B8%B0%ED%99%94-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88",
    
    "relUrl": "/docs/cloud/k8s-pod/#initcontainer-초기화-컨테이너"
  },"304": {
    "doc": "Pod",
    "title": "Static Pod (스태틱 파드)",
    "content": "apiserver 를 통하지 않고, kubelet 이 직접 실행하는 파드이며, 기본 경로는 /etc/kubernetes/manifests 이다. root@master:~/labfile/pod# cd /etc/kubernetes/manifests root@master:/etc/kubernetes/manifests# ll total 24 drwxr-xr-x 2 root root 4096 Jan 12 13:29 ./ drwxr-xr-x 4 root root 4096 Jan 14 07:35 ../ -rw------- 1 root root 2195 Jan 12 13:29 etcd.yaml -rw------- 1 root root 3978 Jan 12 13:29 kube-apiserver.yaml -rw------- 1 root root 3351 Jan 12 13:29 kube-controller-manager.yaml -rw------- 1 root root 1385 Jan 12 13:29 kube-scheduler.yaml . master 시작 시 kubelet 데몬 실행에서 위 static pod 가 실행된다. ",
    "url": "/docs/cloud/k8s-pod/#static-pod-%EC%8A%A4%ED%83%9C%ED%8B%B1-%ED%8C%8C%EB%93%9C",
    
    "relUrl": "/docs/cloud/k8s-pod/#static-pod-스태틱-파드"
  },"305": {
    "doc": "Replicaset",
    "title": "Replicaset",
    "content": " ",
    "url": "/docs/cloud/k8s-replicaset/",
    
    "relUrl": "/docs/cloud/k8s-replicaset/"
  },"306": {
    "doc": "Replicaset",
    "title": "Table of contents",
    "content": ". | YAML 포맷 | Replica 생성 . | kubectl apply -f deploy-nginx.yaml | . | Replica 변경 . | kubectl scale rs replicaset-nginx --replicas=4 | . | Replica 삭제 | . Replicatset 에 관해 설명한다. ",
    "url": "/docs/cloud/k8s-replicaset/#table-of-contents",
    
    "relUrl": "/docs/cloud/k8s-replicaset/#table-of-contents"
  },"307": {
    "doc": "Replicaset",
    "title": "YAML 포맷",
    "content": ". | kind : Replicaset . | spec &gt; selector &gt; matchLabels . | 여기에 정의된 라벨을 가진 파드에 대해서 먼저 확인한다. | . | spec &gt; template &gt; metadata &gt; labels . | 실행할 파드의 라벨을 정한다. | . | spec &gt; replicas . | 실행할 파드의 개수를 정한다. | . | . ",
    "url": "/docs/cloud/k8s-replicaset/#yaml-%ED%8F%AC%EB%A7%B7",
    
    "relUrl": "/docs/cloud/k8s-replicaset/#yaml-포맷"
  },"308": {
    "doc": "Replicaset",
    "title": "Replica 생성",
    "content": "kubectl apply -f deploy-nginx.yaml . ",
    "url": "/docs/cloud/k8s-replicaset/#replica-%EC%83%9D%EC%84%B1",
    
    "relUrl": "/docs/cloud/k8s-replicaset/#replica-생성"
  },"309": {
    "doc": "Replicaset",
    "title": "Replica 변경",
    "content": "kubectl scale rs replicaset-nginx --replicas=4 . ",
    "url": "/docs/cloud/k8s-replicaset/#replica-%EB%B3%80%EA%B2%BD",
    
    "relUrl": "/docs/cloud/k8s-replicaset/#replica-변경"
  },"310": {
    "doc": "Replicaset",
    "title": "Replica 삭제",
    "content": "kubectl delete rs replicaset-nginx . | 레플리카셋 + 파드들 삭제 | . kubectl delete rs replicaset-nginx --cascade=orphan . | 레플리카셋만 삭제된다. | . terminal 2 # watch -n 1 kubectl get rs,pods -o wide # cd /root/labfile/controller/replicaset # cat rs-nginx.yaml # kubectl apply -f rs-nginx.yaml # kubectl get pods --show-labels # kubectl delete pod replicaset-nginx-p9bqp --&gt; 레플리카셋에 의해서 생성된 파드 이름 확인 후 진행 # kubectl scale rs replicaset-nginx --replicas=4 # kubectl scale rs replicaset-nginx --replicas=3 # kubectl delete rs replicaset-nginx --&gt; 레플리카셋 + 파드들 삭제 # kubectl apply -f rs-nginx.yaml # kubectl delete rs replicaset-nginx --cascade=orphan # kubectl apply -f rs-nginx.yaml . | kubectl delete rs replicaset-nginx . | kubectl delete rs --all . | . 실습 정리 . kubectl delete rs replicaset-nginx kubectl delete rs --all . ",
    "url": "/docs/cloud/k8s-replicaset/#replica-%EC%82%AD%EC%A0%9C",
    
    "relUrl": "/docs/cloud/k8s-replicaset/#replica-삭제"
  },"311": {
    "doc": "Service",
    "title": "Service",
    "content": " ",
    "url": "/docs/cloud/k8s-service/",
    
    "relUrl": "/docs/cloud/k8s-service/"
  },"312": {
    "doc": "Service",
    "title": "Table of contents",
    "content": ". | ClusterIP . | Deployment 실행하기 | 연결 확인 (curl -sf http://172.16.189.89 | grep Hello) | 서비스 생성하기 (spec &gt; type : ClusterIP) | 서비스 추가 확인하기 | . | NodePort . | 파드 생성하기 (hostname-server) | 서비스 생성하기 (spec &gt; type : NodePort) | pod, service 생성 확인 | 네트워크 환경 세팅하기 | 외부에서 접속하기 | . | NodeBalancer . | To install MetalLB, apply the manifest: | LoadBalancer 의 IP 정보 구성 | . | . Service 를 사용하면 파드가 클러스터 안 어디에 있던 고정 IP 주소 를 통해서 접근할 수 있다. 서비스는 아래와 같이 세가지의 타입이 있다. ",
    "url": "/docs/cloud/k8s-service/#table-of-contents",
    
    "relUrl": "/docs/cloud/k8s-service/#table-of-contents"
  },"313": {
    "doc": "Service",
    "title": "ClusterIP",
    "content": "기본 서비스 타입으로 클러스터 내부에서만 사용가능하며 외부에서는 사용할 수 없다. Deployment 실행하기 . kubectl apply -f hostname-server.yaml 을 통해 파드를 생성한다. root@master:~/labfile/service# cat hostname-server.yaml apiVersion: apps/v1 kind: Deployment metadata: name: hostname-server labels: app: hostname-server spec: replicas: 2 selector: matchLabels: app: hostname-server template: metadata: labels: app: hostname-server spec: containers: - name: hostname-server image: takytaky/hostname ports: - containerPort: 80 root@master:~/labfile/service# root@master:~/labfile/service# root@master:~/labfile/service# kubectl apply -f hostname-server.yaml deployment.apps/hostname-server created root@master:~/labfile/service# . 두 worker 노드에 172.16.189.89, 172.16.235.162 로 파드가 생성되었다. Every 1.0s: kubectl get svc,deploy,pods -o wide master: Sun Jan 15 02:23:53 2023 NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/kubernetes ClusterIP 10.96.0.1 &lt;none&gt; 443/TCP 2d12h &lt;none&gt; NAME READY UP-TO-DATE AVAILABLE AGE CONTAINERS IMAGES SELECTOR deployment.apps/hostname-server 2/2 2 2 2m58s hostname-server takytaky/hostname app=hostname-server NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/hostname-server-7c85cc96dc-2j9lv 1/1 Running 0 2m58s 172.16.189.89 worker2 &lt;none&gt; &lt;none&gt; pod/hostname-server-7c85cc96dc-gbvd8 1/1 Running 0 2m58s 172.16.235.162 worker1 &lt;none&gt; &lt;none&gt; . 연결 확인 (curl -sf http://172.16.189.89 | grep Hello) . root@master:~/labfile/service# curl -sf http://172.16.189.89 | grep Hello &lt;p&gt;Hello, hostname-server-7c85cc96dc-2j9lv&lt;/p&gt; &lt;/blockquote&gt; root@master:~/labfile/service# root@master:~/labfile/service# curl -sf http://172.16.235.162 | grep Hello &lt;p&gt;Hello, hostname-server-7c85cc96dc-gbvd8&lt;/p&gt; &lt;/blockquote&gt; root@master:~/labfile/service# . 서비스 생성하기 (spec &gt; type : ClusterIP) . root@master:~/labfile/service# cat clusterip-hostname.yaml apiVersion: v1 kind: Service metadata: name: clusterip-hostname-service spec: type: ClusterIP selector: app: hostname-server ports: - protocol: TCP port: 80 targetPort: 80 root@master:~/labfile/service# root@master:~/labfile/service# root@master:~/labfile/service# kubectl apply -f clusterip-hostname.yaml service/clusterip-hostname-service created . 서비스 추가 확인하기 . Every 1.0s: kubectl get svc,deploy,pods -o wide master: Sun Jan 15 02:27:33 2023 NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/clusterip-hostname-service ClusterIP 10.105.74.121 &lt;none&gt; 80/TCP 74s app=hostname-server service/kubernetes ClusterIP 10.96.0.1 &lt;none&gt; 443/TCP 2d12h &lt;none&gt; NAME READY UP-TO-DATE AVAILABLE AGE CONTAINERS IMAGES SELECTOR deployment.apps/hostname-server 2/2 2 2 6m39s hostname-server takytaky/hostname app=hostname-server NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/hostname-server-7c85cc96dc-2j9lv 1/1 Running 0 6m39s 172.16.189.89 worker2 &lt;none&gt; &lt;none&gt; pod/hostname-server-7c85cc96dc-gbvd8 1/1 Running 0 6m39s 172.16.235.162 worker1 &lt;none&gt; &lt;none&gt; . ClusterIP 타입의 서비스 IP 확인한다. root@master:~/labfile/service# root@master:~/labfile/service# curl -sf http://10.105.74.121 | grep Hello &lt;p&gt;Hello, hostname-server-7c85cc96dc-gbvd8&lt;/p&gt; &lt;/blockquote&gt; root@master:~/labfile/service# root@master:~/labfile/service# curl -sf http://10.105.74.121 | grep Hello &lt;p&gt;Hello, hostname-server-7c85cc96dc-2j9lv&lt;/p&gt; &lt;/blockquote&gt; root@master:~/labfile/service# . 실습 정리 해당 서비스 및 deploy 삭제한다. root@master:~/labfile/service# kubectl delete svc clusterip-hostname-service service \"clusterip-hostname-service\" deleted root@master:~/labfile/service# root@master:~/labfile/service# curl http://10.105.74.121 | grep Hello^C root@master:~/labfile/service# kubectl delete deploy hostname-server deployment.apps \"hostname-server\" deleted . ",
    "url": "/docs/cloud/k8s-service/#clusterip",
    
    "relUrl": "/docs/cloud/k8s-service/#clusterip"
  },"314": {
    "doc": "Service",
    "title": "NodePort",
    "content": "ClusterIP + 노드 포트 번호까지 할당하므로 클러스터 안 뿐만아니라 외부에서도 접근할 수 있따. 파드 생성하기 (hostname-server) . 서비스 생성하기 (spec &gt; type : NodePort) . root@master:~/labfile/service# cat nodeport-hostname.yaml apiVersion: v1 kind: Service metadata: name: nodeport-hostname-service spec: type: NodePort selector: app: hostname-server ports: - protocol: TCP port: 80 targetPort: 80 nodePort: 30080 root@master:~/labfile/service# root@master:~/labfile/service# kubectl apply -f nodeport-hostname.yaml service/nodeport-hostname-service created root@master:~/labfile/service# root@master:~/labfile/service# cat nodeport-hostname.yaml^C root@master:~/labfile/service# kubectl apply -f hostname-server.yaml deployment.apps/hostname-server created root@master:~/labfile/service# kubectl apply -f nodeport-hostname.yaml service/nodeport-hostname-service unchanged root@master:~/labfile/service# root@master:~/labfile/service# curl -sf http://10.97.128.131 | egrep Hello &lt;p&gt;Hello, hostname-server-7c85cc96dc-95ltj&lt;/p&gt; &lt;/blockquote&gt; root@master:~/labfile/service# . pod, service 생성 확인 . Every 1.0s: kubectl get svc,deploy,pods -o wide master: Sun Jan 15 03:02:14 2023 NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/kubernetes ClusterIP 10.96.0.1 &lt;none&gt; 443/TCP 2d13h &lt;none&gt; service/nodeport-hostname-service NodePort 10.97.128.131 &lt;none&gt; 80:30080/TCP 8m41s app=hostname-server NAME READY UP-TO-DATE AVAILABLE AGE CONTAINERS IMAGES SELECTOR deployment.apps/hostname-server 2/2 2 2 7m55s hostname-server takytaky/hostname app=hostname-server NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/hostname-server-7c85cc96dc-95ltj 1/1 Running 0 7m55s 172.16.189.90 worker2 &lt;none&gt; &lt;none&gt; pod/hostname-server-7c85cc96dc-fv42w 1/1 Running 0 7m55s 172.16.235.164 worker1 &lt;none&gt; &lt;none&gt; . 네트워크 환경 세팅하기 . Oracle VM VirtualBox 관리자 파일 --&gt; 환경설정 --&gt; 네트워크 --&gt; NatNetwork --&gt; 톱니바퀴 (설정) --&gt; 포트포워딩 --&gt; [+] (다음 항목 추가) 이름 프로토콜 호스트IP 호스트 포트 게스트IP 게스트포트 nodeport TCP 192.168.56.1 30080 192.168.137.101 30080 loadbalancer TCP 192.168.56.1 80 192.168.137.200 80 . 외부에서 접속하기 . 아래 ip 로 접속확인한다. | [##_Image | kage@cNK1FM/btsjnG3cPea/GHzVGkANwjdVRfgOCld2YK/img.png | CDM | 1.3 | {“originWidth”:800,”originHeight”:258,”style”:”alignLeft”}_##] | . 테스트 이후 서비스 삭제한다. kubectl delete svc nodeport-hostname-service . ",
    "url": "/docs/cloud/k8s-service/#nodeport",
    
    "relUrl": "/docs/cloud/k8s-service/#nodeport"
  },"315": {
    "doc": "Service",
    "title": "NodeBalancer",
    "content": "가장 많은 기능을 가진 타입이다. (참고 : https://metallb.universe.tf/installation ) . To install MetalLB, apply the manifest: . # kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/namespace.yaml # kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/metallb.yaml # kubectl get pods -n metallb-system . 1) The metallb-system/controller deployment. This is the cluster-wide controller that handles IP address assignments. 2) The metallb-system/speaker daemonset. This is the component that speaks the protocol(s) of your choice to make the services reachable. Service accounts for the controller and speaker, along with the RBAC permissions that the components need to function. LoadBalancer 의 IP 정보 구성 . # cat metallb-ip-config.yaml apiVersion: v1 kind: ConfigMap metadata: namespace: metallb-system name: config data: config: | address-pools: - name: my-ip protocol: layer2 addresses: - 192.168.137.200-192.168.137.209 # kubectl apply -f metallb-ip-config.yaml # cat loadbalancer-hostname.yaml apiVersion: v1 kind: Service metadata: name: loadbalancer-hostname-service spec: type: LoadBalancer selector: app: hostname-server ports: - protocol: TCP port: 80 targetPort: 80 # kubectl apply -f loadbalancer-hostname.yaml # curl -sf http://192.168.137.200 | grep Hello . 실습 정리 . kubectl delete svc nodeport-hostname-service kubectl delete svc loadbalancer-hostname-service kubectl delete deploy hostname-server . ",
    "url": "/docs/cloud/k8s-service/#nodebalancer",
    
    "relUrl": "/docs/cloud/k8s-service/#nodebalancer"
  },"316": {
    "doc": "Kubernetes",
    "title": "Kubernetes",
    "content": " ",
    "url": "/docs/cloud/k8s/",
    
    "relUrl": "/docs/cloud/k8s/"
  },"317": {
    "doc": "Linux Basics",
    "title": "Linux Basics",
    "content": " ",
    "url": "/docs/os-systems/linux-basics/",
    
    "relUrl": "/docs/os-systems/linux-basics/"
  },"318": {
    "doc": "Linux Basics",
    "title": "Table of contents",
    "content": ". | PID = 1 번 프로세스는 무엇인가 | 파일 권한 알아보기 . | 파일 종류 및 유저/그룹 | 약자의 의미 | . | . 주요 개념을 정리해 본다. ",
    "url": "/docs/os-systems/linux-basics/#table-of-contents",
    
    "relUrl": "/docs/os-systems/linux-basics/#table-of-contents"
  },"319": {
    "doc": "Linux Basics",
    "title": "PID = 1 번 프로세스는 무엇인가",
    "content": "PID = 1 번 프로세스는 systemd 이다. root@docker1:~# top top - 15:55:44 up 57 min, 2 users, load average: 0.00, 0.08, 0.07 Tasks: 208 total, 1 running, 165 sleeping, 0 stopped, 0 zombie %Cpu(s): 0.0 us, 0.7 sy, 0.0 ni, 99.3 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st KiB Mem : 4039384 total, 1208128 free, 1027444 used, 1803812 buff/cache KiB Swap: 2017276 total, 2017276 free, 0 used. 2730296 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 1896 root 20 0 107788 7120 6116 S 0.3 0.2 0:00.59 sshd 4038 root 20 0 42952 3992 3300 R 0.3 0.1 0:00.04 top 1 root 20 0 160148 9288 6548 S 0.0 0.2 0:02.30 systemd . ",
    "url": "/docs/os-systems/linux-basics/#pid--1-%EB%B2%88-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80",
    
    "relUrl": "/docs/os-systems/linux-basics/#pid--1-번-프로세스는-무엇인가"
  },"320": {
    "doc": "Linux Basics",
    "title": "파일 권한 알아보기",
    "content": "파일 종류 및 유저/그룹 . 파일 권한은 4개로 등분하여 확인할 수 있다. | 1번은 파일의 종류 | 2번은 파일과 폴더의 유저 권한 | 3번은 파일과 폴더의 그룹 권한 | 4번은 파일에 대한 모든 유저의 권한 | . 약자의 의미 . | r : read | w : wrtie | x : excute | d : Directory | r : Regular file | s : Symbolic link | . ",
    "url": "/docs/os-systems/linux-basics/#%ED%8C%8C%EC%9D%BC-%EA%B6%8C%ED%95%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0",
    
    "relUrl": "/docs/os-systems/linux-basics/#파일-권한-알아보기"
  },"321": {
    "doc": "Linux Command",
    "title": "Linux Command",
    "content": " ",
    "url": "/docs/os-systems/linux-command/",
    
    "relUrl": "/docs/os-systems/linux-command/"
  },"322": {
    "doc": "Linux Command",
    "title": "Table of contents",
    "content": ". | Process 확인하기 | Curl 사용하기 | Shell 스크립트 실행하기 | 파일 압축 및 해제하기 | CPU 정보 확인하기 | Disk 용량 확인 하기 | RAM 사이즈 확인하기 | Listen Port 확인하기 | Alias 설정하기 | . ",
    "url": "/docs/os-systems/linux-command/#table-of-contents",
    
    "relUrl": "/docs/os-systems/linux-command/#table-of-contents"
  },"323": {
    "doc": "Linux Command",
    "title": "Process 확인하기",
    "content": "전체적인 프로세스와 관련된 옵션이다. | -e : 커널 프로세스를 제외한 모든 프로세스를 보여준다. | f : UID, PID, PPID, C, STIME, TTY, TIME, CMD 등의 필드목록으로, CMD필드의 전체 명령어 형태를 보여준다. | . root@master:~/labfile/service# ps -ef | grep docker root 1485 1 1 Jan14 ? 00:11:50 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock root 1939 6201 0 02:39 ? 00:00:00 runc --root /var/run/docker/runtime-runc/moby --log /run/containerd/io.containerd.runtime.v2.task/moby/f15696723766975a8c120d6cd8a6d77161135b013c13ed80c158331843cd1a6a/log.json --log-format json --systemd-cgroup exec --process /tmp/runc-process236202202 --detach --pid-file /run/containerd/io.containerd.runtime.v2.task/moby/f15696723766975a8c120d6cd8a6d77161135b013c13ed80c158331843cd1a6a/0a2cb1a2031224ed66bb0bb8b9a23bc295c7b0c7d29a37ed774f14d8072f8f6d.pid f15696723766975a8c120d6cd8a6d77161135b013c13ed80c158331843cd1a6a root 1957 15646 0 02:39 pts/0 00:00:00 grep --color=auto docker root@master:~/labfile/service# . ",
    "url": "/docs/os-systems/linux-command/#process-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/os-systems/linux-command/#process-확인하기"
  },"324": {
    "doc": "Linux Command",
    "title": "Curl 사용하기",
    "content": "curl(client url) 명령어는 프로토콜들을 이용해 URL 로 데이터를 전송하여 서버에 데이터를 보내거나 가져올때 사용하기 위한 명령줄 도구 및 라이브러리이다. 쉽게말해 예를들어 자바스크립트 환경에서 REST API(http)를 테스트하고싶다면 보통 ajax, fetch 를 이용해 요청을 보내는 것과 같이, SHELL(커맨드라인 환경)에서 REST API(http) 테스트 하고 싶으면 curl 명령어를 이용하면 된다 라고 이해하면 된다. -s : –silent 진행 내용이나 메시지들을 출력하지 않음 -f : –fail HTTP 오류 시 자동으로 실패 (출력 없음) . root@master:~/labfile/service# curl http://10.105.74.121 | grep Hello % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 318 100 318 0 0 63600 0 --:--:-- --:--:-- --:--:-- 63600 &lt;p&gt;Hello, hostname-server-7c85cc96dc-2j9lv&lt;/p&gt; &lt;/blockquote&gt; root@master:~/labfile/service# root@master:~/labfile/service# root@master:~/labfile/service# curl -sf http://10.105.74.121 | grep Hello &lt;p&gt;Hello, hostname-server-7c85cc96dc-2j9lv&lt;/p&gt; &lt;/blockquote&gt; root@master:~/labfile/service# . ",
    "url": "/docs/os-systems/linux-command/#curl-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/os-systems/linux-command/#curl-사용하기"
  },"325": {
    "doc": "Linux Command",
    "title": "Shell 스크립트 실행하기",
    "content": ".sh 확장자가 나오길래, 뭐지 싶었는데 찾아보니 shell script 확장자였다. 실행하는 방법은 파일 권한을 변경 후 실행하면 된다…고 한다. 우선 파일 권한은 chmod 명령어를 사용하여 변경해준다. 744 등을 주어도 되지만, 간단하게 $chmod +x filename.sh &lt;– 쓰기 권한 추가하기 로 실행이 된다. sh filename.sh 또는 ./filename.sh 으로 실행한다. root@master:~# ./get_helm.sh Downloading https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz Verifying checksum... Done. Preparing to install helm into /usr/local/bin helm installed into /usr/local/bin/helm root@master:~# . ",
    "url": "/docs/os-systems/linux-command/#shell-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/os-systems/linux-command/#shell-스크립트-실행하기"
  },"326": {
    "doc": "Linux Command",
    "title": "파일 압축 및 해제하기",
    "content": "tar -zcvf target.tar.gz file1 file2 dir1 dir2 : 파일 압축 tar -zxvf target.tar.gz : 압축 해제 . -c : –create 신규 아카이브 생성 -x : –extract 아카이브 풀기 -v : –verbose 처리 과정을 상세히 표시 -f : –file=ARCHIVE 파일을 대상으로 아카이빙 . root@master:~# tar -zcvf testtar2.tar.gz a.out b.out a.out b.out root@master:~# root@master:~# root@master:~# mv testtar1.tar.gz ./test/testtar1.tar.gz^C root@master:~# mkdir testtar root@master:~# mv testtar1.tar.gz ./testtar/testtar1.tar.gz root@master:~# root@master:~# cd testtar/ root@master:~/testtar# ls testtar1.tar.gz root@master:~/testtar# tar zxvf testtar1.tar.gz a.out b.out root@master:~/testtar# ls a.out b.out testtar1.tar.gz . root@docker1:~/labfile/dockerfile_dir# ls add_data.tgz Dockerfile Dockerfile.11 Dockerfile.3 Dockerfile.5 host.html copy_data.tgz Dockerfile.1 Dockerfile.2 Dockerfile.4 Dockerfile.6 index.html root@docker1:~/labfile/dockerfile_dir# // 파일 압축 root@docker1:~/labfile/dockerfile_dir# tar -cvf target.tar Dockerfile.1 Dockerfile.2 Dockerfile.1 Dockerfile.2 root@docker1:~/labfile/dockerfile_dir# ls add_data.tgz Dockerfile.1 Dockerfile.3 Dockerfile.6 target.tar copy_data.tgz Dockerfile.11 Dockerfile.4 host.html Dockerfile Dockerfile.2 Dockerfile.5 index.html root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# // 압축 해제 root@docker1:~/labfile/dockerfile_dir# tar -xvf target.tar Dockerfile.1 Dockerfile.2 root@docker1:~/labfile/dockerfile_dir# root@docker1:~/labfile/dockerfile_dir# ls add_data.tgz Dockerfile.1 Dockerfile.3 Dockerfile.6 target.tar copy_data.tgz Dockerfile.11 Dockerfile.4 host.html Dockerfile Dockerfile.2 Dockerfile.5 index.html root@docker1:~/labfile/dockerfile_dir# . ",
    "url": "/docs/os-systems/linux-command/#%ED%8C%8C%EC%9D%BC-%EC%95%95%EC%B6%95-%EB%B0%8F-%ED%95%B4%EC%A0%9C%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/os-systems/linux-command/#파일-압축-및-해제하기"
  },"327": {
    "doc": "Linux Command",
    "title": "CPU 정보 확인하기",
    "content": "root@docker1:~# lscpu Architecture: x86_64 CPU op-mode(s): 32-bit, 64-bit Byte Order: Little Endian CPU(s): 1 On-line CPU(s) list: 0 Thread(s) per core: 1 Core(s) per socket: 1 Socket(s): 1 NUMA node(s): 1 Vendor ID: GenuineIntel CPU family: 6 Model: 140 Model name: 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz Stepping: 1 CPU MHz: 2803.200 BogoMIPS: 5606.40 Hypervisor vendor: KVM Virtualization type: full L1d cache: 48K L1i cache: 32K L2 cache: 1280K L3 cache: 12288K NUMA node0 CPU(s): 0 Flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq monitor ssse3 cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single fsgsbase avx2 invpcid rdseed clflushopt md_clear flush_l1d arch_capabilities root@docker1:~# . ",
    "url": "/docs/os-systems/linux-command/#cpu-%EC%A0%95%EB%B3%B4-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/os-systems/linux-command/#cpu-정보-확인하기"
  },"328": {
    "doc": "Linux Command",
    "title": "Disk 용량 확인 하기",
    "content": "df : 디스크 남은 용량 확인 (기본 명령어) df -k : 킬로바이트 단위로 남은 용량 확인 df -m : 메가 바이트 단위로 남은 용량 확인 df -h : 깔끔하게 보여줌 df . : 현재 디렉토리가 포함된 파티션의 남은 용량 확인 du : 현재 디렉토리에서 서브 디렉토리까지 용량 확인 du -a : 현재 디렉토리의 사용량 파일단위로 출력 du -s : 총 사용량 du -h : 깔끔하게 보여줌 du -sh * : 한단계 서브 디렉토리 기준으로 보여줌 . ",
    "url": "/docs/os-systems/linux-command/#disk-%EC%9A%A9%EB%9F%89-%ED%99%95%EC%9D%B8-%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/os-systems/linux-command/#disk-용량-확인-하기"
  },"329": {
    "doc": "Linux Command",
    "title": "RAM 사이즈 확인하기",
    "content": "root@docker1:~# free total used free shared buff/cache available Mem: 4039328 1140088 1636088 34088 1263152 2608324 Swap: 2017276 0 2017276 root@docker1:~# . ",
    "url": "/docs/os-systems/linux-command/#ram-%EC%82%AC%EC%9D%B4%EC%A6%88-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/os-systems/linux-command/#ram-사이즈-확인하기"
  },"330": {
    "doc": "Linux Command",
    "title": "Listen Port 확인하기",
    "content": "Netstat 은 아래와 같이 open 되어있는 모든 port를 확인하는데 사용할 수 있다. | -l 옵션 : netstat에 모든 수신 소켓을 표시한다. | -t 옵션 : 모든 TCP 연결을 표시한다. | -u 옵션 : 모든 UDP 연결을 표시한다. | -p 옵션 : 포트에서 수신하는 어플리케이션/데몬의 이름을 표시한다. | -n 옵션 : 서비스 이름 대신 port 번호를 표시한다. | . user@user:~$ sudo netstat -ltup Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 localhost:ipp 0.0.0.0:* LISTEN 899/cupsd tcp 0 0 localhost:37485 0.0.0.0:* LISTEN 1034/containerd tcp 0 0 localhost:postgresql 0.0.0.0:* LISTEN 1129/postgres tcp 0 0 localhost:domain 0.0.0.0:* LISTEN 796/systemd-resolve tcp 0 0 localhost:4000 0.0.0.0:* LISTEN 35497/ruby2.7 tcp6 0 0 ip6-localhost:ipp [::]:* LISTEN 899/cupsd tcp6 0 0 [::]:9090 [::]:* LISTEN 982/java udp 0 0 0.0.0.0:58210 0.0.0.0:* 894/avahi-daemon: r udp 0 0 mdns.mcast.net:mdns 0.0.0.0:* 2999/chrome udp 0 0 0.0.0.0:mdns 0.0.0.0:* 894/avahi-daemon: r udp 0 0 testuser-500R5K-501:34197 0.0.0.0:* 2999/chrome udp 0 0 localhost:domain 0.0.0.0:* 796/systemd-resolve udp 0 0 0.0.0.0:631 0.0.0.0:* 975/cups-browsed udp6 0 0 [::]:mdns [::]:* 894/avahi-daemon: r udp6 0 0 [::]:44146 [::]:* 894/avahi-daemon: r . ",
    "url": "/docs/os-systems/linux-command/#listen-port-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/os-systems/linux-command/#listen-port-확인하기"
  },"331": {
    "doc": "Linux Command",
    "title": "Alias 설정하기",
    "content": "# nano /root/.bashrc 파일에서 맨 아래 줄에 다음 내용 추가한다. alias conrm='docker container rm -f $(docker container ps -aq)' . 이후 ctrl+o (저장) &gt; enter &gt; ctrl+x (종료) 를 통해 저장한다. ",
    "url": "/docs/os-systems/linux-command/#alias-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/os-systems/linux-command/#alias-설정하기"
  },"332": {
    "doc": "리눅스 그룹 관리",
    "title": "리눅스 그룹 관리",
    "content": " ",
    "url": "/docs/os-systems/linux-group/",
    
    "relUrl": "/docs/os-systems/linux-group/"
  },"333": {
    "doc": "리눅스 그룹 관리",
    "title": "Table of contents",
    "content": ". | 그룹 추가 . | groupadd | groupadd -g | 이후의 groupadd | /etc/group | groupadd -r | . | 그룹 삭제 . | groupdel | . | 그룹 확인 . | groups | . | 그룹에 사용자 추가 . | gpasswd -a | gpasswd -d | . | . 리눅스 시스템은 사용자를 생성하면 사용자명과 동일한 그룹이 생성된다. 또한 특정 그룹을 만들어 기존 사용자를 그룹에 추가할 수 있다. ",
    "url": "/docs/os-systems/linux-group/#table-of-contents",
    
    "relUrl": "/docs/os-systems/linux-group/#table-of-contents"
  },"334": {
    "doc": "리눅스 그룹 관리",
    "title": "그룹 추가",
    "content": "groupadd . root@user1-500R5K-501R5K-500R5Q:~# groupadd testgroup1 root@user1-500R5K-501R5K-500R5Q:~# root@user1-500R5K-501R5K-500R5Q:~# grep testgroup1 /etc/group testgroup1:x:1002: . groupadd -g . -g 옵션을 사용하면 특정 GID 를 부여할 수 있다. root@user1-500R5K-501R5K-500R5Q:~# root@user1-500R5K-501R5K-500R5Q:~# groupadd -g 1004 testgroup1004 root@user1-500R5K-501R5K-500R5Q:~# root@user1-500R5K-501R5K-500R5Q:~# grep testgroup1004 /etc/group testgroup1004:x:1004: . 이후의 groupadd . 이후부터 생성되는 GID 는 가장 마지막 GID 다음 번호로 할당된다. root@user1-500R5K-501R5K-500R5Q:~# root@user1-500R5K-501R5K-500R5Q:~# groupadd testgroup2 root@user1-500R5K-501R5K-500R5Q:~# root@user1-500R5K-501R5K-500R5Q:~# grep testgroup2 /etc/group testgroup2:x:1005: . /etc/group . 각 그룹의 GID를 확인할 수 있다. root@user1-500R5K-501R5K-500R5Q:~# root@user1-500R5K-501R5K-500R5Q:~# tail -f /etc/group snapd-range-524288-root:x:524288: snap_daemon:x:584788: _cvsadmin:x:136: jenkins:x:137: docker:x:138:user1 postgres:x:139: tg100:x:1001: testgroup1:x:1002: testgroup1004:x:1004: testgroup2:x:1005: . groupadd -r . -r 옵션을 사용하면 0 번 부터 499 까지의 할당되어 있지 않은 GID 중 가장 높은 번호를 할당해 준다. root@user1-500R5K-501R5K-500R5Q:~# root@user1-500R5K-501R5K-500R5Q:~# groupadd -r testgroup3 root@user1-500R5K-501R5K-500R5Q:~# root@user1-500R5K-501R5K-500R5Q:~# grep testgroup3 /etc/group testgroup3:x:998: . ",
    "url": "/docs/os-systems/linux-group/#%EA%B7%B8%EB%A3%B9-%EC%B6%94%EA%B0%80",
    
    "relUrl": "/docs/os-systems/linux-group/#그룹-추가"
  },"335": {
    "doc": "리눅스 그룹 관리",
    "title": "그룹 삭제",
    "content": "groupdel . root@user1-500R5K-501R5K-500R5Q:~# groupdel testgroup3 root@user1-500R5K-501R5K-500R5Q:~# root@user1-500R5K-501R5K-500R5Q:~# grep testgroup3 /etc/group root@user1-500R5K-501R5K-500R5Q:~# . ",
    "url": "/docs/os-systems/linux-group/#%EA%B7%B8%EB%A3%B9-%EC%82%AD%EC%A0%9C",
    
    "relUrl": "/docs/os-systems/linux-group/#그룹-삭제"
  },"336": {
    "doc": "리눅스 그룹 관리",
    "title": "그룹 확인",
    "content": "groups . 현재 사용자가 속한 그룹을 확인한다. user1@user1-500R5K-501R5K-500R5Q:~$ groups user1 adm cdrom sudo dip plugdev lpadmin lxd sambashare docker . ",
    "url": "/docs/os-systems/linux-group/#%EA%B7%B8%EB%A3%B9-%ED%99%95%EC%9D%B8",
    
    "relUrl": "/docs/os-systems/linux-group/#그룹-확인"
  },"337": {
    "doc": "리눅스 그룹 관리",
    "title": "그룹에 사용자 추가",
    "content": "특정 그룹에 사용자를 추가하거나 제거하고 특정 그룹에 패스워드를 설정하는 작업은 gpasswd를 이용한다. -a user : 특정 그룹에 새로운 그룹멤버를 추가함. -d user : 특정 그룹에서 지정한 그룹멤버를 제거함. -r : 특정 그룹의 패스워드를 제거함 . -R : 특정 그룹에 접근을 제한함 . -A user, … : 특정 그룹의 그룹관리자를 설정함 . -M user, … : 특정 그룹의 그룹멤버를 새로 설정함. gpasswd -a . user1 사용자를 testgroup2 에 추가 . root@user1-500R5K-501R5K-500R5Q:~# gpasswd -a user1 testgroup2 Adding user user1 to group testgroup2 root@user1-500R5K-501R5K-500R5Q:~# root@user1-500R5K-501R5K-500R5Q:~# groups user1 user1 : user1 adm cdrom sudo dip plugdev lpadmin lxd sambashare docker testgroup2 . gpasswd -d . user1 사용자를 testgroup2 에서 삭제 . root@user1-500R5K-501R5K-500R5Q:~# root@user1-500R5K-501R5K-500R5Q:~# gpasswd -d user1 testgroup2 Removing user user1 from group testgroup2 root@user1-500R5K-501R5K-500R5Q:~# root@user1-500R5K-501R5K-500R5Q:~# groups user1 user1 : user1 adm cdrom sudo dip plugdev lpadmin lxd sambashare docker . ",
    "url": "/docs/os-systems/linux-group/#%EA%B7%B8%EB%A3%B9%EC%97%90-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%B6%94%EA%B0%80",
    
    "relUrl": "/docs/os-systems/linux-group/#그룹에-사용자-추가"
  },"338": {
    "doc": "Linux",
    "title": "Linuxs",
    "content": " ",
    "url": "/docs/os-systems/linux/#linuxs",
    
    "relUrl": "/docs/os-systems/linux/#linuxs"
  },"339": {
    "doc": "Linux",
    "title": "Linux",
    "content": " ",
    "url": "/docs/os-systems/linux/",
    
    "relUrl": "/docs/os-systems/linux/"
  },"340": {
    "doc": "Markdown",
    "title": "Markdown",
    "content": " ",
    "url": "/docs/programming-language/markdown/",
    
    "relUrl": "/docs/programming-language/markdown/"
  },"341": {
    "doc": "Markdown",
    "title": "Table of contents",
    "content": ". | 코드블럭 | 글씨 포맷 | . 일정한 형식을 갖춘 문서를 작성하거나 체계적인 메모 시 손쉽게 작성할 수 있는 마크다운 문법에 대해 정리하고자 합니다. ",
    "url": "/docs/programming-language/markdown/#table-of-contents",
    
    "relUrl": "/docs/programming-language/markdown/#table-of-contents"
  },"342": {
    "doc": "Markdown",
    "title": "코드블럭",
    "content": "``` 로 시작과 종료 부분에 삽입하며, 동일한 구분으로 종료되는 블럭 내의 코드들을 블록으로 표현하여 코드별 색깔 지정은 옆에 아래와 같은 키워드를 추가하여 지정할 수 있다. | 언어 | Markdown | 언어 | Markdown | . | Bash | bash | JSON | json | . | C# | cs | Java | java | . | C++ | cpp | JavaScript | javascript | . | CSS | css | PHP | php | . | Diff | diff | Perl | perl | . | HTML, XML | html | Python | python | . | HTTP | http | Ruby | ruby | . | Ini | ini | SQL | sql | . ",
    "url": "/docs/programming-language/markdown/#%EC%BD%94%EB%93%9C%EB%B8%94%EB%9F%AD",
    
    "relUrl": "/docs/programming-language/markdown/#코드블럭"
  },"343": {
    "doc": "Markdown",
    "title": "글씨 포맷",
    "content": ". | **굵게**라 적으면 굵게 처럼 글자를 굵게 표시할 수 있습니다. | ***굵게 기울기***라 적으면 굵게 기울기 처럼 글자를 굵으면서도 기울게 표시할 수 있습니다. | &lt;U&gt;밑줄&lt;/U&gt; 라 적으면 밑줄 처럼 밑줄을 그을 수 있습니다. | . ",
    "url": "/docs/programming-language/markdown/#%EA%B8%80%EC%94%A8-%ED%8F%AC%EB%A7%B7",
    
    "relUrl": "/docs/programming-language/markdown/#글씨-포맷"
  },"344": {
    "doc": "Nginx 설정",
    "title": "Nginx 설정",
    "content": " ",
    "url": "/docs/network-security/network-security-nginx/",
    
    "relUrl": "/docs/network-security/network-security-nginx/"
  },"345": {
    "doc": "Nginx 설정",
    "title": "Table of contents",
    "content": ". | 사전 준비 | nginx 설치하기 | 설정 변경하기 | 서비스 재시작 | 리버시 프록시 확인 | . Nginx 기본 설정에 대해 알아보자. ",
    "url": "/docs/network-security/network-security-nginx/#table-of-contents",
    
    "relUrl": "/docs/network-security/network-security-nginx/#table-of-contents"
  },"346": {
    "doc": "Nginx 설정",
    "title": "사전 준비",
    "content": "테스트용 서버로 간단한 springboot 로 구성된 jar 파일을 실행 시킨 후 접속을 확인한다. 포트는 8888 로 설정하였다. [localhost:8888 접속] . ",
    "url": "/docs/network-security/network-security-nginx/#%EC%82%AC%EC%A0%84-%EC%A4%80%EB%B9%84",
    
    "relUrl": "/docs/network-security/network-security-nginx/#사전-준비"
  },"347": {
    "doc": "Nginx 설정",
    "title": "nginx 설치하기",
    "content": "아래 명령어를 이용하여 nginx 를 설치한다. sudo apt-get install nginx . ",
    "url": "/docs/network-security/network-security-nginx/#nginx-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/network-security/network-security-nginx/#nginx-설치하기"
  },"348": {
    "doc": "Nginx 설정",
    "title": "설정 변경하기",
    "content": "/etc/nginx/sites-available 폴더의 defalut 파일 내의 내용을 모두 삭제한 후 아래와 같이 변경한다. servername:listen 주소로 접근 시 proxy_pass 에 위치한 서버의 / 위치로 프록시를 한다. root@user1-500R5K-501R5K-500R5Q:/etc/nginx/sites-available# cat default #아래는 로드 밸런싱 시 추가 #upstream backend { # server localhost:8080; # server localhost:8081; # server localhost:8082; #} server { listen 8887; server_name localhost; location / { proxy_pass http://localhost:8888; } } . ",
    "url": "/docs/network-security/network-security-nginx/#%EC%84%A4%EC%A0%95-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0",
    
    "relUrl": "/docs/network-security/network-security-nginx/#설정-변경하기"
  },"349": {
    "doc": "Nginx 설정",
    "title": "서비스 재시작",
    "content": "sudo service nginx restart . ",
    "url": "/docs/network-security/network-security-nginx/#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%9E%AC%EC%8B%9C%EC%9E%91",
    
    "relUrl": "/docs/network-security/network-security-nginx/#서비스-재시작"
  },"350": {
    "doc": "Nginx 설정",
    "title": "리버시 프록시 확인",
    "content": "서비스 재시작 후 8887 포트로 접근하면 아래와 같이 proxy 서버로 연결됨을 확인할 수 있다. [localhost:8887 접속] . ",
    "url": "/docs/network-security/network-security-nginx/#%EB%A6%AC%EB%B2%84%EC%8B%9C-%ED%94%84%EB%A1%9D%EC%8B%9C-%ED%99%95%EC%9D%B8",
    
    "relUrl": "/docs/network-security/network-security-nginx/#리버시-프록시-확인"
  },"351": {
    "doc": "Proxy 알아보기",
    "title": "Proxy 알아보기",
    "content": " ",
    "url": "/docs/network-security/network-security-proxy/",
    
    "relUrl": "/docs/network-security/network-security-proxy/"
  },"352": {
    "doc": "Proxy 알아보기",
    "title": "Table of contents",
    "content": ". | 프록시(Proxy) 란? | 포워드 프록시(Forward Proxy) . | 포워드 프록시의 특징/역할 | . | 리버스 프록시(Reverse Proxy) . | 리버스 프록시의 예시 | 리버스 프록시의 특징/역할 | 리버스 프록시의 장점 | . | . 개발을 하지 않더라도 프록시라는 단어는 종종 듣게 되는데 정확히 프록시가 무엇이고, 어떤 역할을 하는지 정리하고자 한다. ",
    "url": "/docs/network-security/network-security-proxy/#table-of-contents",
    
    "relUrl": "/docs/network-security/network-security-proxy/#table-of-contents"
  },"353": {
    "doc": "Proxy 알아보기",
    "title": "프록시(Proxy) 란?",
    "content": "프록시의 사전적 의미는 대신, 대리이다. 말 그대로 두 PC가 통신을 할 때 직접 하지 않고 중간에서 대리로 통신을 하는 것을 프록시 라고 하고, 중계 역할을 하는 것을 프록시 서버 라고 부른다. 즉, 클라이언트와 서버 사이의 중계 서버 라고 생각하면 된다. 프록시 서버는 보안 목적이나 캐싱 등의 기능을 제공한다. 프록시 서버가 중간에 위치함으로써 클라이언트는 프록시 서버를 서버라고 인식하고, 서버 입장에서는 프록시 서버를 클라이언트로 인식하게 된다. [프록시 서버의 구조] . ",
    "url": "/docs/network-security/network-security-proxy/#%ED%94%84%EB%A1%9D%EC%8B%9Cproxy-%EB%9E%80",
    
    "relUrl": "/docs/network-security/network-security-proxy/#프록시proxy-란"
  },"354": {
    "doc": "Proxy 알아보기",
    "title": "포워드 프록시(Forward Proxy)",
    "content": "일반적으로 프록시라고 말하면 포워드 프록시를 말한다. 클라이언트에서 서버로 리소스를 요청할 때 직접 요청하지 않고 프록시 서버를 거쳐서 요청한다. 이 경우 서버에서 받는 IP는 클라이언트의 IP가 아닌 프록시 서브의 IP이기 때문에 서버는 클라이언트가 누군지 알 수 없다. 즉, 서버에게 클라이언트가 누구인지 감춰주는 역할을 한다. 이러한 특징 때문에 기업 사내망에서 주로 사용된다. 포워드 프록시의 특징/역할 . | 캐싱 첫 번째 요청 이후부터는 동일한 요청이 들어올 경우, 프록시 서버에 캐싱된 내용을 전달해줌으로써 성능을 향상시킬 수 있다. | . 웹 서비스에서 요청이 발생할 때마다 1) 요청 → 2) 요청 전송 → 3) 요청 접수 → 4) 응답 생성 → 5) 응답 전송 → 6) 응답 수신 과 같은 과정을 반복해서 거친다. 요청이 한 번 뿐일 때는 괜찮지만, 중복되는 요청을 매번 처리하기에는 심한 자원낭비가 생기고, 웹 서버의 부하가 증가할 것이다. 이를 위해 포워드 프록시는 정적 데이터를 저장해두고 동일한 요청의 경우 웹서버 까지 가지 않고 포워드 프록시에서 처리할 수 있는 캐싱 역할을 수행한다. | IP 우회 | . 위에 언급했듯이 클라이언트 측에서 프록시 서버를 거쳐 웹 서비스를 이용할 경우, 서버 측에서는 요청을 받을 때 클라이언트의 IP가 아닌 프록시 서버의 IP를 전달받게 된다. 즉, 서버 측에 클라이언트의 정보를 숨길 수 있게 되는 것이다. | 제한 보안이 중요한 사내망에서 정해진 사이트에만 연결 할 수 있도록 설정하는 등 웹 사용 환경을 제한할 수 있다. | . [Forward Proxy] . ",
    "url": "/docs/network-security/network-security-proxy/#%ED%8F%AC%EC%9B%8C%EB%93%9C-%ED%94%84%EB%A1%9D%EC%8B%9Cforward-proxy",
    
    "relUrl": "/docs/network-security/network-security-proxy/#포워드-프록시forward-proxy"
  },"355": {
    "doc": "Proxy 알아보기",
    "title": "리버스 프록시(Reverse Proxy)",
    "content": "리버스 프록시는 포워드 프록시와 반대 개념이다. 애플리케이션 서버의 앞에 위치하여 클라이언트가 서버를 요청할 때 리버스 프록시를 호출하고, 리버스 프록시가 서버로부터 응답을 전달받아 다시 클라이언트에게 전송하는 역할을 한다. 이 경우, 클라이언트는 애플리케이션 서버를 직접 호출하는 것이 아니라 프록시 서버를 통해 호출하기 때문에 리버스 프록시는 애플리케이션 서버를 감추는 역할을 하게 된다. 리버스 프록시의 예시 . NginX, Apache Web Server . 리버스 프록시의 특징/역할 . | 로드밸런싱 리버스 프록시 뒤에 여러 개의 WAS를 둠으로써, 사용자 요청을 분산할 수 있다. End-point 마다 호출 서버를 설정할 수 있어 역할에 따라 서버의 트래픽을 분산할 수도 있다. | 보안 보안 상의 이유로 서버에 직접 접근하는 것을 막기 위해 DMZ같은 네트워크에 리버스 프록시를 구성하여 접근하도록 한다. | . [Reverse Proxy] . 리버스 프록시의 장점 . 보통 기업의 네트워크 환경은 비무장 지대(DMZ; Demilitarized Zone) 라고 하는 내부 네트워크와 외부 네트워크 사이에 위치하는 구간이 존재합니다. [리버스 프록시 구성의 예] . | DMZ 내에 외부에 서비스를 제공하는 서버(메일 서버, 웹 서버, DNS 서버)를 배치하고 네트워크는 1, 2차 방화벽으로 보호 | 서비스를 제공하려면 WAS 를 DMZ 에 놓고 서비스해도 되지만 이런 서비스는 보통 내부의 DBMS 서버와 연결 | 만약 WAS 가 최전방에 있으면 WAS 가 털릴 경우 DBMS 와 관련 서버까지 모두 같이 털리는 심각한 보안 문제가 발생 | 이때문에 DMZ 존에 웹 서버를 두고 리버스 프락시로 설정하고 WAS 는 내부망에 위치시키게 설정 | 리버스 프락시로 동작하는 웹 서버만 내부 WAS 와 연결하도록 설정하므로 웹 서버가 해킹당해도 2차 방화벽을 다시 뚫어야 하므로 더 보안에 강함 | . ",
    "url": "/docs/network-security/network-security-proxy/#%EB%A6%AC%EB%B2%84%EC%8A%A4-%ED%94%84%EB%A1%9D%EC%8B%9Creverse-proxy",
    
    "relUrl": "/docs/network-security/network-security-proxy/#리버스-프록시reverse-proxy"
  },"356": {
    "doc": "Web Server & WAS 개념 익히기",
    "title": "Web Server &amp; WAS 개념 익히기",
    "content": " ",
    "url": "/docs/network-security/network-security-webserver-was/#web-server--was-%EA%B0%9C%EB%85%90-%EC%9D%B5%ED%9E%88%EA%B8%B0",
    
    "relUrl": "/docs/network-security/network-security-webserver-was/#web-server--was-개념-익히기"
  },"357": {
    "doc": "Web Server & WAS 개념 익히기",
    "title": "Table of contents",
    "content": ". | Static Pages | Dynamic Pages | Web Server와 WAS의 차이 . | Web Server | Web Application Server, WAS | . | Web Server 와 WAS 를 분리하는 이유 | . ",
    "url": "/docs/network-security/network-security-webserver-was/#table-of-contents",
    
    "relUrl": "/docs/network-security/network-security-webserver-was/#table-of-contents"
  },"358": {
    "doc": "Web Server & WAS 개념 익히기",
    "title": "Static Pages",
    "content": ". | Web Server는 파일 경로 이름을 받아 경로와 일치하는 file contents를 반환합니다. | 항상 동일한 페이지를 반환합니다. | html, css, js, image 파일과 같이 컴퓨터에 저장되어 있는 파일들입니다. | . [정적 페이지 ] . ",
    "url": "/docs/network-security/network-security-webserver-was/#static-pages",
    
    "relUrl": "/docs/network-security/network-security-webserver-was/#static-pages"
  },"359": {
    "doc": "Web Server & WAS 개념 익히기",
    "title": "Dynamic Pages",
    "content": ". | 인자의 내용에 맞게 동적인 Contents를 반환합니다. | 즉, 웹 서버에 의해서 실행되는 프로그램을 통해서 만들어진 결과물입니다. | 아래 이미지에서 개발자는 Servlet에 doGet()을 구현합니다. | . [동적 페이지 ] . ",
    "url": "/docs/network-security/network-security-webserver-was/#dynamic-pages",
    
    "relUrl": "/docs/network-security/network-security-webserver-was/#dynamic-pages"
  },"360": {
    "doc": "Web Server & WAS 개념 익히기",
    "title": "Web Server와 WAS의 차이",
    "content": "Web Server . 웹 서버는 클라이언트로부터 HTTP 요청을 받아 HTML 문서나 각종 리소스(Resource)를 전달하는 컴퓨터입니다. 따라서 요청에 따라 아래의 두 가지 기능 중 적절하게 선택하여 수행합니다. | 정적인 컨텐츠를 제공한다. | 동적인 컨텐츠 제공을 위한 요청을 전달한다. | . Web Server에는 Apache Server와 NginX가 있는데 각각의 특성은 아래와 같습니다. | Apache Server: BSD, Linux 등 Unix계열뿐 아니라 Windows와 같은 기종에서도 운용 가능. | NginX: 가벼움과 높은 성능을 목표로 함, 웹 서버, 리퍼스 프록시 및 메일 프록시 기능을 가짐. | . Apache Tomcat이라고 하는 이유 . 웹서버는 Apache, WAS는 Tomcat 2008년에 릴리즈된 Tomcat 5.5 부터 정적 컨텐츠 처리기능 추가 -&gt; 순수 Apache를 사용하는것에 비해 성능 차이 없음 -&gt; Tomcat이 Apache의 기능을 포함하므로 Apache Tomcat이라고함 . Web Application Server, WAS . WAS는 웹 애플리케이션과 서버 환경을 만들어 동작시키는 기능을 제공하는 소프트웨어 미들웨어 프레임워크 입니다. [Web Application Server, WAS] . 위 이미지와 같이 WAS는 Web Server와 Web Container(JSP, Servlet)으로 이루어져 있습니다. Web Server와의 차이점은 Web Container를 가진다는 점이며 WAS는 HTML 같은 정적인 페이지에서 처리할 수 없는 비즈니스 로직이나 DB 조회 같은 동적인 콘텐츠를 제공합니다. ",
    "url": "/docs/network-security/network-security-webserver-was/#web-server%EC%99%80-was%EC%9D%98-%EC%B0%A8%EC%9D%B4",
    
    "relUrl": "/docs/network-security/network-security-webserver-was/#web-server와-was의-차이"
  },"361": {
    "doc": "Web Server & WAS 개념 익히기",
    "title": "Web Server 와 WAS 를 분리하는 이유",
    "content": "그런데 대규모 프로젝트를 보면 아래와 같이 WAS와 Web Server를 분리한 형태를 볼 수 있습니다. 분리를 하면 생기는 장점이 무엇일까요? . [Web Server와 WAS 분리] . 1. 기능을 분리하여 서버 부하 방지 가능 . WAS는 DB 조회 등 페이지를 만들기 위한 다양한 로직을 처리하는데, 단순한 정적 콘텐츠를 WAS에서 제공한다면 다른 작업에 사용하는 리소스들로 인해 지연이 생겨날 수 있다. tomcat 5.5 이상부터는 성능이 크게 떨어지지 않는다고 한다. 2. 물리적으로 분리하여 보안 강화 . SSL에 대한 암복호화 처리에 Web Server를 사용한다. 공격에 대해 Web Server를 앞단에 두어 중요한 정보가 담긴 DB나 로직까지(WAS까지) 전파되지 못하게 한다. 3. 여러 대의 WAS를 연결이 가능하다. Load Balancing(부하의 균등화) 가능 -&gt; 한 서버가 다운되더라도 서비스를 이어갈 수 있다는 장점이 있다. fail over(장애 극복), fail back 가능 대용량 웹 애플리케이션의 경우(여러 개의 서버 사용) Wev Server와 WAS를 분리하여 무중단 운영을 위한 장애 극복에 쉽게 대응할 수 있다. [여러대의 WAS 운용] . 4. 다른 종류의 WAS로 서비스 가능 . ",
    "url": "/docs/network-security/network-security-webserver-was/#web-server-%EC%99%80-was-%EB%A5%BC-%EB%B6%84%EB%A6%AC%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0",
    
    "relUrl": "/docs/network-security/network-security-webserver-was/#web-server-와-was-를-분리하는-이유"
  },"362": {
    "doc": "Web Server & WAS 개념 익히기",
    "title": "Web Server & WAS 개념 익히기",
    "content": " ",
    "url": "/docs/network-security/network-security-webserver-was/",
    
    "relUrl": "/docs/network-security/network-security-webserver-was/"
  },"363": {
    "doc": "Network & Security",
    "title": "Network &amp; Security",
    "content": "To make it as easy as possible to write documentation in plain Markdown, most UI components are styled using default Markdown elements with few additional CSS classes needed. ",
    "url": "/docs/network-security#network--security",
    
    "relUrl": "/docs/network-security#network--security"
  },"364": {
    "doc": "Network & Security",
    "title": "Network & Security",
    "content": " ",
    "url": "/docs/network-security",
    
    "relUrl": "/docs/network-security"
  },"365": {
    "doc": "SSH 기본 개념",
    "title": "SSH 기본 개념",
    "content": " ",
    "url": "/docs/network-security/network-ssh/",
    
    "relUrl": "/docs/network-security/network-ssh/"
  },"366": {
    "doc": "SSH 기본 개념",
    "title": "Table of contents",
    "content": ". | SSH 저장 위치 | 원격 제어 | 인증서 생성 예제 | .pem 파일 | . 시큐어 셀(Secure SHell, SSH)은 네트워크 상의 다른 컴퓨터에 로그인하거나 원격 시스템에서 명령을 실행하고 다른 시스템으로 파일을 복사할 수 있도록 해주는 응용 프로그램 또는 그 프로토콜이다. 많은 Git 서버들은 SSH 공개키로 인증한다. 공개키를 사용하려면 일단 공개키를 만들어야 한다. 공개키를 만드는 방법은 모든 운영체제가 비슷하다. ",
    "url": "/docs/network-security/network-ssh/#table-of-contents",
    
    "relUrl": "/docs/network-security/network-ssh/#table-of-contents"
  },"367": {
    "doc": "SSH 기본 개념",
    "title": "SSH 저장 위치",
    "content": "사용자의 SSH 키들은 기본적으로 사용자의 ~/.ssh 디렉토리에 저장한다. 그래서 만약 디렉토리의 파일을 살펴보면 이미 공개키가 있는지 확인할 수 있다. 대표적인 사용 목적으로는 데이터 전송 과 원격제어 가 있으며, 데이터 전송의 주요 저장소는 깃허브, 원격 저장소 등을 들 수 있다. 소스 코드를 원격 저장소인 깃헙에 푸쉬할 때 SSH를 활용해 파일을 전송하게 된다. ",
    "url": "/docs/network-security/network-ssh/#ssh-%EC%A0%80%EC%9E%A5-%EC%9C%84%EC%B9%98",
    
    "relUrl": "/docs/network-security/network-ssh/#ssh-저장-위치"
  },"368": {
    "doc": "SSH 기본 개념",
    "title": "원격 제어",
    "content": ". | AWS와 같은 클라우드 서비스는 인스턴스 서버에 접속하여 해당 머신에 명령을 내리기 위해서 SSH을 통한 접속을 해야한다.사용이유 : | 보안때문에 FTP나 Telnet과 같은 다른 컴퓨터 통신을 사용하지 않는다. | SSH는 보안적으로 훨씬 안전한 채널을 구성한 뒤 정보를 교환하기 때문에 보다 보안적인 면에서 뛰어나다.어떤 방식으로 서로 다른 컴퓨터가 안전하게 통신하게 하는가?SSH는 다른 컴퓨터와 통신할 때 일반적으로 사용하는 비밀번호 입력을 통한 접속을 하지 않는다. | 기본적으로 SSH는 한 쌍의 Key를 통해 접속하려는 컴퓨터와 인증 과정을 거친다. 이 한 쌍의 Key는 다음과 같다. | Public Key . | 단어 뜻 그대로 공개되어도 비교적 안전한 Key. | 이 키를 통해 메세지를 전송하기 전 암호화를 한다. | 암호화는 가능하지만 복호화는 불가능하다. | . | Private Key . | 절대로 외부에 노출되어서는 안되는 Key. | 본인의 컴퓨터 내부에 저장하게 되어있다. | 암호화된 메세지를 복호화 할 수 있다. | . | . | . | . ",
    "url": "/docs/network-security/network-ssh/#%EC%9B%90%EA%B2%A9-%EC%A0%9C%EC%96%B4",
    
    "relUrl": "/docs/network-security/network-ssh/#원격-제어"
  },"369": {
    "doc": "SSH 기본 개념",
    "title": "인증서 생성 예제",
    "content": "root@master:~# ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/root/.ssh/id_rsa): testkey &lt;-- 공개키 이름 설정 Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in testkey. Your public key has been saved in testkey.pub. The key fingerprint is: SHA256:tN/FZ3XZoZWE0qubqgAUXo1wxRbKEtaQ0ScCRgdrN64 root@master The key's randomart image is: +---[RSA 2048]----+ |.=oOBo=o. o+.|. =o*=.= . oo.+| o *.o+ ....+|. + o . o o| o S . o o| . o . o | E . + | . o | .... | +----[SHA256]-----+ root@master:~# // SSL 인증서 확인 root@master:~# root@master:~# ls -al | grep test -rw------- 1 root root 1766 Jan 15 03:56 testkey -rw-r--r-- 1 root root 393 Jan 15 03:56 testkey.pub root@master:~# root@master:~# cat testkey -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAIp9dMlA gazrBQ7+NbL2aOAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDEmxKWFgQo c3c7vyALV22I+QLSuDxbbEcxuFI/Qz3E0i1yhK23QzXPd8v+Nx7IAbMDVSB3r+OHkEx964 jxvptXHFckrFjpYD7QZPiXjTfCEa1CViKmE7CRYBT6qTzZjT368b9JZSOTkr/SOYjin/UB ame74wMXTlWeUHTTBf4enVPpLOtOS24wZsmmXGwpNYmhrAnM8PQfoza1WpWnkZN3z7Agpy yYv1eSWk6JGhpsb0b9OsI030TkteFB4H67B0SmH4nZ/60mA3jhehTbPLlD9lHG5nCA+kCb r51YgAXaH4zmwoxi4RBWTcw5WltvSkLk/qxjYoyFUgZA3xOm9AruTNTI191v4NxrHAnN0b JUvi/QdbZBK5ao3FWV2Cgp46KRwCyFR+k4UV1Y7GspTbwruTMOAw42azIpPk4UbbXog6mF 7W+/8bqJeHPjYwFtnosk0LZlTGUqhgvB9jT0MYbwRFWUbjByz7pmv7QLhSFHS77/wHGNc3 lTWTykxKGeyIEAAAWg5cXuhFmDEzRy6NUrRdVRpn3Bx1nl/v1TVatHdsnnaLqldgRG4NO5 /ivtLyyn4xGNA5KnNe41U4eb1u1HLS/h43WoTj/s+EdIJb84w5uDgpysNPyWLfL75vY7Hp RHpIXf0rL/x7IuOsOrkZ/Ndac9PuGSOc4UZgKBbf9MuRaHSj5rBKYTmkpC0cx4IeB8Lx/3 MIW5Kub9h3QZKyWmUC19TmKCavsiYDFE5Rha1mNcuW7punjG3fdObOuXmkzPhEpPQfUfRP 1+gFOPzwdBoTP/CxoRx2u1hqs9PcmDRPQ5nu8DPEwXYg3+rdgF79ryIOgpov/WNKUG95WL rAoFjL+Vax5hrhyVIuioulkZFkay6mGfN0bSL6aE911vfqm8nfGqT7nO/4rlsFmsenBljd MnnfLpWl81BvWfPZrC0lL28EuiD/WIUIn82dZ+XU18EhXRL4dskoOhIT+9DuQtdk4MHoT4 QoUx6objL6fL3Fezh1rtDz3B63RGuuX+i07xsaGOsY/XVdh2artNO78CeL77lv2qVD/SKa 8RI0bkqUUzKI4J++HIa+f4uw7alOdZD8Angm3yACLNaSx0zCF1XwwTr/uVVKPiCjuQWXt0 CX1Z/BMAJbjJFP3CEJLldhp/Sp3d9GzETw2+sNoRH5nXTRxFmuIL94Mup16cbLDc1uj0ir zqOxL+8gHU4BpgU8hwmtloAEn7+PvXUV2PYSLdHL9OCM6wl5l7yp1XQeIkG/W++rhpRuth /P+EaJ/RWwJxwT391mjuFNwbUNjr+8IkmLguambo/i9/xro1NQ6DPAn5eKajzMTDVtDgap 03+ZGpd1Bpol4zqYfE0CFAVqRn9hV3tGCFblM+GpqbefLQLpY27nkzFigF7usssjnZvLun eYViSmQdHSSWOYCGvD8mZKvMyw3ZKGD1w8h4PziscplgvMIcBcYq/wTWSa9vNP6uXG/Wvf LEYTREjPB3XEw34EW46n/ogMURuCNje22izwBsb1e0m9cCa1HTa+LLCvb30Ue0+BiBWRvz 1iSNjW4BaBDlXuWQygpDzR+o5b18FPNDpvzlVBiBml9gy0JWWlZ9ucNoDVuxhpKNh5MM5K uWEK3+F9Ae16nMJggW0Opwga3GY2i2bwvoGM5RVgbuKP6lV6WRSA97TROybSjYH+5BIF8I /zxSJZ51tsjn4LKxhRw1yYRd7Q+BzMk+ZluxA143elu0rvcODVC5kUnfE92gPardPNQ6rn hy98TWgI4nxdeOBcXu3XsUdCh7RPVaRdMwrHdzZM8OlP2rjpgEtrZpjl6sSCK8CYDj37Ix BLxE4HAjJrMS80xsg5owhTAFhFuT7V9nKq6mBv9lu4Pt8A4P0JYg/DEdeiEBM2qKuD6HEM hOTjifVvqe6b6dAVaardHPrNM+B291smzqgaKgBYFEunIz7pZGO+Hz0UgjYv1csbITGdE5 VmC8xNh9PAuJKPg93L+VLTKaKZqr4QYNh8Cmd30gvDTMKtC63z7oPU4tEo684/2crm51Jg phYZf6xNvwoq+BJip7OJM+YU99+NPDPdYrKeLXNzVXBAQAh4rVqJsRlArzTtRwNSLjQ3eT iqZkdmWP2Y3aD6E71TheJEp1GlDds0SJnVhXo9810McbAm7rw3SbuOwjdA/AKdgQXmYeZ6 R+iy9r7FUTjmviz+tuB2LOr2nJmTSZgZiAL0mMnjjSkQCP/Lnr0MIatbxNa4Kv1r+of9iB JzK8ku3m66jCvLG/InElk+m3F2FUG+xcSYEqtpTtkdCkbkLjj9+NmL8iiuGA1mZqQYaA1x WshOlGb1/rN120ly+NcrMu7nYeNUYyTK7dXwpOhes1NK2i1KXkPzfdwF2K91oWa81cAAvE Yp2i3HnXd5jhHBBBwUA5lSQaEdX5KRTpsSRVOf7WZRFdF7ot -----END OPENSSH PRIVATE KEY----- root@master:~# cat testkey.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDEmxKWFgQoc3c7vyALV22I+QLSuDxbbEcxuFI/Qz3E0i1yhK23QzXPd8v+Nx7IAbMDVSB3r+OHkEx964jxvptXHFckrFjpYD7QZPiXjTfCEa1CViKmE7CRYBT6qTzZjT368b9JZSOTkr/SOYjin/UBame74wMXTlWeUHTTBf4enVPpLOtOS24wZsmmXGwpNYmhrAnM8PQfoza1WpWnkZN3z7AgpyyYv1eSWk6JGhpsb0b9OsI030TkteFB4H67B0SmH4nZ/60mA3jhehTbPLlD9lHG5nCA+kCbr51YgAXaH4zmwoxi4RBWTcw5WltvSkLk/qxjYoyFUgZA3xOm9AruTNTI191v4NxrHAnN0bJUvi/QdbZBK5ao3FWV2Cgp46KRwCyFR+k4UV1Y7GspTbwruTMOAw42azIpPk4UbbXog6mF7W+/8bqJeHPjYwFtnosk0LZlTGUqhgvB9jT0MYbwRFWUbjByz7pmv7QLhSFHS77/wHGNc3lTWTykxKGeyIE= testuser@testuser-500R5K-501R5K-500R5Q root@master:~# . ",
    "url": "/docs/network-security/network-ssh/#%EC%9D%B8%EC%A6%9D%EC%84%9C-%EC%83%9D%EC%84%B1-%EC%98%88%EC%A0%9C",
    
    "relUrl": "/docs/network-security/network-ssh/#인증서-생성-예제"
  },"370": {
    "doc": "SSH 기본 개념",
    "title": ".pem 파일",
    "content": "PEM (Privacy Enhanced Mail)은 Base64 인코딩된 ASCII 텍스트 입니다. 파일 구분 확장자로 .pem 을 주로 사용하며, 노트패드에서 열기/수정도 가능합니다. 개인키, 서버인증서, 루트인증서, 체인인증서 및 SSL 발급 요청시 생성하는 CSR 등에 사용되는 포맷이며, 가장 광범위하고 거의 99% 대부분의 시스템에 호환되는 산업 표준 포맷입니다. (대부분 텍스트 파일) . SSH 접속에 사용되는 PEM 파일은 SSH Key-paire 중 Private Key다.   SSH 접속을 하려는 Client 측에서 ssh-keygen 명령어를 이용해 Key-pair를 생성한 후 Private key는 pem 파일로 만들어 SSH 서버 접속 시에 사용하고 Public key는 서버의 authorized_keys 파일에 추가해 놓아야 SSH 접속이 가능한다. ",
    "url": "/docs/network-security/network-ssh/#pem-%ED%8C%8C%EC%9D%BC",
    
    "relUrl": "/docs/network-security/network-ssh/#pem-파일"
  },"371": {
    "doc": "New Technology",
    "title": "New Technology",
    "content": "New Technology 관련 기술 개요 및 현황에 대해 정리한다. ",
    "url": "/docs/newtech",
    
    "relUrl": "/docs/newtech"
  },"372": {
    "doc": "Node.js 기본 개념",
    "title": "Node.js 기본 개념",
    "content": " ",
    "url": "/docs/programming-language/nodejs-basic/",
    
    "relUrl": "/docs/programming-language/nodejs-basic/"
  },"373": {
    "doc": "Node.js 기본 개념",
    "title": "Table of contents",
    "content": ". | Node.js 의 특징 | 모듈 설치 및 실행 | 실습 예제 . | 이메일 전송하기 | 웹서버 만들기 | MySQL 사용하기 | . | . ​node.js 의 종류와 사용방법에 대해 정리한다. 참고 자료 . 한시간만에 끝내는 Node.js 입문 . ",
    "url": "/docs/programming-language/nodejs-basic/#table-of-contents",
    
    "relUrl": "/docs/programming-language/nodejs-basic/#table-of-contents"
  },"374": {
    "doc": "Node.js 기본 개념",
    "title": "Node.js 의 특징",
    "content": ". | javaScript 를 이용한다. | 엄청나게 많은 패키지를 이용할 수 있다. | . ",
    "url": "/docs/programming-language/nodejs-basic/#nodejs-%EC%9D%98-%ED%8A%B9%EC%A7%95",
    
    "relUrl": "/docs/programming-language/nodejs-basic/#nodejs-의-특징"
  },"375": {
    "doc": "Node.js 기본 개념",
    "title": "모듈 설치 및 실행",
    "content": "https://www.npmjs.com/ 에서 원하는 모듈을 찾는다. npm install [모듈명] 으로 아래와 같이 설치한다. nodemailer 라는 모듈을 예시로 든다. D:\\99_nodeJs&gt;npm install nodemailer added 1 package, and audited 2 packages in 1s found 0 vulnerabilitie . 아래 그림과 같이 node_modules, package json 파일 등이 생성된다. require 를 이용해서 패키지를 불러온다. const nodemailer = require('nodemailer'); . ",
    "url": "/docs/programming-language/nodejs-basic/#%EB%AA%A8%EB%93%88-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%8B%A4%ED%96%89",
    
    "relUrl": "/docs/programming-language/nodejs-basic/#모듈-설치-및-실행"
  },"376": {
    "doc": "Node.js 기본 개념",
    "title": "실습 예제",
    "content": "이메일 전송하기 . nodemailer 모듈을 사용한다. const nodemailer = require('nodemailer'); const email= { host: \"smtp.mailtrap.io\", port: 2525, auth: { user: \"80e8c610c6dace\", pass: \"aad60e1f687512\" } }; const send = async (option) =&gt; { nodemailer.createTransport( email ).sendMail(option, (error, info) =&gt; { if(error){ console.log(error) } else { console.log(info); return info.response; } }); }; let email_data = { from: \"dmjgr5@gmail.com\", to: \"dmjgr5@gmail.com\", subject: \"테스트 메일입니다.\", text: \"node.js 테스트입니다. \" } send(email_data); . 웹서버 만들기 . express 모듈을 사용한다. const express = require('express'); // 모듈 호출 const app = express(); const server = app.listen(3000, () =&gt; { //3000 번 포트로 지정 console.log('start server : localhost:3000'); }); app.set('views', __dirname + '/views'); app.set('view engine', 'ejs'); app.engine('html', require('ejs').renderFile); app.get('/', function (req, res) { res.render('index.html'); }) app.get('/about', function (req, res) { res.render('about.html'); }) . `node test.js’ . MySQL 사용하기 . npm install mysql --save 모듈을 사용한다. const express = require('express'); // 모듈 호출 const app = express(); const server = app.listen(3000, () =&gt; { //3000 번 포트로 지정 console.log('start server : localhost:3000'); }); var mysql = require('mysql'); var pool = mysql.createPool({ host : '127.0.0.1', user : 'root', password : '', database : 'yse_spring_mvc' }); app.get('/db', function (req, res) { pool.getConnection(function(err, connection) { if (err) throw err; // not connected! // Use the connection connection.query('select 1+1 sum from dual', function (error, results, fields) { res.send(JSON.stringify(results)); console.log('results', results); // When done with the connection, release it. connection.release(); // Handle error after the release. if (error) throw error; // Don't use the connection here, it has been returned to the pool. }); }); }) . ",
    "url": "/docs/programming-language/nodejs-basic/#%EC%8B%A4%EC%8A%B5-%EC%98%88%EC%A0%9C",
    
    "relUrl": "/docs/programming-language/nodejs-basic/#실습-예제"
  },"377": {
    "doc": "Node.js",
    "title": "Node.js",
    "content": " ",
    "url": "/docs/programming-language/nodejs/",
    
    "relUrl": "/docs/programming-language/nodejs/"
  },"378": {
    "doc": "OS Systems",
    "title": "OS Systems",
    "content": "To make it as easy as possible to write documentation in plain Markdown, most UI components are styled using default Markdown elements with few additional CSS classes needed. ",
    "url": "/docs/os-systems",
    
    "relUrl": "/docs/os-systems"
  },"379": {
    "doc": "Proc*C",
    "title": "Proc*C",
    "content": " ",
    "url": "/docs/programming-language/proc/",
    
    "relUrl": "/docs/programming-language/proc/"
  },"380": {
    "doc": "Proc*C",
    "title": "Table of contents",
    "content": ". | DECLARE | SELECT | DML - INSERT, UPDATE, DELETE | CURSOR - DECLARE, OPEN, FETCH, CLOSE | . ProC is a uncommon programming language. I have known the language only with C and C# related to series of C world. ProC could be available to use with SQL in application sources, let me summarize the basic commands and a few samples. DECLARE . DECLARE section be used between BEGIN and END. EXEC SQL BEGIN DECLARE SECTION /*********************** declare host variables ***********************/ EXEC SQL END DECLARE SECTION; . SELECT . The variable number of SELECT and INTO section should be identical. EXEC SQL SELECT name, age, addr INTO :names, :ages, :addrs //requries : in case of using SELECT FROM ex where key = :key; . DML - INSERT, UPDATE, DELETE . DML types are easy to use by adding EXEC SQL before normal SQL queries. EXEC SQL INSERT INTO ex (name, age) VALUES (:names, :ages); EXEC SQL UPDATE ex SET name = :names WHERE key = :key; EXEC SQL DELETE FROM ex WHERE key = :key; . CURSOR - DECLARE, OPEN, FETCH, CLOSE . It is mandatory not to use INTO phrase in SELECT section. FETCH is used with FOR section normally, therefore we can use a condition like WHENEVER to escape FOR section. In order to do release the resource after FETCH, CLOSE should be used. EXEC SQL DECLARE ex_s CURSOR FOR // declare a cursor SELECT name, age FROM ex WHERE key = :key ORDER BY key; EXEC SQL OPEN ex_s; // open with cursor name EXEC SQL FETCH ex_s // fetch data, same the number of SELECT and FETCH INTO phrase INTO :name, :age; EXEC SQL CLOSE ex_s; // . ",
    "url": "/docs/programming-language/proc/#table-of-contents",
    
    "relUrl": "/docs/programming-language/proc/#table-of-contents"
  },"381": {
    "doc": "Programming Language",
    "title": "Programming Language",
    "content": "프로그래밍 언어에 대해 정리해 보고, 언어별 특징 및 기본 개념에 대해 정리해 보고자 한다. ",
    "url": "/docs/programming-language",
    
    "relUrl": "/docs/programming-language"
  },"382": {
    "doc": "Understanding of Python",
    "title": "Understanding of Python",
    "content": " ",
    "url": "/docs/programming-language/flutter-panabara/",
    
    "relUrl": "/docs/programming-language/flutter-panabara/"
  },"383": {
    "doc": "Understanding of Python",
    "title": "Table of contents",
    "content": ". | Python Installation | Python Type | Shallow Copy and Deep Copy | Garbage Collection | Variable Parameter | Lambda Function | yield | Private Member | Inheritance | PYTHONPATH in System Variables | __pycache__ folder | Exception | Input and Output | Pickle | Regular Expression | Time, Math and Random | OS | Database with SQLite3 | Web Crawling with BeautifulSoup | PyQt5 GUI | Pandas | . This is the document for Python, which is basic instruction like Python Installation, Data Types and so on. Let me explain briefly about Python language. Python Installation . | Using python IDLE https://www.python.org | Using Visual Studio Code after extension installation [https://code.visualstudio.com] (https://code.visualstudio.com/) | . Python Type . | List [ ] . | Ordered List | . | Tuple ( ) . | Ordered List, not changed | . | Set { } . | Type with Set (used with Union, Intersection, Difference) | . | Dictionary {“key”:”value”} . | Paired with Key and Value, No ordered list | . | . Shallow Copy and Deep Copy . | Shallow Copy | . a = [1,2,3] b =a import copy a = [1,2,3] b = copy.copy(a) . | Deep Copy | . a = [1,2,3] b = a[:] import copy a = [1,2,3] b = copy.deepcopy(a) . Garbage Collection . | The data type of int, float, complex, String and tuple are immutable, therefore if the variable is updated, it make another new object, so old object which is not used, garbage collection executed. Mostly list and dictionary used because it is mutable type. The immutable type and global variable should be used with ‘global’ to update its value. | Test | . &gt;&gt;&gt; g = 1 &gt;&gt;&gt; def testScope(a): global g g = 2 return g + a print(\"testScoope(1) : \", testScoope(1)) print(\"g : \",g) . | Output | . testScoope(1) : 3 g : 1 . Variable Parameter . | Any number of parameters can be used by adding * (different a pointer from C)in front of parameters | . &gt;&gt;&gt; def test(*args): print(type(args)) &gt;&gt;&gt; test(1, 2) &lt;type 'tuple'&gt; # tuple type &gt;&gt;&gt; def union(*ar): res = [] for item in ar: for x in item: if not x in res: res.append(x) return res &gt;&gt;&gt; union(\"HAM\", \"EGG\", \"SPAM\") ['H', 'A', 'M', 'E', 'G', 'S', 'P'] &gt;&gt;&gt; union(\"gir\", \"generation\", \"gee\") ['g', 'i', 'r', 'e', 'n', 'a', 't', 'o'] . | Any number of parameters (key-value type) can be used by adding ** in front of parameters. It is option where it requires or not. Option parameter is handled as a dictionary type. | . &gt;&gt;&gt; def userURIBuilder(server, port, **user): str = \"http://\" + server + \":\" + port + \"/?\" for key in user.keys(): str += key + \"=\" + user[key] + \"&amp;\" return str &gt;&gt;&gt; userURIBuilder(\"test.com\", \"8080\", id='userid', passwd='1234') 'http://test.com:8080/?passwd=1234&amp;id=userid&amp;' &gt;&gt;&gt; userURIBuilder(\"test.com\", \"8080\", id='userid', passwd='1234', name='mike', age='20') 'http://test.com:8080/?passwd=1234&amp;age=20&amp;id=userid&amp;name=mike&amp;' . Lambda Function . | There is no name, anonymous function. In case of sample function, it is better to use lambda function. | Example : lambda : . | . &gt;&gt;&gt; g = lambda x, y : x * y &gt;&gt;&gt; g(2,3) 6 &gt;&gt;&gt; (lambda x: x * x)(3) 9 . yield . | returns value in real time, used in RANGE phrase. | . &gt;&gt;&gt; def reverse(data): for index in range(len(data) - 1, -1, -1): yield data[index] &gt;&gt;&gt; for char in reverse('gold'): print(char) d l o g . Private Member . | Add __&lt;member variable&gt;, changed _&lt;className&gt;__&lt;memberName&gt; | . class BankAccount: def __init__(self, id, name, balance): self. __ id = id self. __ name = name self. __ balance = balance def deposit(self, amount): self. __ balance += amount def withdraw(self, amount): self. __ balance -= amount def __str__(self): return \"{0}, {1}, {2}\".format(self.__id, self.__name, \\ self.__balance) . Inheritance . | Example : Class Student(Person): | . class Person: … class Student(Person): \"\"\"sub class\"\"\" def __init__(self, name, phoneNumber, subject, studentID): Person.__init__(self, name, phoneNumber) # Call Person Init self.subject = subject self.studentID = studentID . PYTHONPATH in System Variables . | When creating module, we can allocate the module location in specific folder using system properties path named as PYTHONPATH and the absolute path. Classes and Functions can be defined in Module. | Module example . | . from functools import * def intersect(*ar): return reduce(__intersectSC,ar) def __intersectSC(listX, listY): setList = [] for x in listX: if x in listY: setList.append(x) return setList def difference(*ar): setList = [] intersectSet = intersect(*ar) unionSet = union(*ar) for x in unionSet: if not x in intersectSet: setList.append(x) return setList def union(*ar): setList = [] for item in ar: for x in item: if not x in setList: setList.append(x) return setList . | Module Importing Style . | import simpleset . | get from global namespace, get all functions | check with command like dir() | . | from simpleset import union . | specific functions, ex) union function Only | check with command like dir(union) | . | from simpleset import * . | all functions, except the function start with __(double-underlined) | check with command like dir() | . | import simpleset as test1 . | make alias named as test1 | . | . | . __pycache__ folder . | After compile a pyc file, it is generated in __pycache__, as well we can share this file to others as a module, not to show the source code. Pyinstaller is useful for this case : . | pip3 install pyinstaller | python BankAccout.py | BankAccount in ‘dist’ folder | . | . Exception . def divide(a,b): return a/b try: c = divide(5, 2) except ZeroDivisionError: print('0 is not allowed') except TypeError: print(\"All parameters must be numbers\") except: print(\"Not defined\") else: print(\"Result : {0}\", c) finally: print(\"do anything\") . Input and Output . | Output | . import sys f = open(\"C:\\\\work\\\\test.txt\", \"wt\") print(\"file write\", file=f) f.close() . | read() : returns string all from a file | readline() : returns string line by line | readlines() : returns a list with line by line at once | . &gt;&gt;&gt; f = open(\"c:\\\\work\\\\demo.txt\") &gt;&gt;&gt; result = f.read() &gt;&gt;&gt; result 'qqqq\\nabcd\\n1234\\n' &gt;&gt;&gt; print(result) qqqq abcd 1234 &gt;&gt;&gt; f.tell() 25 &gt;&gt;&gt; f.seek(0) 0 &gt;&gt;&gt; f.tell() 0 &gt;&gt;&gt; f.readline() 'qqqq\\n' &gt;&gt;&gt; f.readline() 'abcd\\n' &gt;&gt;&gt; f.readline() '1234\\n' &gt;&gt;&gt; f.seek(0) 0 &gt;&gt;&gt; lst = f.readlines() &gt;&gt;&gt; lst ['qqqq\\n', 'abcd\\n', '1234\\n'] . | Input f = open(\"c:\\\\work\\\\demo1.txt\", \"wt\") f.write(\"qqqq\\nabcd\\n1234\\n\") f.close() . | . Pickle . | Save information temporarily | . import pickle colors = [\"red\", \"blue\", \"gree\"] # Write f = open(\"c:\\\\work\\\\colors\",\"wb\") # write binary pickle.dump(colors,f) # back up with .dump function f.close() # Read f = open(\"c:\\\\work\\\\colors\",\"rb\") # read binary colors = pickle.load(f) # open with .load function print(colors) f.close() del colors # delete list import os os.remove(\"c:\\\\work\\\\colors\") # delete file . Regular Expression . import re f=open('c:\\\\work\\\\PV3.txt','rt') g=open('c:\\\\work\\\\PV3_copy.txt','wt') line = f.readline() while (line != ''): if (re.search(\"\\d{4}\", line)): g.write(line + \"\\n\") line = f.readline() f.close() g.close() . Time, Math and Random . &gt;&gt;&gt; import random &gt;&gt;&gt; random.random() 0.35173868090650484 &gt;&gt;&gt; random.random() 0.5306281074635111 &gt;&gt;&gt; random.uniform(3,4) 3.5888882103413913 &gt;&gt;&gt; for i in range(3): random.gauss(1, 1.0) 0.9384305864119867 1.8460570340312912 1.3857190077793522 &gt;&gt;&gt; [random.randrange(20) for i in range(10)] [12, 2, 4, 11, 2, 15, 7, 13, 17, 15] &gt;&gt;&gt; random.sample(range(20), 10) [8, 6, 0, 7, 2, 4, 10, 11, 12, 18] . &gt;&gt;&gt; import random &gt;&gt;&gt; random.random() 0.35173868090650484 &gt;&gt;&gt; random.random() 0.5306281074635111 &gt;&gt;&gt; random.uniform(3,4) 3.5888882103413913 &gt;&gt;&gt; for i in range(3): random.gauss(1, 1.0) 0.9384305864119867 1.8460570340312912 1.3857190077793522 &gt;&gt;&gt; [random.randrange(20) for i in range(10)] [12, 2, 4, 11, 2, 15, 7, 13, 17, 15] &gt;&gt;&gt; random.sample(range(20), 10) [8, 6, 0, 7, 2, 4, 10, 11, 12, 18] . &gt;&gt;&gt; import random &gt;&gt;&gt; random.random() 0.35173868090650484 &gt;&gt;&gt; random.random() 0.5306281074635111 &gt;&gt;&gt; random.uniform(3,4) 3.5888882103413913 &gt;&gt;&gt; for i in range(3): random.gauss(1, 1.0) 0.9384305864119867 1.8460570340312912 1.3857190077793522 &gt;&gt;&gt; [random.randrange(20) for i in range(10)] [12, 2, 4, 11, 2, 15, 7, 13, 17, 15] &gt;&gt;&gt; random.sample(range(20), 10) [8, 6, 0, 7, 2, 4, 10, 11, 12, 18] . &gt;&gt;&gt; import random &gt;&gt;&gt; random.random() 0.35173868090650484 &gt;&gt;&gt; random.random() 0.5306281074635111 &gt;&gt;&gt; random.uniform(3,4) 3.5888882103413913 &gt;&gt;&gt; for i in range(3): random.gauss(1, 1.0) 0.9384305864119867 1.8460570340312912 1.3857190077793522 &gt;&gt;&gt; [random.randrange(20) for i in range(10)] [12, 2, 4, 11, 2, 15, 7, 13, 17, 15] &gt;&gt;&gt; random.sample(range(20), 10) [8, 6, 0, 7, 2, 4, 10, 11, 12, 18] . OS . &gt;&gt;&gt; from os.path import * &gt;&gt;&gt; abspath('tmp') 'C:\\\\Python35\\\\tmp' &gt;&gt;&gt; basename('c:\\\\python35\\\\tmp') 'tmp' &gt;&gt;&gt; basename('c:\\\\python35\\\\tmp\\\\test.txt') 'test.txt' &gt;&gt;&gt; commonprefix(['c:\\\\python35\\\\lib', 'c:\\\\python35\\tools', 'c:\\\\python35']) 'c:\\\\python35' &gt;&gt;&gt; exists('c:\\\\python35\\\\tmp') False &gt;&gt;&gt; exists('c:\\\\python35') True &gt;&gt;&gt; getsize('c:\\\\python35\\\\python.exe') 26624 &gt;&gt;&gt; isfile('c:\\\\python35\\\\python.exe') True . Database with SQLite3 . SQLite3 is an opensource, which is embedded in Python library. | sqlite3.connect(database[, timeout, isolation_level, detect_types, factory]) | sqlite3.complete_statement(sql) | sqlite3.register_adapter(type, callable) | sqlite3.register_converter(typename, callable) . | Connection Class | Connection.cursor() | Connection.rollback() | Connection.close() | Connection.isolation_level | Connection.execute(sql[, parameters]) | . | Cursor Class . | Cursor.execute(sql[, parameters]) | Cursor.executemany(sql, seq_of_parameters) | Cursor.executescript(sql_script) | Cursor.fetchone() | Cursor.fetchmany([size=cursor.arraysize]) | Cursor.fetchall() | . | Connection.iterdump() . | CRUD example | . import sqlite3 #generate connection object con = sqlite3.connect(\":memory:\") # in memory # con = sqlite3.connect(\"test.db\") # in file #generate cursor cur = con.cursor() # create ( use text intead of varchar2 in SQLite3) cur.execute(\"create table PhoneBook (Name text, PhoneNum text);\") # insert cur.execute(\"insert into PhoneBook values ('derick', '010-111');\") # insert using variables name = \"gil dong\" phoneNumber = \"010-222\" cur.execute(\"insert into PhoneBook values ( ?, ?);\", (name, phoneNumber)) # input using Tuple type # multiple record datalist = ((\"tom\",\"010-123\"),(\"dsp\",\"010-567\")) # tuple in tuple cur.executemany(\"insert into PhoneBook values ( ?, ?);\", datalist) # input using Tuple type, with executemany function # search cur.execute(\"select * from PhoneBook;\") print(cur.fetchone()) print(cur.fetchmany(2)) cur.execute(\"select * from PhoneBook;\") print(cur.fetchall()) # dump print(\"--------- db dump ---------\") for i in con.iterdump(): print(i) # *** Result =&gt; results out as tuple type # ('derick', '010-111') # [('gil dong', '010-222'), ('tom', '010-123')] # [('derick', '010-111'), ('gil dong', '010-222'), ('tom', '010-123'), ('dsp', '010-567')] # --------- db dump --------- # BEGIN TRANSACTION; # CREATE TABLE PhoneBook (Name text, PhoneNum text); # INSERT INTO \"PhoneBook\" VALUES('derick','010-111'); # INSERT INTO \"PhoneBook\" VALUES('gil dong','010-222'); # INSERT INTO \"PhoneBook\" VALUES('tom','010-123'); # INSERT INTO \"PhoneBook\" VALUES('dsp','010-567'); # COMMIT; . | executemany example with tuple data | . import sqlite3 #generate connection object # con = sqlite3.connect(\":memory:\") # in memory con = sqlite3.connect(\"c:\\\\work\\\\sample.db\") # in file #generate cursor cur = con.cursor() # create ( use text intead of varchar2 in SQLite3) cur.execute(\"create table PhoneBook (Name text, PhoneNum text);\") # insert cur.execute(\"insert into PhoneBook values ('derick', '010-111');\") # insert using variables name = \"gil dong\" phoneNumber = \"010-222\" cur.execute(\"insert into PhoneBook values ( ?, ?);\", (name, phoneNumber)) # input using Tuple type # multiple record datalist = ((\"tom\",\"010-123\"),(\"dsp\",\"010-567\")) # tuple in tuple cur.executemany(\"insert into PhoneBook values ( ?, ?);\", datalist) # input using Tuple type, with executemany function # search cur.execute(\"select * from PhoneBook;\") for row in cur: print(row) # commit con.commit() # *** Result =&gt; results out as tuple type # ('derick', '010-111') # ('gil dong', '010-222') # ('tom', '010-123') # ('dsp', '010-567') . | Backup example | . import sqlite3 #generate connection object con = sqlite3.connect(\":memory:\") # in memory # con = sqlite3.connect(\"test.db\") # in file #generate cursor cur = con.cursor() # create ( use text intead of varchar2 in SQLite3) cur.execute(\"create table PhoneBook (Name text, PhoneNum text);\") # insert cur.execute(\"insert into PhoneBook values ('derick', '010-111');\") # insert using variables name = \"gil dong\" phoneNumber = \"010-222\" cur.execute(\"insert into PhoneBook values ( ?, ?);\", (name, phoneNumber)) # input using Tuple type # multiple record datalist = ((\"tom\",\"010-123\"),(\"dsp\",\"010-567\")) # tuple in tuple cur.executemany(\"insert into PhoneBook values ( ?, ?);\", datalist) # input using Tuple type, with executemany function # database dump with open(\"c:\\\\work\\\\dump.sql\",\"wt\") as f: for item in con.iterdump(): print(item) f.write(\"{0}\\n\".format(item)) print(\"backup completed\") # *** Result =&gt; results out as tuple type # BEGIN TRANSACTION; # CREATE TABLE PhoneBook (Name text, PhoneNum text); # INSERT INTO \"PhoneBook\" VALUES('derick','010-111'); # INSERT INTO \"PhoneBook\" VALUES('gil dong','010-222'); # INSERT INTO \"PhoneBook\" VALUES('tom','010-123'); # INSERT INTO \"PhoneBook\" VALUES('dsp','010-567'); # COMMIT; # backup completed . | Restore example | . # open new dump &gt;&gt;&gt; con = sqlite3.connect(\"c:\\\\work\\\\demo.db\") # read old dump &gt;&gt;&gt; with open(\"c:\\\\work\\\\dump.sql\") as f: SQLScript = f.read() # check dump script &gt;&gt;&gt; SQLScript 'BEGIN TRANSACTION;\\nCREATE TABLE PhoneBook (Name text, PhoneNum text);\\nINSERT INTO \"PhoneBook\" VALUES(\\'derick\\',\\'010-111\\');\\nINSERT INTO \"PhoneBook\" VALUES(\\'gil dong\\',\\'010-222\\');\\nINSERT INTO \"PhoneBook\" VALUES(\\'tom\\',\\'010-123\\');\\nINSERT INTO \"PhoneBook\" VALUES(\\'dsp\\',\\'010-567\\');\\nCOMMIT;\\n' # create cursor &gt;&gt;&gt; cur = con.cursor() # execute script &gt;&gt;&gt; cur.executescript(SQLScript) &lt;sqlite3.Cursor object at 0x03F4B7E0&gt; # select &gt;&gt;&gt; cur.execute(\"select * from PhoneBook;\") &lt;sqlite3.Cursor object at 0x03F4B7E0&gt; # fetch all &gt;&gt;&gt; cur.fetchall() [('derick', '010-111'), ('gil dong', '010-222'), ('tom', '010-123'), ('dsp', '010-567')] . Web Crawling with BeautifulSoup . | pip3 list | pip3 install BeautifulSoup4 | pip install requests | pip list . | Example of Webcrawling | . # request webserver import urllib.request from bs4 import BeautifulSoup data = urllib.request.urlopen(\"http://comic.naver.com/webtoon/list.nhn?titleId=20853&amp;weekday=fri\") soup = BeautifulSoup(data, \"html.parser\") cartoons = soup.find_all(\"td\", class_=\"title\") title = cartoons[0].find('a').text link = cartoons[0].find('a')[\"href\"] # print(title) # print(link) for item in cartoons: title = item.find(\"a\").text print(title.strip()) . | Save file and web crawling for all pages | . # coding:utf-8 from bs4 import BeautifulSoup import urllib.request import re for n in range(0,10): #address of clien data ='https://www.clien.net/service/board/sold?&amp;od=T31&amp;po=' + str(n) req = urllib.request.Request(data) data = urllib.request.urlopen(req).read() page = data.decode('utf-8', 'ignore') soup = BeautifulSoup(page, 'html.parser') list = soup.find_all('span', attrs={'data-role':'list-title-text'}) f = open(\"C:\\\\work\\\\clien.txt\", \"a+\", encoding=\"utf-8\") # incase of new, use wt for item in list: try: title = item.text if (re.search('갤럭시', title)): print(title.strip()) f.write(title.strip() + \"\\n\") except: pass f.close() print(\"end of web crawling\") . | Add user-agent in header | . # coding:utf-8 from bs4 import BeautifulSoup import urllib.request import re #User-Agent add hdr = {'User-agent':'Mozila/5.0 (compatible; MSIE 5.5; Windows NT)'} # make request by adding client info with Internet explorer for n in range(1,11): data ='https://dvdprime.com/g2/bbs/board.php?bo_table=comm&amp;page=' + str(n) req = urllib.request.Request(data, \\ headers = hdr) data = urllib.request.urlopen(req).read() page = data.decode('utf-8', 'ignore') soup = BeautifulSoup(page, 'html.parser') # &lt;span class='list_subject_span_pc'&gt;contents&lt;/span&gt; list = soup.find_all('span', attrs={'class':'list_subject_span_pc'}) for item in list: try: title = item.text if (re.search('회사', title)): print(title.strip()) except: pass . PyQt5 GUI . Install PyQt5-5.6-gpl-Py3.5-Qt5.6.0-x32-2.exe, make sure same version with python . | .ui file . | XML format | Make mapping signal and slot in Signal/Slot Editor on Qt designer | . | .py file . | Add login in py file | . | . # demo.ui (display) + demo.py(logic) import sys from PyQt5.QtWidgets import * from PyQt5 import uic import urllib.request from bs4 import BeautifulSoup form_class = uic.loadUiType(\"demo2.ui\")[0] #parent class((QMainWindow)) class DemoForm(QMainWindow, form_class): def __init__(self): super().__init__() self.setupUi(self) def firstClick(self): data = urllib.request.urlopen(\"http://comic.naver.com/webtoon/list.nhn?titleId=20853&amp;weekday=fri\") soup = BeautifulSoup(data, \"html.parser\") cartoons = soup.find_all(\"td\", class_=\"title\") # title = cartoons[0].find('a').text # link = cartoons[0].find('a')[\"href\"] # print(title) # print(link) for item in cartoons: title = item.find(\"a\").text print(title.strip()) def secondClick(self): self.label.setText(\"clicked second\") def thirdClick(self): self.label.setText(\"clicked third\") if __name__ == \"__main__\": app = QApplication(sys.argv) demoWindow = DemoForm() demoWindow.show() app.exec_() . | Get data and show table and link to browser. | . import sys from PyQt5.QtWidgets import * import urllib.request from bs4 import BeautifulSoup import webbrowser import re class Form(QMainWindow): def __init__(self): super().__init__() self.setupUI() def setupUI(self): # (x,y,width,height) self.setGeometry(200, 200, 800, 800) # INPUT self.lineEdit = QLineEdit(\"\", self) self.lineEdit.move(20, 20) #BUTTON self.btn = QPushButton(\"검색\", self) self.btn.move(120, 20) self.btn.clicked.connect(self.setTableWidgetData) self.tableWidget = QTableWidget(self) self.tableWidget.move(20, 70) self.tableWidget.resize(800, 600) self.tableWidget.setRowCount(50) self.tableWidget.setColumnCount(2) self.tableWidget.setColumnWidth(0, 300) self.tableWidget.setColumnWidth(1, 300) self.tableWidget.doubleClicked.connect(self.doubleClicked) def setTableWidgetData(self): row = 0 for n in range(0,5): data ='https://www.clien.net/service/board/sold?&amp;od=T31&amp;po=' + str(n) req = urllib.request.Request(data) data = urllib.request.urlopen(req).read() page = data.decode('utf-8', 'ignore') soup = BeautifulSoup(page, 'html.parser') list = soup.find_all('a', attrs={'class':'list_subject'}) f = open(\"clien.txt\", \"a+\", encoding=\"utf-8\") for item in list: try: span = item.contents[3] title = item.text.strip() if (re.search(self.lineEdit.text(), title)): title = title.replace(\"\\t\", \"\") title = title.replace(\"\\n\", \"\") print(title) link = 'https://www.clien.net' + item['href'] print(link.strip()) f.write(title+\"\\n\") f.write(link + \"\\n\") self.tableWidget.setItem(row, 0, QTableWidgetItem(title)) self.tableWidget.setItem(row, 1, QTableWidgetItem(link)) row += 1 print(\"row: \", row) except: pass f.close() def doubleClicked(self): url = self.tableWidget.item(self.tableWidget.currentRow(), 1).text() webbrowser.open(url) if __name__ == \"__main__\": app = QApplication(sys.argv) mywindow = Form() mywindow.show() app.exec_() . Pandas . | Import type . | from pandas import Series, DataFrame | import pandas as pd | . | Datatypes . | Series . | It is similar to list | . | Dataframe . | 2 array list | . | . | Read function . | read_csv : based on csv from DB mainly | read_table : based on tab key | read_fwf : based on fixed width | read_excel : based on excel | . | Functions . | plt.plot | plt.scatter | plt.bar | . # make one frame years = range(1880,2011) pieces = [] columns = [\"name\", \"sex\", \"births\"] for year in years: path = \"c:\\\\work\\\\yob%d.txt\" % year frame = pd.read_csv(path, names = columns) frame[\"year\"] = year pieces.append(frame) names = pd.concat(pieces, ignore_index=True) . | Summary . total_births = names.pivot_table(\"births\", index = 'year', columns='sex', aggfunc=sum) . | Plot . total_births.plot(title=\"년도별 성별 출생 숫자\") . | . ",
    "url": "/docs/programming-language/flutter-panabara/#table-of-contents",
    
    "relUrl": "/docs/programming-language/flutter-panabara/#table-of-contents"
  },"384": {
    "doc": "Python",
    "title": "Python",
    "content": " ",
    "url": "/docs/programming-language/python/",
    
    "relUrl": "/docs/programming-language/python/"
  },"385": {
    "doc": "Spring 기본 개념",
    "title": "Spring 기본 개념",
    "content": " ",
    "url": "/docs/framework/spring-basic/",
    
    "relUrl": "/docs/framework/spring-basic/"
  },"386": {
    "doc": "Spring 기본 개념",
    "title": "Table of contents",
    "content": ". | Tomcat | HTTP 요청과 응답 | WAS | 설정파일 . | server.xml | web.xml | . | Tabbed Postman | 저장소 . | pageContext : page 별 | request : request 별 | session : 사용자별 | application : context 전체 | . | 서블릿 &gt; JSP &gt; 스프링 &gt; 스프링부트 | @RequestParam 과 @ModelAttribute | @GetMapping , @PostMapping | redirect 와 forward | 쿠키 : 브라우저에 저장 | 세션 : 서버에 저장 | 예외처리 | Spring DI | Java Beans &gt; Servlet &amp; JSP bean &gt; EJB(복잡) &gt; Spring Bean | SQL &amp; SQL Workbench | Spring DB 다루기 &amp; Junit Test | DAO | AOP 개념과 용어 : 중복코드 분리위함 | Controller &gt; Service &gt; Repository(Dao) &gt; DB | @Transactional : 롤백 가능 | Redirect : 300번 응답, 2번 요청 2번 응답, 두번쨰는 브라우저가 자동 GET 요청 | Forward : 다른 곳으로 요청 | . 남궁성의 Spring framework 강좌 가 개인적으로 가장 잘 설명해주시고 이해하기 쉬웠던 강의라 생각한다. 잊지 않기 위해 정리한다. 참조자료 : https://github.com/castello/spring_basic . ",
    "url": "/docs/framework/spring-basic/#table-of-contents",
    
    "relUrl": "/docs/framework/spring-basic/#table-of-contents"
  },"387": {
    "doc": "Spring 기본 개념",
    "title": "Tomcat",
    "content": ". | webapps 폴더에 war 파일을 넣어주면 해당 파일 압축 후에 서비스 된다. | . ",
    "url": "/docs/framework/spring-basic/#tomcat",
    
    "relUrl": "/docs/framework/spring-basic/#tomcat"
  },"388": {
    "doc": "Spring 기본 개념",
    "title": "HTTP 요청과 응답",
    "content": ". | QueryString 을 처리하는 방법 . | @Controller -&gt; @RequestMapping -&gt; request.getParameter(\"aaa\") | . | HTTP 요청 -&gt; HttpServeltRequest request 매개변수 를 받아서 톰캣에서 처리한다. | . [실행결과] http://localhost:8080/ch2/requestInfo?year=2021&amp;month=10&amp;day=1 request.getCharacterEncoding()=UTF-8 request.getContentLength()=-1 request.getContentType()=null request.getMethod()=GET request.getProtocol()=HTTP/1.1 request.getScheme()=http request.getServerName()=localhost request.getServerPort()=8080 request.getRequestURI()=http://localhost:8080/ch2/requestInfo request.getRequestURI()=/ch2/requestInfo request.getContextPath()=/ch2 request.getServletPath()=/requestInfo request.getQueryString()=year=2021&amp;month=10&amp;day=1 request.getLocalName()=localhost request.getLocalPort()=8080 request.getRemoteAddr()=0:0:0:0:0:0:0:1 &lt;--- AWS에 배포(deploy)한 다음에 실행하면, 실제 ip주소를 확인할 수 있음. request.getRemoteHost()=0:0:0:0:0:0:0:1 &lt;--- AWS에 배포(deploy)한 다음에 실행하면, 실제 ip주소를 확인할 수 있음. request.getRemotePort()=54855 . | HttpServeltResponse 를 매개변수에 넣어 response 객체를 얻는다. | . ",
    "url": "/docs/framework/spring-basic/#http-%EC%9A%94%EC%B2%AD%EA%B3%BC-%EC%9D%91%EB%8B%B5",
    
    "relUrl": "/docs/framework/spring-basic/#http-요청과-응답"
  },"389": {
    "doc": "Spring 기본 개념",
    "title": "WAS",
    "content": "Web Application Server : 서버에 프로그램을 설치한다. 예) 프로그램 업데이트를 서버에서만 하면 된다. ",
    "url": "/docs/framework/spring-basic/#was",
    
    "relUrl": "/docs/framework/spring-basic/#was"
  },"390": {
    "doc": "Spring 기본 개념",
    "title": "설정파일",
    "content": "server.xml . | 톰캣 설치경로/conf/server.xml : 톰갯 서버 설정파일 | . web.xml . | 톰갯 설치경로/conf/web.xml : Tomcat 의 모든 web app 의 공통설정 | 웹앱이름/WEB-INF/web.xml : wep app 의 개별 설정 | . ",
    "url": "/docs/framework/spring-basic/#%EC%84%A4%EC%A0%95%ED%8C%8C%EC%9D%BC",
    
    "relUrl": "/docs/framework/spring-basic/#설정파일"
  },"391": {
    "doc": "Spring 기본 개념",
    "title": "Tabbed Postman",
    "content": ". | 크롬 확장프로그램에서 제공되는 Rest Client 로 포스트맨 설치 대신 사용이 가능하다. | . ",
    "url": "/docs/framework/spring-basic/#tabbed-postman",
    
    "relUrl": "/docs/framework/spring-basic/#tabbed-postman"
  },"392": {
    "doc": "Spring 기본 개념",
    "title": "저장소",
    "content": "pageContext : page 별 . request : request 별 . session : 사용자별 . application : context 전체 . ",
    "url": "/docs/framework/spring-basic/#%EC%A0%80%EC%9E%A5%EC%86%8C",
    
    "relUrl": "/docs/framework/spring-basic/#저장소"
  },"393": {
    "doc": "Spring 기본 개념",
    "title": "서블릿 &gt; JSP &gt; 스프링 &gt; 스프링부트",
    "content": " ",
    "url": "/docs/framework/spring-basic/#%EC%84%9C%EB%B8%94%EB%A6%BF--jsp--%EC%8A%A4%ED%94%84%EB%A7%81--%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8",
    
    "relUrl": "/docs/framework/spring-basic/#서블릿--jsp--스프링--스프링부트"
  },"394": {
    "doc": "Spring 기본 개념",
    "title": "@RequestParam 과 @ModelAttribute",
    "content": " ",
    "url": "/docs/framework/spring-basic/#requestparam-%EA%B3%BC-modelattribute",
    
    "relUrl": "/docs/framework/spring-basic/#requestparam-과-modelattribute"
  },"395": {
    "doc": "Spring 기본 개념",
    "title": "@GetMapping , @PostMapping",
    "content": " ",
    "url": "/docs/framework/spring-basic/#getmapping--postmapping",
    
    "relUrl": "/docs/framework/spring-basic/#getmapping--postmapping"
  },"396": {
    "doc": "Spring 기본 개념",
    "title": "redirect 와 forward",
    "content": " ",
    "url": "/docs/framework/spring-basic/#redirect-%EC%99%80-forward",
    
    "relUrl": "/docs/framework/spring-basic/#redirect-와-forward"
  },"397": {
    "doc": "Spring 기본 개념",
    "title": "쿠키 : 브라우저에 저장",
    "content": " ",
    "url": "/docs/framework/spring-basic/#%EC%BF%A0%ED%82%A4--%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90-%EC%A0%80%EC%9E%A5",
    
    "relUrl": "/docs/framework/spring-basic/#쿠키--브라우저에-저장"
  },"398": {
    "doc": "Spring 기본 개념",
    "title": "세션 : 서버에 저장",
    "content": ". | 무조건 서버에서 생성하여 response 헤더에 세션정보를 넣어준다. | . ",
    "url": "/docs/framework/spring-basic/#%EC%84%B8%EC%85%98--%EC%84%9C%EB%B2%84%EC%97%90-%EC%A0%80%EC%9E%A5",
    
    "relUrl": "/docs/framework/spring-basic/#세션--서버에-저장"
  },"399": {
    "doc": "Spring 기본 개념",
    "title": "예외처리",
    "content": ". | try-catch 를 사용한다. | @ContrlloerAdvice 내 @ExceptionHandler 에서 처리하도록 한다. | @ResponseStatus : 응답메시지의 상태코드를 변경할 때 사용한다. | . ",
    "url": "/docs/framework/spring-basic/#%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC",
    
    "relUrl": "/docs/framework/spring-basic/#예외처리"
  },"400": {
    "doc": "Spring 기본 개념",
    "title": "Spring DI",
    "content": " ",
    "url": "/docs/framework/spring-basic/#spring-di",
    
    "relUrl": "/docs/framework/spring-basic/#spring-di"
  },"401": {
    "doc": "Spring 기본 개념",
    "title": "Java Beans &gt; Servlet &amp; JSP bean &gt; EJB(복잡) &gt; Spring Bean",
    "content": " ",
    "url": "/docs/framework/spring-basic/#java-beans--servlet--jsp-bean--ejb%EB%B3%B5%EC%9E%A1--spring-bean",
    
    "relUrl": "/docs/framework/spring-basic/#java-beans--servlet--jsp-bean--ejb복잡--spring-bean"
  },"402": {
    "doc": "Spring 기본 개념",
    "title": "SQL &amp; SQL Workbench",
    "content": " ",
    "url": "/docs/framework/spring-basic/#sql--sql-workbench",
    
    "relUrl": "/docs/framework/spring-basic/#sql--sql-workbench"
  },"403": {
    "doc": "Spring 기본 개념",
    "title": "Spring DB 다루기 &amp; Junit Test",
    "content": " ",
    "url": "/docs/framework/spring-basic/#spring-db-%EB%8B%A4%EB%A3%A8%EA%B8%B0--junit-test",
    
    "relUrl": "/docs/framework/spring-basic/#spring-db-다루기--junit-test"
  },"404": {
    "doc": "Spring 기본 개념",
    "title": "DAO",
    "content": " ",
    "url": "/docs/framework/spring-basic/#dao",
    
    "relUrl": "/docs/framework/spring-basic/#dao"
  },"405": {
    "doc": "Spring 기본 개념",
    "title": "AOP 개념과 용어 : 중복코드 분리위함",
    "content": ". | 메서드의 시작 또는 끝에 자동으로 코드(advice) 를 실행 중에 추가 | 횡단관심사 : 예) logging | @Before, @After, @Around | . ",
    "url": "/docs/framework/spring-basic/#aop-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%9A%A9%EC%96%B4--%EC%A4%91%EB%B3%B5%EC%BD%94%EB%93%9C-%EB%B6%84%EB%A6%AC%EC%9C%84%ED%95%A8",
    
    "relUrl": "/docs/framework/spring-basic/#aop-개념과-용어--중복코드-분리위함"
  },"406": {
    "doc": "Spring 기본 개념",
    "title": "Controller &gt; Service &gt; Repository(Dao) &gt; DB",
    "content": ". | 위 3개 모두 Component 스캔이 된다. | . ",
    "url": "/docs/framework/spring-basic/#controller--service--repositorydao--db",
    
    "relUrl": "/docs/framework/spring-basic/#controller--service--repositorydao--db"
  },"407": {
    "doc": "Spring 기본 개념",
    "title": "@Transactional : 롤백 가능",
    "content": ". | REQUIRES_NEW : 현재와 다른 새로운 transaction 생성한다. (default : REQUIRED) | . ",
    "url": "/docs/framework/spring-basic/#transactional--%EB%A1%A4%EB%B0%B1-%EA%B0%80%EB%8A%A5",
    
    "relUrl": "/docs/framework/spring-basic/#transactional--롤백-가능"
  },"408": {
    "doc": "Spring 기본 개념",
    "title": "Redirect : 300번 응답, 2번 요청 2번 응답, 두번쨰는 브라우저가 자동 GET 요청",
    "content": " ",
    "url": "/docs/framework/spring-basic/#redirect--300%EB%B2%88-%EC%9D%91%EB%8B%B5-2%EB%B2%88-%EC%9A%94%EC%B2%AD-2%EB%B2%88-%EC%9D%91%EB%8B%B5-%EB%91%90%EB%B2%88%EC%A8%B0%EB%8A%94-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EA%B0%80-%EC%9E%90%EB%8F%99-get-%EC%9A%94%EC%B2%AD",
    
    "relUrl": "/docs/framework/spring-basic/#redirect--300번-응답-2번-요청-2번-응답-두번쨰는-브라우저가-자동-get-요청"
  },"409": {
    "doc": "Spring 기본 개념",
    "title": "Forward : 다른 곳으로 요청",
    "content": " ",
    "url": "/docs/framework/spring-basic/#forward--%EB%8B%A4%EB%A5%B8-%EA%B3%B3%EC%9C%BC%EB%A1%9C-%EC%9A%94%EC%B2%AD",
    
    "relUrl": "/docs/framework/spring-basic/#forward--다른-곳으로-요청"
  },"410": {
    "doc": "Spring",
    "title": "Spring",
    "content": " ",
    "url": "/docs/framework/spring/",
    
    "relUrl": "/docs/framework/spring/"
  },"411": {
    "doc": "Spring Boot 참조 자료",
    "title": "Spring Boot 참조 자료",
    "content": ". Spring boot 관련하여 이해하기 쉽고 예제 중심으로 설명된 추천할 만한 자료를 기록한다. 추천 자료 . | 점프 투 스프링부트 . | 남궁성의 Spring Boot 강좌 - 기본편 . | . ",
    "url": "/docs/framework/spring-reference/",
    
    "relUrl": "/docs/framework/spring-reference/"
  },"412": {
    "doc": "Spring Boot",
    "title": "Spring Boot",
    "content": " ",
    "url": "/docs/framework/springboot/",
    
    "relUrl": "/docs/framework/springboot/"
  },"413": {
    "doc": "5 Whys 기법",
    "title": "5 Whys 기법",
    "content": ". 한 플랫폼 기업에서는 장애 원인 분석을 찾기 위한 기법으로 5 Whys 기법을 활용한다고 합니다. 5 Whys 기법는 장애 분석 기법이 아닌 어떠한 상황이 발생했을 때 그에 대한 원인을 파악하기 위해 착안한 방법의 일종이라고 합니다. 일상 생활에서도 특정 원인을 분석할 때 좋을 것 같아 아래와 같이 정리하고자 합니다. 배경 . 5 Whys 는 도요타의 Taiichi Ohno 가 체계적인 문제를 위해 개발한 도구로, 어떠한 문제 상황에 대해 그러한 상황이 발생하게 된 원인을 ‘왜 그러한 상황이 발생했는가?’ 라는 질문을 여러 번 반복해 나가면 문제의 근본 원인에 도달할 수 있다는 방법론입니다. 기법 사례 . 미국 제퍼슨 독립기념관의 대리석 기둥이 해마다 지속적으로 부식되자 많은 보수 비용이 발생하게 되고 기념관의 이미지가 훼손되었습니다. 5Whys 를 통해 이러한 문제를 해결한 사례를 들어보겠습니다. | Why 1. 왜 대리석들이 빨리 부식되는가? . | 비누 청소를 자주 하기 떄문이다. | . | Why 2. 왜 비누 청소를 자주 하는가? . | 비둘기 배설물이 많이 묻기 때문이다. | . | Why 3. 왜 비둘기 배설물이 많은가? . | 비둘기의 먹잇감인 거미줄이 많기 때문이다. | . | Why 4. 왜 거미줄이 많은가? . | 거미의 먹잇감인 불나방이 많이 있었기 때문이다. | . | Why 5. 왜 불나방이 많은가? . | 실내 전등을 주변보다 일찍 켜기 때문이다. | . | . 이를 통해 도출된 근본 원인을 해결하기 위해서 제퍼슨 독립 기념관은 주변보다 2시간 늦게 전등을 밝히는 것으로 문제를 해결했다고 합니다. 정리 . 위와 같이 여러 단계를 거쳐 근본 원인을 도출할 수 있는데, 반드시 5개일 필요는 없다고 합니다. 단계를 거쳐가며 합리적인 원인을 찾아 나가며 근본 원인(root cause) 를 찾는 것으로도 충분하다고 생각합니다. 자신의 고민거리나 상대방의 의견을 파악하는 등 평소 생활 속에서도 많은 도움이 될 것 같기도 하네요. ",
    "url": "/docs/theoretical/theoretical-5why/",
    
    "relUrl": "/docs/theoretical/theoretical-5why/"
  },"414": {
    "doc": "통계 분석 기초 용어 정리",
    "title": "통계 분석 기초 용어 정리",
    "content": ". 빅데이터를 학습하기 전에 가장 먼저 맞닥뜨리는 것이 아무래도 통계일 것입니다. 수집된 자료를 정리, 분석하고 일정한 패턴 분석 및 인과관계를 파악하기 위해서는 기본이 되는 통계 개념을 이해하고 넘어가고자 아래와 같이 정리합니다. ■ 평균 . | 자료의 합 / 자료의 개수 | . ■ 중앙값(Median)      . | 자료를 크기순서로 나열했을 때 가장 중앙에 위치한 값이다.      ㄴ = MEDIAN(범위) | . ■ 최빈값(mode)  . | 자료 중에서 가장 출현빈도가 높은 값이다. | = MODE(범위) | . ■ 분산(Variance)      ㄴ평균을 중심으로 관찰값들이 얼마나 떨어져 분포하는가를 나타낸다.      ㄴ편차제곱합 : 편차1^2 + 편차2^2 + …..      ㄴ분산 = 편차제곱합 / 데이터 수 = VAR(범위) . ■ 표준편차(standard deviation) . | 분산의 양의 제곱근으로 원 자료 측정단위와 같은 단위로 퍼짐 정도를 나타낸다. | 표준편차 = 분산^(1/2) = STDEV(범위) | . ■ 변동계수(coefficient of variation, CV) . | 평균이 크게 다른 두 개 이상의 집단을 비교할 때 또는 각 집단의 상대적 동질성을 비교할 때 주로 사용 | CV = 표준편차 / 평균 | . ■ 범위 . | 최대값 - 최소값, 가장 간단하게 퍼짐 정도를 파악할 수 있는 척도이다. | . ■ 사분위수 범위(IQR : Interquartile Range) . | 제 3사분위수와 제 1사분위수의 차를 의미, 자료의 가운데 부분에 위치한 50%의미 | 사분위수 = 3사분위수 - 1사분위수 = QUARTILE(범위, quart) | . ■ 상자그림 . | 최소값, 1사분위, 2사분위, 3사분위, 최대값을 이용하여 그림을 그린다. | . ■ 백분위수 . | 어떤 숫자들의 집합에서 제c백분위수는 수들의 c% 가 그 값보다 작고 나머지는 그 값보다 큰 값을 말한다. | . ■ 데이터의 Z 값 . | 어떤 특정한 자료값이 평균으로부터 표준편차의 몇 배 만큼 떨어져 있는가를 측정한다. | Z = (변량(x) - 평균) / 표준편차 = STANDARIDZE(x, mean, standard_dev) | . ",
    "url": "/docs/theoretical/theoretical-stats/",
    
    "relUrl": "/docs/theoretical/theoretical-stats/"
  },"415": {
    "doc": "Theoretical",
    "title": "Theoretical",
    "content": "이론적인 내용들을 정리하였습니다. ",
    "url": "/docs/theoretical",
    
    "relUrl": "/docs/theoretical"
  },"416": {
    "doc": "Vue.js 기본 개념",
    "title": "Vue.js 기본 개념",
    "content": " ",
    "url": "/docs/programming-language/vuejs-basic/",
    
    "relUrl": "/docs/programming-language/vuejs-basic/"
  },"417": {
    "doc": "Vue.js 기본 개념",
    "title": "Table of contents",
    "content": ". | Vue 설치 | 데이터 바인딩 | 반복문 | 이벤트 핸들러 | 모달창 만들기 | export defalut . | 데이터 부분 | 가져오는 부분 | . | . 참조 자료 : [인스타그램을 만들며 배워보는 Vue.js 3 완벽 가이드] (https://codingapple.com/course/vue-js/) . ",
    "url": "/docs/programming-language/vuejs-basic/#table-of-contents",
    
    "relUrl": "/docs/programming-language/vuejs-basic/#table-of-contents"
  },"418": {
    "doc": "Vue.js 기본 개념",
    "title": "Vue 설치",
    "content": " ",
    "url": "/docs/programming-language/vuejs-basic/#vue-%EC%84%A4%EC%B9%98",
    
    "relUrl": "/docs/programming-language/vuejs-basic/#vue-설치"
  },"419": {
    "doc": "Vue.js 기본 개념",
    "title": "데이터 바인딩",
    "content": " ",
    "url": "/docs/programming-language/vuejs-basic/#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B0%94%EC%9D%B8%EB%94%A9",
    
    "relUrl": "/docs/programming-language/vuejs-basic/#데이터-바인딩"
  },"420": {
    "doc": "Vue.js 기본 개념",
    "title": "반복문",
    "content": " ",
    "url": "/docs/programming-language/vuejs-basic/#%EB%B0%98%EB%B3%B5%EB%AC%B8",
    
    "relUrl": "/docs/programming-language/vuejs-basic/#반복문"
  },"421": {
    "doc": "Vue.js 기본 개념",
    "title": "이벤트 핸들러",
    "content": "&lt;button @mouseover =\"신고수--\" @click=\"신고수++\"&gt;허위매물신고&lt;/button&gt; &lt;span&gt;신고수 : { {신고수} }&lt;/span&gt; . ",
    "url": "/docs/programming-language/vuejs-basic/#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%9F%AC",
    
    "relUrl": "/docs/programming-language/vuejs-basic/#이벤트-핸들러"
  },"422": {
    "doc": "Vue.js 기본 개념",
    "title": "모달창 만들기",
    "content": "모달창을 미리 만들어 클릭 시 상태조건을 변경한다. &lt;div class=\"black-bg\" v-if=\"모달창열렸니 == true\"&gt; &lt;div class=\"white-bg\"&gt; &lt;h4&gt;상세페이지임&lt;/h4&gt; &lt;p&gt;상세페이지 내용임&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; . ",
    "url": "/docs/programming-language/vuejs-basic/#%EB%AA%A8%EB%8B%AC%EC%B0%BD-%EB%A7%8C%EB%93%A4%EA%B8%B0",
    
    "relUrl": "/docs/programming-language/vuejs-basic/#모달창-만들기"
  },"423": {
    "doc": "Vue.js 기본 개념",
    "title": "export defalut",
    "content": "데이터 부분 . export default [{ id : 0, title: \"Sinrim station 30 meters away\", image: \"https://codingapple1.github.io/vue/room0.jpg\", content: \"18년 신축공사한 남향 원룸 ☀️, 공기청정기 제공\", price: 340000 }, { . 가져오는 부분 . import data from './assets/oneroom.js'; export default { name: 'App', data() { return { 원룸들 : data, . &lt;img :src=\"원룸들[2].image\" class=\"room-img\"&gt; &lt;h4 @click=\"모달창열렸니 = true\"&gt;{ {원룸들[2].title} } &lt;/h4&gt; &lt;p&gt;{ {원룸들[2].price} } 원 &lt;/p&gt; . ",
    "url": "/docs/programming-language/vuejs-basic/#export-defalut",
    
    "relUrl": "/docs/programming-language/vuejs-basic/#export-defalut"
  },"424": {
    "doc": "Vue.js",
    "title": "Vue.js",
    "content": " ",
    "url": "/docs/programming-language/vuejs/",
    
    "relUrl": "/docs/programming-language/vuejs/"
  }
}
